[{"content":"Hugo Stack 主题美化 全局配置 页面基本配色 在 /assets/scss/custom.scss 中加入以下代码： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 // ---------------页面基本配色--------------- :root { // 全局顶部边距 --main-top-padding: 30px; // 全局卡片圆角 --card-border-radius: 25px; // 标签云卡片圆角 --tag-border-radius: 8px; // 卡片间距 --section-separation: 40px; // 全局字体大小 --article-font-size: 1.8rem; // 行内代码背景色 --code-background-color: #f8f8f8; // 行内代码前景色 --code-text-color: #e96900; // 暗色模式下样式 \u0026amp;[data-scheme=\u0026#34;dark\u0026#34;] { // 行内代码背景色 --code-background-color: #ff6d1b17; // 行内代码前景色 --code-text-color: #e96900; } } 全局布局调整 在 ./assets/scss/custom.scss 中加入以下代码： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 //--------------------------------------------------- // 全局页面布局间距调整 .main-container { min-height: 100vh; align-items: flex-start; padding: 0 15px; gap: var(--section-separation); padding-top: var(--main-top-padding); @include respond(md) { padding: 0 37px; } } //-------------------------------------------------- //页面三栏宽度调整 .container { margin-left: auto; margin-right: auto; .left-sidebar { order: -3; max-width: var(--left-sidebar-max-width); } .right-sidebar { order: -1; max-width: var(--right-sidebar-max-width); /// Display right sidebar when min-width: lg @include respond(lg) { display: flex; } } \u0026amp;.extended { @include respond(md) { max-width: 1024px; --left-sidebar-max-width: 25%; --right-sidebar-max-width: 22% !important; } @include respond(lg) { max-width: 1280px; --left-sidebar-max-width: 20%; --right-sidebar-max-width: 30%; } @include respond(xl) { max-width: 1453px; //1536px; --left-sidebar-max-width: 15%; --right-sidebar-max-width: 25%; } } \u0026amp;.compact { @include respond(md) { --left-sidebar-max-width: 25%; max-width: 768px; } @include respond(lg) { max-width: 1024px; --left-sidebar-max-width: 20%; } @include respond(xl) { max-width: 1280px; } } } //------------------------------------------------------- //全局页面小图片样式微调 .article-list--compact article .article-image img { width: var(--image-size); height: var(--image-size); object-fit: cover; border-radius: 17%; } // -------------------------------- // 下拉菜单改圆角样式 .menu { padding-left: 0; list-style: none; flex-direction: column; overflow-x: hidden; // overflow-y: scroll; flex-grow: 1; font-size: 1.6rem; background-color: var(--card-background); // box-shadow: var(--shadow-l2); // 手机端下拉菜单会有莫名小方块 box-shadow: none; display: none; margin: 0; //改为0 border-radius: 10px; //加个圆角 padding: 30px 30px; @include respond(xl) { padding: 15px 0; } \u0026amp;, .menu-bottom-section { gap: 30px; @include respond(xl) { gap: 25px; } } \u0026amp;.show { display: flex; } @include respond(md) { align-items: flex-end; display: flex; background-color: transparent; padding: 0; box-shadow: none; margin: 0; } li { position: relative; vertical-align: middle; padding: 0; @include respond(md) { width: 100%; } svg { stroke-width: 1.33; width: 20px; height: 20px; } a { height: 100%; display: inline-flex; align-items: center; color: var(--body-text-color); gap: var(--menu-icon-separation); } span { flex: 1; } \u0026amp;.current { a { color: var(--accent-color); font-weight: bold; } } } } /*手机模式下的菜单滚动条美化*/ .menu::-webkit-scrollbar { display: none; //防止大屏幕时出现滚动条 } .sidebar header .site-name { margin: 8px; font-size: 2rem; //字体大小 } 文章内容美化 文章内容基本美化 在 ./assets/scss/custom.scss 中加入以下代码： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 //------------------------------------------------ // 文章内容引用块样式 .article-content { blockquote { border-left: 6px solid #358b9a1f !important; background: #3a97431f; } } // --------------------------------------- // 代码块基础样式修改 .highlight { max-width: 102% !important; background-color: var(--pre-background-color); padding: var(--card-padding); position: relative; border-radius: 20px; margin-left: -7px !important; margin-right: -12px; box-shadow: var(--shadow-l1) !important; \u0026amp;:hover { .copyCodeButton { opacity: 1; } } // keep Codeblocks LTR [dir=\u0026#34;rtl\u0026#34;] \u0026amp; { direction: ltr; } pre { margin: initial; padding: 0; margin: 0; width: auto; } } //---------------------------------------------- // light模式下的代码块样式调整 [data-scheme=\u0026#34;light\u0026#34;] .article-content .highlight { background-color: #fff9f3; } [data-scheme=\u0026#34;light\u0026#34;] .chroma { color: #ff6f00; background-color: #fff9f3cc; } //--------------------------------------------------- // 文章内容图片圆角阴影 .article-page .main-article .article-content { img { max-width: 96% !important; height: auto !important; border-radius: 8px; } } //------------------------------------------- // 设置选中字体的区域背景颜色 ::selection { color: #fff; background: #001572; } a { text-decoration: none; color: var(--accent-color); \u0026amp;:hover { color: var(--accent-color-darker); } .link { font-weight: 800; /* 字体粗细为700（加粗） */ padding: 0 2px; /* 内边距为左右各2px */ text-decoration: none; /* 取消默认的下划线 */ cursor: pointer; /* 鼠标指针为指针样式 */ /* 超链接默认颜色（明亮模式） */ color: #000000; /* 明亮模式下链接字体为黑色#000000 */ \u0026amp;:hover { text-decoration: underline; } } @media (prefers-color-scheme: dark) { .link { /* 超链接默认颜色（暗色模式） */ color: #FFFFFF; /* 暗色模式下链接字体为白色#FFFFFF */ } } } //------------------------------------------------- //文章封面高度更改 .article-list article .article-image img { width: 100%; height: 150px; // 设置图片的高度为 150px object-fit: cover; @include respond(md) { height: 200px; } @include respond(xl) { height: 305px; } } //------------------------------------------------------ // 修复引用块内容窄页面显示问题 a { word-break: break-all; } code { word-break: break-all; } MD 引用块样式 在 ./assets/scss/custom.scss 中加入以下代码： 1 2 3 4 5 6 7 // 文章内容引用块样式 .article-content { blockquote { border-left: 6px solid #004b28 !important; background: #366e33; } } 使图床链接的图片居中 目前 Stack 默认只支持本地引用的图片居中，而在使用 url 图片链接时没有居中格式。在 ./assets/scss/partials/layout/article.scss Line 256 处（同级任意位置）增加以下代码： 1 2 3 4 5 6 7 // 图床链接的图片居中 p \u0026gt; img { display: block; margin: 0 auto; max-width: 100%; height: auto; } 统计站点文章数量和字数 在./layout/partials/footer/footer.html 的 \u0026lt;section class=\u0026quot;powerby\u0026quot;\u0026gt; 里边，加入代码： 1 2 3 4 5 6 7 {{ $articleCount := len .Site.RegularPages }} {{ $totalWordCount := 0 }} {{ range .Site.Pages }} {{ $totalWordCount = add $totalWordCount .WordCount }} {{ end }} \u0026lt;p\u0026gt;发布了 {{ $articleCount }} 篇文章 | 共 {{$totalWordCount}} 字\u0026lt;/p\u0026gt; 首页文章样式 在 ./assets/scss/custom.scss 加入代码： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 /*主页文章图片样式*/ $image-scale: 1.2; .article-list article .article-image img { width: 100%; height: 150px; object-fit: cover; //不同显示器（手机，小屏幕电脑，大屏幕电脑）显示的图片高度大小 @include respond(sm) { height: 305px; } @include respond(md) { height: 305px; } @include respond(xl) { height: 325px; } } /*主页文章图片圆角*/ .article-list article { --card-border-radius: 24px; } /*文章标签圆角*/ .article-category a, .article-tags a { border-radius: 11px; } /*鼠标移动到文章图片放大*/ .article-list article .article-image { position: relative; overflow: hidden; //不显示超出的部分 } .article-list article .article-image img:hover { transform: scale($image-scale); //放大尺寸 } .article-list article .article-image img { transition: transform 0.85s ease-in-out;//持续时间 } 文章内部图片样式 在 ./assets/scss/custom.scss 加入代码： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 /*文章内部-页脚-相关文章图片圆角*/ .article-list--compact article .article-image img { border-radius: 17%; } /*文章内部-页脚-相关文章图片放大动画*/ .article-list--compact article \u0026gt; a { transition: .6s ease; } .article-list--compact article \u0026gt; a:hover { transform: scale(1.03, 1.03); overflow: visible; } MacOS 风格代码块 在 ./assets/scss/custom.scss 中加入以下代码： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 // MacOS 风格代码块 .article-content { .highlight:before { content: \u0026#39;\u0026#39;; display: block; background: url(/code-header.svg); height: 32px; width: 100%; background-size: 57px; background-repeat: no-repeat; margin-bottom: 5px; background-position: -1px 2px; } } // light模式下的代码块样式调整 [data-scheme=\u0026#34;light\u0026#34;] .article-content .highlight { background-color: #fdf4eb; } [data-scheme=\u0026#34;light\u0026#34;] .chroma { color: #ff6f00; background-color: #fcf0e4cc; } 在 ./static 文件夹下新建 code-header.svg写入以下代码： 1 2 3 4 5 6 // macOS 红绿灯图标 \u0026lt;svg xmlns=\u0026#34;http://www.w3.org/2000/svg\u0026#34; version=\u0026#34;1.1\u0026#34; x=\u0026#34;0px\u0026#34; y=\u0026#34;0px\u0026#34; width=\u0026#34;470px\u0026#34; height=\u0026#34;130px\u0026#34;\u0026gt; \u0026lt;ellipse cx=\u0026#34;65\u0026#34; cy=\u0026#34;65\u0026#34; rx=\u0026#34;50\u0026#34; ry=\u0026#34;52\u0026#34; stroke=\u0026#34;rgb(220,60,54)\u0026#34; stroke-width=\u0026#34;2\u0026#34; fill=\u0026#34;rgb(237,108,96)\u0026#34;/\u0026gt; \u0026lt;ellipse cx=\u0026#34;225\u0026#34; cy=\u0026#34;65\u0026#34; rx=\u0026#34;50\u0026#34; ry=\u0026#34;52\u0026#34; stroke=\u0026#34;rgb(218,151,33)\u0026#34; stroke-width=\u0026#34;2\u0026#34; fill=\u0026#34;rgb(247,193,81)\u0026#34;/\u0026gt; \u0026lt;ellipse cx=\u0026#34;385\u0026#34; cy=\u0026#34;65\u0026#34; rx=\u0026#34;50\u0026#34; ry=\u0026#34;52\u0026#34; stroke=\u0026#34;rgb(27,161,37)\u0026#34; stroke-width=\u0026#34;2\u0026#34; fill=\u0026#34;rgb(100,200,86)\u0026#34;/\u0026gt; \u0026lt;/svg\u0026gt; 修改代码块样式 修改 .\\assets\\scss\\partials\\layout\\article.scss,在文件尾添加： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 // --------------------代码块样式------------------------ // * 修改边距 // * 背景框添加圆角 // * 调整 copy 按钮位置 .highlight { margin-left: 0; margin-right: 0; width: calc(100%); border-radius: var(--card-border-radius); } .copyCodeButton { top: 6px; right: 6px; } 代码块高亮 在 hugo.yaml 中，添加 highlight 参数，我文章里的代码块配置是这样子的： 1 2 3 4 5 6 7 8 9 10 markup: highlight: noClasses: false codeFences: true guessSyntax: true lineNoStart: 1 lineNos: true lineNumbersInTable: true tabWidth: 4 style: github-dark 关闭代码块语言显示 在 ./assets/scss/custom.scss 中加入以下代码： 1 2 3 4 // 关闭代码块语言显示 .languageCodeButton { display: none; } 外部链接后面显示图标 创建./layouts/_default/_markup/render-link.html文件之后增加如下代码: 1 2 3 4 5 6 7 8 9 10 11 \u0026lt;a class=\u0026#34;link\u0026#34; href=\u0026#34;{{ .Destination | safeURL }}\u0026#34; {{ with .Title }} title=\u0026#34;{{ . }}\u0026#34; {{ end }} {{ if strings.HasPrefix .Destination \u0026#34;http\u0026#34; }} target=\u0026#34;_blank\u0026#34; rel=\u0026#34;noopener\u0026#34; {{ end }}\u0026gt; \u0026lt;span style=\u0026#34;display: inline-flex; align-items: center; gap: 0.5em;\u0026#34;\u0026gt; {{ .Text | safeHTML }} {{ if strings.HasPrefix .Destination \u0026#34;http\u0026#34; }} \u0026lt;svg width=\u0026#34;.7em\u0026#34; height=\u0026#34;.7em\u0026#34; viewBox=\u0026#34;0 0 21 21\u0026#34; xmlns=\u0026#34;http://www.w3.org/2000/svg\u0026#34;\u0026gt; \u0026lt;path d=\u0026#34;m13 3l3.293 3.293l-7 7l1.414 1.414l7-7L21 11V3z\u0026#34; fill=\u0026#34;currentColor\u0026#34; /\u0026gt; \u0026lt;path d=\u0026#34;M19 19H5V5h7l-2-2H5c-1.103 0-2 .897-2 2v14c0 1.103.897 2 2 2h14c1.103 0 2-.897 2-2v-5l-2-2v7z\u0026#34; fill=\u0026#34;currentColor\u0026#34; /\u0026gt; \u0026lt;/svg\u0026gt; {{ end }} \u0026lt;/span\u0026gt; \u0026lt;/a\u0026gt; 或者，创建./layouts/_default/_markup/render-link.html文件之后增加如下代码: 1 2 3 4 5 6 7 8 9 10 11 \u0026lt;a class=\u0026#34;link\u0026#34; href=\u0026#34;{{ .Destination | safeURL }}\u0026#34; {{ with .Title }} title=\u0026#34;{{ . }}\u0026#34; {{ end }} {{ if strings.HasPrefix .Destination \u0026#34;http\u0026#34; }} target=\u0026#34;_blank\u0026#34; rel=\u0026#34;noopener\u0026#34; {{ end }}\u0026gt; \u0026lt;span style=\u0026#34;display: inline-flex; align-items: center; gap: 0.5em;\u0026#34;\u0026gt; \u0026lt;span\u0026gt;{{ .Text | safeHTML }}\u0026lt;/span\u0026gt; {{ if strings.HasPrefix .Destination \u0026#34;http\u0026#34; }} \u0026lt;svg width=\u0026#34;.7em\u0026#34; height=\u0026#34;.7em\u0026#34; viewBox=\u0026#34;0 0 21 21\u0026#34; xmlns=\u0026#34;http://www.w3.org/2000/svg\u0026#34;\u0026gt; \u0026lt;path d=\u0026#34;m13 3l3.293 3.293l-7 7l1.414 1.414l7-7L21 11V3z\u0026#34; fill=\u0026#34;currentColor\u0026#34; /\u0026gt; \u0026lt;path d=\u0026#34;M19 19H5V5h7l-2-2H5c-1.103 0-2 .897-2 2v14c0 1.103.897 2 2 2h14c1.103 0 2-.897 2-2v-5l-2-2v7z\u0026#34; fill=\u0026#34;currentColor\u0026#34; /\u0026gt; \u0026lt;/svg\u0026gt; {{ end }} \u0026lt;/span\u0026gt; \u0026lt;/a\u0026gt; 语言和复制按钮 原本的复制按钮要指针移动到代码块上才出现的，把它固定在右上角，并显示代码的语言种类。 在 ./assets/ts/main.ts 中，第 66 行开始，改成以下代码 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 const highlights = document.querySelectorAll(\u0026#34;.article-content div.highlight\u0026#34;); const copyText = `📄拷贝`, copiedText = `已拷贝!`; highlights.forEach((highlight) =\u0026gt; { const copyButton = document.createElement(\u0026#34;button\u0026#34;); copyButton.innerHTML = copyText; copyButton.classList.add(\u0026#34;copyCodeButton\u0026#34;); highlight.appendChild(copyButton); const codeBlock = highlight.querySelector(\u0026#34;code[data-lang]\u0026#34;); // 获取语言 const lang = codeBlock.getAttribute(\u0026#34;data-lang\u0026#34;); if (!codeBlock) return; copyButton.addEventListener(\u0026#34;click\u0026#34;, () =\u0026gt; { navigator.clipboard .writeText(codeBlock.textContent) .then(() =\u0026gt; { copyButton.textContent = copiedText; setTimeout(() =\u0026gt; { copyButton.textContent = copyText; }, 1000); }) .catch((err) =\u0026gt; { alert(err); console.log(\u0026#34;Something went wrong\u0026#34;, err); }); }); // Add language code button const languageButton = document.createElement(\u0026#34;button\u0026#34;); languageButton.innerHTML = lang.toUpperCase() + \u0026#34;\u0026amp;nbsp;\u0026amp;nbsp;\u0026#34;; languageButton.classList.add(\u0026#34;languageCodeButton\u0026#34;); highlight.appendChild(languageButton); }); new StackColorScheme(document.getElementById(\u0026#34;dark-mode-toggle\u0026#34;)); 在 ./assets/scss/custom.scss 中加入以下代码调整按钮位置（需要自己调整以下距离，因为每个人的大小不一样） 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 /* 复制按钮样式调整 */ .article-content .copyCodeButton { position: absolute; top: 10px; right: 18px; border-radius: 12px; color: #ffffff; background: #3d3c3c; border: 1px solid #333; padding: 5px 10px; font-weight: 500; text-shadow: 0 0 1px rgba(255, 255, 255, 0.5); } /* 注释语言代码框 */ /* .article-content .languageCodeButton { position: absolute; top: 9px; right: 100px; border-radius: 12px; color: #000; background: #ffff00; border: 1px solid #333; padding: 5px 10px; font-family: lato; font-size: 1.5rem; text-shadow: 0 0 1px rgba(255, 255, 255, 0.5); } */ .article-content .copyCodeButton:hover { background: #ffa500; border-color: #000; } 侧边栏美化 页面左右边栏宽度 在 /themes/hugo-theme-stack/assets/scss/grid.scss 的第 29、30 行，修改为: 1 2 --left-sidebar-max-width: 14%; --right-sidebar-max-width: 22%; 右侧导航栏动画 在 ./assets/scss/custom.scss 中加入以下代码： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 //------------------------------------------------------ /*------------------右侧导航栏动画--------------*/ // 搜索菜单动画 .search-form.widget { transition: transform 0.6s ease; } .search-form.widget:hover { transform: scale(1.1, 1.1); } //------------------------------------------------------ //归档小图标放大动画 .widget.archives .widget-archive--list { transition: transform .3s ease; } .widget.archives .widget-archive--list:hover { transform: scale(1.05, 1.05); } //------------------------------------------------------ //右侧标签放大动画 .tagCloud .tagCloud-tags a { border-radius: 10px; font-size: 1.4rem; transition: transform .3s ease; } .tagCloud .tagCloud-tags a:hover { transform: scale(1.1, 1.1); } 左侧导航栏美化 在 ./assets/scss/custom.scss 加入代码： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 /*--------------------左侧导航栏---------------*/ .left-sidebar { --sidebar-avatar-size: 115px; //左侧头像大小 --sidebar-element-separation: 15px; //头像下方间距 --emoji-size: 40px; //emoji容器大小 --emoji-font-size: 25px; //emoji字体大小 } /*社交菜单居中*/ .social-menu svg { gap: 15px; justify-content: center; width: 30px; height: 30px; //社交菜单大小 stroke: var(--body-text-color); stroke-width: 1.33; } 左侧导航栏动画 在 ./assets/scss/custom.scss 中加入以下代码： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 //------------------------------------------------------ /* 左侧栏选项动画 */ #main-menu { overflow: visible; li { a { -webkit-font-smoothing: antialiased; will-change: transform; transition: transform 0.6s ease; \u0026amp;:hover { transform: scale(1.1, 1.1); will-change: transform; } } } } /* 归档和链接卡片动画 */ .article-list--compact { overflow: visible; } .article-list--compact article { transition: transform 0.6s ease; -webkit-font-smoothing: antialiased; will-change: transform; \u0026amp;:hover { transform: scale(1.05,1.05); z-index: 4; } } /* 分类页面动画 */ .article-list--tile article { transition: 0.6s ease; } .article-list--tile article:hover { transform: scale(1.05, 1.05); will-change: transform; } 社交 social 自定义图标，iconfont 下载，颜色 #2c3e50，大小 24，格式 svg。下载后放到 .\\assets\\icons 本主题自带了一些来自【 Tabler Icons 】的 SVG 图标。您可以在主题文件夹下找到它们 .\\assets\\icons 注意：将下载的 img 中的 svg 的所有 #2c3e50 改成 currentColor，否则切换为黑色模式，图标颜色不能自动切换，因为优先使用内部定义的 color 修改 hugo 主配置文件，修改下面的内容： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 menu: main: [] # 主菜单 social: - identifier: bilibili # 标识符 name: Bilibili # 显示名称 url: https://space.bilibili.com/35158479 # 链接地址 weight: 100 # 项目的优先级，值越低，优先级越高。 params: icon: brand-bilibili # 图标名称 newTab: true # 新标签页中打开此链接 - identifier: github # 标识符 name: GitHub # 显示名称 url: https://github.com/meimolihan # 链接地址 weight: 200 # 项目的优先级，值越低，优先级越高。 params: icon: brand-github # 图标名称 newTab: true # 新标签页中打开此链接 - identifier: rss # 标识符 name: RSS # 显示名称 url: https://meimolihan.github.io/index.xml # 链接地址 weight: 300 # 项目的优先级，值越低，优先级越高。 params: icon: brand-rss # 图标名称 newTab: true # 新标签页中打开此链接 图标360度旋转动画.\\assets\\scss\\custom.scss追加以下代码： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 .icon-tabler-brand-bilibili { transition: transform 1s ease-in-out; } /* 鼠标悬停时让 SVG 图标旋转 360 度 */ .icon-tabler-brand-bilibili:hover { transform: rotate(360deg); } .icon-tabler-brand-github { transition: transform 1s ease-in-out; } /* 鼠标悬停时让 SVG 图标旋转 360 度 */ .icon-tabler-brand-github:hover { transform: rotate(360deg); .icon-tabler-rss { transition: transform 1s ease-in-out; } /* 鼠标悬停时让 SVG 图标旋转 360 度 */ .icon-tabler-rss:hover { transform: rotate(360deg); } 明亮模式，调整位置 在 ./assets/scss/custom.scss 中加入以下代码： 1 2 3 4 5 6 // 明暗模式切换按钮，调整位置 #dark-mode-toggle { margin-bottom: 100px; // 明暗模式，上下高度 // margin-left: 10px; // 明暗模式，左右调节 gap: 30px; // 明暗模式，横向宽度 } 手动修改左右侧边栏设置样式 在 /assets/scss/grid.scss 中修改 left-sidebar 和 right-sidebar 的描述： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 // 为左右侧边栏设置样式，将左侧边栏的排列顺序设为 -3 并将最大宽度设为父容器的 10%，右侧边栏排列顺序设为 -1 且最大宽度为父容器的 20%，同时利用自定义响应式混合器，使右侧边栏在屏幕达到特定大尺寸（对应 lg）时以弹性布局显示。 .left-sidebar { order: -3; // max-width: var(--left-sidebar-max-width); max-width: 10%; } .right-sidebar { order: -1; // max-width: var(--right-sidebar-max-width); max-width: 20%; /// Display right sidebar when min-width: lg @include respond(lg) { display: flex; } } 把正文的占比改到了 70%, 原来的只有 50% 左右\n头像旋转 在 ./assets/scss/custom.scss 中加入以下代码： 1 2 3 4 5 6 7 8 // ----------头像旋转动画-------------- .sidebar header .site-avatar .site-logo { transition: transform 1.65s ease-in-out; // 旋转时间 } .sidebar header .site-avatar .site-logo:hover { transform: rotate(360deg); // 旋转角度为360度 } 友情链接+分类+标签+归档【三栏显示】 在 ./assets/scss/custom.scss 中加入以下代码： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 //------------------------------------------------------ // 友情链接+分类+标签+归档【三栏显示】 @media (min-width: 1024px) { .article-list--compact { display: grid; // 目前是三列，如需二列，则后面减去一个1fr，以此类推 grid-template-columns: 1fr 1fr 1fr; background: none; box-shadow: none; gap: 1rem; article { background: var(--card-background); border: none; box-shadow: var(--shadow-l2); margin-bottom: 8px; margin-right: 8px; border-radius: 16px; } } } 缩小归档页的分类卡片尺寸 默认的卡片有些太大了， ./assets/scss/partials/layout/list.scss中加入以下代码：(并修改) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 //---------------缩小归档页的分类卡片尺寸--------------- .subsection-list { overflow-x: auto; .article-list--tile { display: flex; padding-bottom: 0px; article { width: 230px; height: 120px; margin-right: 5px; flex-shrink: 0; .article-title { margin: 0; font-size: 1.8rem; } .article-details { padding: 20px; } } } } 调整 TOC 目录间距 在 ./assets/scss/custom.scss 中加入以下代码： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 // ----------------调整 TOC 目录间距------------------ // 主要解决了几个问题： // 目录太高了，使得之前添加的返回顶部按钮可能会被顶出屏幕； // 目录项前面的小黑点不太好看，隐去； // 目录项之间的距离不够紧凑。 .widget--toc { background-color: var(--card-background); border-radius: var(--card-border-radius); box-shadow: var(--shadow-l2); //修改阴影样式 display: flex; flex-direction: column; color: var(--card-text-color-main); overflow: hidden; display:inline-block; //根据内容调整宽度 #TableOfContents { max-height: 65vh; ol, ul { list-style-type: none; } li { margin: 10px 10px; \u0026amp; \u0026gt; ol, \u0026amp; \u0026gt; ul { margin-top: 10px; padding-left: 10px; margin-bottom: -5px; \u0026amp; \u0026gt; li:last-child { margin-bottom: 0; } } } \u0026amp; \u0026gt; ul { padding: 0 1em; } li { margin: 5px 20px; //第一个参数是行间距，第二个是卡片周边的宽度 padding: 6px; //控制内边距 \u0026amp; \u0026gt; ol, \u0026amp; \u0026gt; ul { margin-top: 10px; padding-left: 10px; margin-bottom: -5px; \u0026amp; \u0026gt; li:last-child { margin-bottom: 0; } } } } } 鼠标悬停，超链接的显示 在 ./assets/scss/custom.scss 中加入以下代码： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 // ---------------------鼠标悬停，超链接的显示------------------- a { text-decoration: none; color: var(--accent-color); \u0026amp;:hover { color: var(--accent-color-darker); } \u0026amp;.link { // 鼠标未悬停时，超链接显示2px的高亮 box-shadow: 0px -2px 0px rgba(var(--link-background-color), var(--link-background-opacity-hover)) inset; transition: all 0.3s ease; \u0026amp;:hover { // 鼠标悬停，高亮为18px box-shadow: 0px -18px 0px rgba(var(--link-background-color), var(--link-background-opacity-hover)) inset; } } } 其它小部件 添加站点统计信息与 i18n 展示格式：\n本博客已稳定运行 x 天 y 小时 z 分钟\n共发表 x 篇文章・总计 y k 字\n本站总访问量 x 次\n在根目录./layouts/partials/footer/footer.html 文件内添加如下代码:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 \u0026lt;section class=\u0026#34;count_info\u0026#34;\u0026gt; \u0026lt;div\u0026gt; {{ T \u0026#34;footer.runtime1\u0026#34; }} \u0026lt;span id=\u0026#34;ds\u0026#34; class=\u0026#34;running-days\u0026#34;\u0026gt;\u0026lt;/span\u0026gt; {{ T \u0026#34;footer.runtime2\u0026#34; }} \u0026lt;span id=\u0026#34;hs\u0026#34; class=\u0026#34;running-days\u0026#34;\u0026gt;\u0026lt;/span\u0026gt; {{ T \u0026#34;footer.runtime3\u0026#34; }} \u0026lt;span id=\u0026#34;ms\u0026#34; class=\u0026#34;running-days\u0026#34;\u0026gt;\u0026lt;/span\u0026gt; {{ T \u0026#34;footer.runtime4\u0026#34; }} \u0026lt;/div\u0026gt; \u0026lt;div\u0026gt; {{$scratch := newScratch}} {{ range (where .Site.Pages \u0026#34;Kind\u0026#34; \u0026#34;page\u0026#34; )}} {{$scratch.Add \u0026#34;total\u0026#34; .WordCount}} {{ end }} {{ T \u0026#34;footer.count1\u0026#34; }} {{ len (where .Site.RegularPages \u0026#34;Section\u0026#34; \u0026#34;post\u0026#34;) }} {{ T \u0026#34;footer.count2\u0026#34; }} {{ div ($scratch.Get \u0026#34;total\u0026#34;) 1000.0 | lang.FormatNumber 2 }} k {{ T \u0026#34;footer.count3\u0026#34; }} \u0026lt;/div\u0026gt; \u0026lt;div\u0026gt; \u0026lt;span id=\u0026#34;busuanzi_container_site_pv\u0026#34;\u0026gt;{{ T \u0026#34;footer.pv1\u0026#34; }}\u0026lt;span id=\u0026#34;busuanzi_value_site_pv\u0026#34;\u0026gt;\u0026lt;/span\u0026gt;{{ T \u0026#34;footer.pv2\u0026#34; }}\u0026lt;/span\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/section\u0026gt; \u0026lt;!-- Add blog running time --\u0026gt; \u0026lt;script\u0026gt; let s1 = \u0026#39;2023-6-18\u0026#39;; //website start date s1 = new Date(s1.replace(/-/g, \u0026#34;/\u0026#34;)); let s2 = new Date(); let timeDifference = s2.getTime() - s1.getTime(); let days = Math.floor(timeDifference / (1000 * 60 * 60 * 24)); let hours = Math.floor((timeDifference % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)); let minutes = Math.floor((timeDifference % (1000 * 60 * 60)) / (1000 * 60)); document.getElementById(\u0026#39;ds\u0026#39;).innerHTML = days; document.getElementById(\u0026#39;hs\u0026#39;).innerHTML = hours; document.getElementById(\u0026#39;ms\u0026#39;).innerHTML = minutes; \u0026lt;/script\u0026gt; 在主题目录/i18n/zh-cn.yaml 下找到对应语言的文件，在属性 footer 下添加相应字段，结果如下: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 footer: # 本博客已稳定运行1天2小时3分钟 runtime1: other: 本博客已稳定运行 runtime2: other: 天 runtime3: other: 小时 runtime4: other: 分钟 # 共发表x篇文章，总计y k字 count1: other: 共发表 count2: other: 篇文章 · 总计 count3: other: 字 # 本站总访问量X次 pv1: other: 本站总访问量 pv2: other: 次 添加访客地图 在根目录./layouts/partials/sidebar/right.html 添加后完整代码如下： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 {{- $scope := default \u0026#34;homepage\u0026#34; .Scope -}} {{- $context := .Context -}} {{- with (index .Context.Site.Params.widgets $scope) -}} \u0026lt;aside class=\u0026#34;sidebar right-sidebar sticky\u0026#34;\u0026gt; {{ range $widget := . }} {{ if templates.Exists (printf \u0026#34;partials/widget/%s.html\u0026#34; .type) }} {{ partial (printf \u0026#34;widget/%s\u0026#34; .type) (dict \u0026#34;Context\u0026#34; $context \u0026#34;Params\u0026#34; .params) }} {{ else }} {{ warnf \u0026#34;Widget %s not found\u0026#34; .type }} {{ end }} {{ end }} \u0026lt;div style=\u0026#34;height: 30%;width: 30%\u0026#34;\u0026gt; \u0026lt;script type=\u0026#34;text/javascript\u0026#34; id=\u0026#34;clstr_globe\u0026#34; src=\u0026#34;//clustrmaps.com/globe.js?d=xxxxx\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/aside\u0026gt; {{ end }} 鼠标样式 准备好鼠标样式图片(默认，指针，文本…)，图片大小建议控制在 32px 左右，将.png图片放入static/mouse文件夹下(文件夹自己创建)\n修改对应的图片名即可 修改./assets/scss/custom.scss(文件不存在则自己创建)，将以下代码复制进去，根据主题按实际情况填写对应的css选择器 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 // 【Stack主题鼠标样式写法】 // default光标图片 body, html, .article-content img { cursor: url(../mouse/default.png), auto !important; } // pointer光标图片 a:hover, button:hover, .copyCodeButton:hover, #dark-mode-toggle { cursor: url(../mouse/pointer.png), auto; } // text光标图片 input:hover, .site-description, .article-subtitle, .article-content span, .article-content li, .article-content p { cursor: url(../mouse/text.png), auto; } /*主页布局间距调整*/ .main-container { gap: 50px; //文章宽度 @include respond(md) { padding: 0 30px; gap: 40px; //中等屏幕时的文章宽度 } } .related-contents { overflow-x: visible; //显示隐藏的图标 padding-bottom: 15px; } 首页欢迎横幅 在 ./layouts/index.html的 \u0026lt;section class=\u0026quot;article-list\u0026quot;\u0026gt; 前添加以下代码： 1 2 3 4 5 6 7 8 9 10 11 \u0026lt;!-- 首页欢迎字幅 --\u0026gt; \u0026lt;div class=\u0026#34;welcome\u0026#34;\u0026gt; \u0026lt;p style=\u0026#34;font-size: 2rem; text-align: center; font-weight: bold\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;shake\u0026#34;\u0026gt;👋\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026#34;jump-text1\u0026#34; \u0026gt; Welcome\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026#34;jump-text2\u0026#34;\u0026gt; To \u0026lt;/span\u0026gt; \u0026lt;span class=\u0026#34;jump-text3\u0026#34; style=\u0026#34;color:#e99312\u0026#34;\u0026gt;Xa\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026#34;jump-text4\u0026#34; style=\u0026#34;color:#e99312\u0026#34;\u0026gt;l\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026#34;jump-text5\u0026#34; style=\u0026#34;color:#e99312\u0026#34;\u0026gt;a\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026#34;jump-text6\u0026#34; style=\u0026#34;color:#e99312\u0026#34;\u0026gt;o\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026#34;jump-text7\u0026#34; style=\u0026#34;color:#e99312\u0026#34;\u0026gt;k\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026#34;jump-text8\u0026#34; style=\u0026#34;color:#e99312\u0026#34;\u0026gt;\u0026#39;s\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026#34;jump-text9\u0026#34; style=\u0026#34;color:#e99312\u0026#34;\u0026gt;Blog\u0026lt;/span\u0026gt; \u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;!-- 首页欢迎字幅 --\u0026gt; 在 ./assets/scss/custom.scss 中加入以下代码： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 // ----------------首页欢迎板块样式---------------- .welcome { color: var(--card-text-color-main); background: var(--card-background); box-shadow: var(--shadow-l2); border-radius: 30px; display: inline-block; } // 👋emoji实现摆动效果 .shake { display: inline-block; animation: shake 1s; animation-duration: 1s; animation-timing-function: ease; animation-delay: 0s; animation-iteration-count: 1; animation-direction: normal; animation-fill-mode: none; animation-play-state: running; animation-name: shake; animation-timeline: auto; animation-range-start: normal; animation-range-end: normal; animation-delay: 2s; @keyframes shake { 0% { transform: rotate(0); } 25% { transform: rotate(45deg) scale(1.2); } 50% { transform: rotate(0) scale(1.2); } 75% { transform: rotate(45deg) scale(1.2); } 100% { transform: rotate(0); } } } // 实现字符跳动动画 .jump-text1 { display: inline-block; animation: jump 0.5s 1; } .jump-text2 { display: inline-block; animation: jump 0.5s 1; animation-delay: 0.1s; } .jump-text3 { display: inline-block; animation: jump 0.5s 1; animation-delay: 0.2s; } .jump-text4 { display: inline-block; animation: jump 0.5s 1; animation-delay: 0.3s; } .jump-text5 { display: inline-block; animation: jump 0.5s 1; animation-delay: 0.4s; } .jump-text6 { display: inline-block; animation: jump 0.5s 1; animation-delay: 0.5s; } .jump-text7 { display: inline-block; animation: jump 0.5s 1; animation-delay: 0.6s; } .jump-text8 { display: inline-block; animation: jump 0.5s 1; animation-delay: 0.7s; } .jump-text9 { display: inline-block; animation: jump 0.5s 1; animation-delay: 0.9s; } @keyframes jump { 0% { transform: translateY(0); } 50% { transform: translateY(-20px); } 100% { transform: translateY(0); } } 删除“使用 Hugo 构建 主题Stack由Jimmy设计”等字样 删除掉./layout/partials/footer/footer.html 原先的代码，注意是 里边的 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 {{- $ThemeVersion := \u0026#34;3.29.0\u0026#34; -}} \u0026lt;footer class=\u0026#34;site-footer\u0026#34;\u0026gt; \u0026lt;section class=\u0026#34;copyright\u0026#34;\u0026gt; \u0026amp;copy; {{ if and (.Site.Params.footer.since) (ne .Site.Params.footer.since (int (now.Format \u0026#34;2006\u0026#34;))) }} {{ .Site.Params.footer.since }} - {{ end }} {{ now.Format \u0026#34;2006\u0026#34; }} {{ default .Site.Title .Site.Copyright }} \u0026lt;/section\u0026gt; \u0026lt;!------------- 以下的删除掉 -------------\u0026gt; \u0026lt;section class=\u0026#34;powerby\u0026#34;\u0026gt; {{ with .Site.Params.footer.customText }} {{ . | safeHTML }} \u0026lt;br/\u0026gt; {{ end }} {{- $Generator := `\u0026lt;a href=\u0026#34;https://gohugo.io/\u0026#34; target=\u0026#34;_blank\u0026#34; rel=\u0026#34;noopener\u0026#34;\u0026gt;Hugo\u0026lt;/a\u0026gt;` -}} {{- $Theme := printf `\u0026lt;b\u0026gt;\u0026lt;a href=\u0026#34;https://github.com/CaiJimmy/hugo-theme-stack\u0026#34; target=\u0026#34;_blank\u0026#34; rel=\u0026#34;noopener\u0026#34; data-version=\u0026#34;%s\u0026#34;\u0026gt;Stack\u0026lt;/a\u0026gt;\u0026lt;/b\u0026gt;` $ThemeVersion -}} {{- $DesignedBy := `\u0026lt;a href=\u0026#34;https://jimmycai.com\u0026#34; target=\u0026#34;_blank\u0026#34; rel=\u0026#34;noopener\u0026#34;\u0026gt;Jimmy\u0026lt;/a\u0026gt;` -}} {{ T \u0026#34;footer.builtWith\u0026#34; (dict \u0026#34;Generator\u0026#34; $Generator) | safeHTML }} \u0026lt;br /\u0026gt; {{ T \u0026#34;footer.designedBy\u0026#34; (dict \u0026#34;Theme\u0026#34; $Theme \u0026#34;DesignedBy\u0026#34; $DesignedBy) | safeHTML }} {{ $articleCount := len .Site.RegularPages }} {{ $totalWordCount := 0 }} {{ range .Site.Pages }} {{ $totalWordCount = add $totalWordCount .WordCount }} {{ end }} \u0026lt;p\u0026gt;发布了 {{ $articleCount }} 篇文章 | 共 {{$totalWordCount}} 字\u0026lt;/p\u0026gt; \u0026lt;/section\u0026gt; \u0026lt;!------------- 以上的删除掉 -------------\u0026gt; \u0026lt;/footer\u0026gt; 添加【返回顶部】按钮 返回顶部图片，复制以下代码保存为.svg文件,放到./assets/icons文件夹下(不存在则自行创建) 1 2 3 4 5 6 7 8 \u0026lt;svg xmlns=\u0026#34;http://www.w3.org/2000/svg\u0026#34; width=\u0026#34;30\u0026#34; height=\u0026#34;30\u0026#34; viewBox=\u0026#34;0 0 24 24\u0026#34; fill=\u0026#34;none\u0026#34; stroke=\u0026#34;#707070\u0026#34; stroke-width=\u0026#34;2\u0026#34; stroke-linecap=\u0026#34;round\u0026#34; stroke-linejoin=\u0026#34;round\u0026#34; class=\u0026#34;icon icon-tabler icons-tabler-outline icon-tabler-square-rounded-arrow-up\u0026#34;\u0026gt; \u0026lt;path stroke=\u0026#34;none\u0026#34; d=\u0026#34;M0 0h24v24H0z\u0026#34; fill=\u0026#34;none\u0026#34;/\u0026gt; \u0026lt;path d=\u0026#34;M16 12l-4 -4l-4 4\u0026#34;/\u0026gt; \u0026lt;path d=\u0026#34;M12 16v-8\u0026#34;/\u0026gt; \u0026lt;path d=\u0026#34;M12 3c7.2 0 9 1.8 9 9s-1.8 9 -9 9s-9 -1.8 -9 -9s1.8 -9 9 -9z\u0026#34;/\u0026gt; \u0026lt;/svg\u0026gt; 将以下代码复制到layouts/partials/footer/custom.html文件中(不存在则自行创建) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 \u0026lt;!-- layouts/partials/footer/custom.html --\u0026gt; \u0026lt;!-- 返回顶部按钮 --\u0026gt; \u0026lt;style\u0026gt; #backTopBtn { display: none; position: fixed; bottom: 30px; z-index: 99; cursor: pointer; width: 30px; height: 30px; background-image: url({{ (resources.Get \u0026#34;icons/backTop.svg\u0026#34;).RelPermalink }}); /* 为 transform 属性添加过渡效果，持续时间 1 秒，过渡方式为缓入缓出 */ transition: transform 1s ease-in-out; } #backTopBtn:hover { /* 悬停时360度旋转 */ transform: rotate(360deg); } \u0026lt;/style\u0026gt; \u0026lt;script\u0026gt; /** * 滚动回顶部初始化 */ function initScrollTop() { let rightSideBar = document.querySelector(\u0026#34;.right-sidebar\u0026#34;); if (!rightSideBar) { return; } // 添加返回顶部按钮到右侧边栏 let btn = document.createElement(\u0026#34;div\u0026#34;); btn.id = \u0026#34;backTopBtn\u0026#34;; btn.onclick = backToTop rightSideBar.appendChild(btn) // 滚动监听 window.onscroll = function() { // 当网页向下滑动 20px 出现\u0026#34;返回顶部\u0026#34; 按钮 if (document.body.scrollTop \u0026gt; 20 || document.documentElement.scrollTop \u0026gt; 20) { btn.style.display = \u0026#34;block\u0026#34;; } else { btn.style.display = \u0026#34;none\u0026#34;; } }; } /** * 返回顶部 */ function backToTop(){ window.scrollTo({ top: 0, behavior: \u0026#34;smooth\u0026#34; }) } initScrollTop(); \u0026lt;/script\u0026gt; 我使用中的 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 \u0026lt;style\u0026gt; #backTopBtn { display: none; position: fixed; bottom: 100px; /* 新增右侧定位 */ right: 480px; z-index: 99; cursor: pointer; width: 40px; height: 40px; background-image: url({{ (resources.Get \u0026#34;icons/backTop.svg\u0026#34;).RelPermalink }}); /* 添加will-change优化渲染性能 */ will-change: transform; transition: transform 1s ease-in-out; } #backTopBtn:hover { transform: rotate(360deg); } \u0026lt;/style\u0026gt; \u0026lt;script\u0026gt; /** * 滚动回顶部初始化 */ function initScrollTop() { let rightSideBar = document.querySelector(\u0026#34;.right-sidebar\u0026#34;); if (!rightSideBar) { return; } // 添加返回顶部按钮到右侧边栏 let btn = document.createElement(\u0026#34;div\u0026#34;); btn.id = \u0026#34;backTopBtn\u0026#34;; btn.onclick = backToTop rightSideBar.appendChild(btn) // 滚动监听 window.onscroll = function () { // 统一获取页面滚动高度 let scrollTop = window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop || 0; // 当网页向下滑动 20px 出现\u0026#34;返回顶部\u0026#34; 按钮 if (scrollTop \u0026gt; 20) { btn.style.display = \u0026#34;block\u0026#34;; } else { btn.style.display = \u0026#34;none\u0026#34;; } }; } /** * 返回顶部 */ function backToTop() { window.scrollTo({ top: 0, behavior: \u0026#34;smooth\u0026#34; }) } initScrollTop(); \u0026lt;/script\u0026gt; 解决 PJAX 刷新问题 编辑.\\layouts\\partials\\footer\\pjax.html文件 。pjax:complete 事件下，添加以下内容： 1 2 3 // 重新初始化返回顶部按钮 topbar.hide(); initScrollTop(); hugo 接入评论 1、GitHub 打开评论 首先进入【 GitHub 】，hugo 博客项目主页\u0026ndash;\u0026raquo;项目设置\u0026ndash;\u0026raquo;找到Discussions Loading 2、giscus 配置 在 github 上安装 【 giscus APP 】 3、GitHub 博客项目接入 giscus 随着官网的说明一步步配置下去。配置完成后便可在 启用 giscus 下找到需要的代码： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 \u0026lt;script src=\u0026#34;https://giscus.app/client.js\u0026#34; data-repo=\u0026#34;meimolihan/meimolihan.github.io\u0026#34; data-repo-id=\u0026#34;R_kgDONpRkKg\u0026#34; data-category=\u0026#34;Announcements\u0026#34; data-category-id=\u0026#34;DIC_kwDONpRkKs4CmwSa\u0026#34; data-mapping=\u0026#34;pathname\u0026#34; data-strict=\u0026#34;0\u0026#34; data-reactions-enabled=\u0026#34;1\u0026#34; data-emit-metadata=\u0026#34;0\u0026#34; data-input-position=\u0026#34;bottom\u0026#34; data-theme=\u0026#34;dark\u0026#34; data-lang=\u0026#34;zh-CN\u0026#34; crossorigin=\u0026#34;anonymous\u0026#34; async\u0026gt; \u0026lt;/script\u0026gt; 4、修改 hugo 主配置文件 我使用的是Hugo的stack主题，需要在 config.yaml 中设置 1 2 3 comments: enabled: true provider: giscus 5、引入 giscus-js文件 将stack主题./themes/hugo-theme-stack/layouts/partials/comments/provider/giscus.html文件拷贝至./layouts/partials/comments/provider/目录下 (需新建) 然后将giscus-js代码放到下面的位置： 6、文章 index.md 打开评论 false 关闭评论，true 显示评论。 1 comments: true 配置完成，hugo server -D启动hugo，在本地就可以看到效果。 Hugo Stack 预加载动画 1、新增组件 小组件放在layouts/partials/widget/preload.html 文件里，注意，这个文件是自己创建的：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 {{ if .Site.Params.enablePreloadingAnim }} \u0026lt;div id=\u0026#34;loading-box\u0026#34;\u0026gt; \u0026lt;!-- 页面加载完成之后帷幕拉开的效果 --\u0026gt; \u0026lt;div class=\u0026#34;loading-left-bg\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;loading-right-bg\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;!-- 旋转盒子动效 --\u0026gt; \u0026lt;div class=\u0026#34;spinner-box\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;configure-border-1\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;configure-core\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;configure-border-2\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;configure-core\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;loading-word\u0026#34;\u0026gt;加载中...\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;!-- 页面加载动画 --\u0026gt; \u0026lt;script\u0026gt; // 确保 jQuery 已加载 if (typeof $ !== \u0026#39;function\u0026#39;) { console.error(\u0026#34;jQuery is not loaded. Please ensure jQuery is included in your project.\u0026#34;); } // 使用 window.onload 确保所有资源加载完成后隐藏动画 window.addEventListener(\u0026#34;load\u0026#34;, function () { const loadingBox = document.getElementById(\u0026#39;loading-box\u0026#39;); if (loadingBox) { // 延时一段时间以确保动画有足够的时间展示 setTimeout(function () { loadingBox.classList.add(\u0026#34;loaded\u0026#34;); console.log(\u0026#34;Preloader hidden after all resources are loaded.\u0026#34;); }, 500); // 延时 0.5 秒（可根据需要调整） } else { console.error(\u0026#34;Preloader element not found!\u0026#34;); } }); // 如果需要显示加载进度，可以添加以下逻辑（可选） let loadedResources = 0; const totalResources = document.images.length + document.styleSheets.length; function checkResourceLoad() { loadedResources++; const progress = Math.round((loadedResources / totalResources) * 100); const loadingWord = document.querySelector(\u0026#39;.loading-word\u0026#39;); if (loadingWord) { loadingWord.textContent = `加载中... ${progress}%`; } if (loadedResources \u0026gt;= totalResources) { window.dispatchEvent(new Event(\u0026#39;load\u0026#39;)); // 手动触发 load 事件 } } // 监听图片加载 document.images.forEach(img =\u0026gt; { img.addEventListener(\u0026#39;load\u0026#39;, checkResourceLoad); img.addEventListener(\u0026#39;error\u0026#39;, checkResourceLoad); }); // 监听样式表加载 document.styleSheets.forEach(sheet =\u0026gt; { checkResourceLoad(); }); \u0026lt;/script\u0026gt; {{ end }} 2、组件样式 找到 ./assets/scss/custom.scss 在文件里面追加 ： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 #loading-box .loading-left-bg, #loading-box .loading-right-bg { position: fixed; z-index: 1000; width: 50%; height: 100%; // 我在这里小改了一下颜色， background-color: #b1c0c7; transition: all 0.5s; } #loading-box .loading-right-bg { right: 0; } #loading-box\u0026gt;.spinner-box { position: fixed; z-index: 1001; display: flex; justify-content: center; align-items: center; width: 100%; height: 100vh; } #loading-box .spinner-box .configure-border-1 { position: absolute; padding: 3px; width: 115px; height: 115px; background: #ffab91; animation: configure-clockwise 3s ease-in-out 0s infinite alternate; } #loading-box .spinner-box .configure-border-2 { left: -115px; padding: 3px; width: 115px; height: 115px; background: rgb(63, 249, 220); transform: rotate(45deg); animation: configure-xclockwise 3s ease-in-out 0s infinite alternate; } #loading-box .spinner-box .loading-word { position: absolute; color: #ffffff; // 我在这里小改了一下文字大小和字体，注意！ font-size: 1.8rem; font-family: \u0026#39;Zhi Mang Xing\u0026#39;, cursive; } #loading-box .spinner-box .configure-core { width: 100%; height: 100%; background-color: #37474f; } div.loaded div.loading-left-bg { transform: translate(-100%, 0); } div.loaded div.loading-right-bg { transform: translate(100%, 0); } div.loaded div.spinner-box { // 你可以把这个注释掉，这样就能一直看那个动画的效果了！ display: none !important; } @keyframes configure-clockwise { 0% { transform: rotate(0); } 25% { transform: rotate(90deg); } 50% { transform: rotate(180deg); } 75% { transform: rotate(270deg); } 100% { transform: rotate(360deg); } } @keyframes configure-xclockwise { 0% { transform: rotate(45deg); } 25% { transform: rotate(-45deg); } 50% { transform: rotate(-135deg); } 75% { transform: rotate(-225deg); } 100% { transform: rotate(-315deg); } } 3、配置文件 hugo配置文件params 栏目底下，加上 enablePreloadingAnim: true 1 2 params: enablePreloadingAnim: true # 开屏动画，false为关闭，true为开启 Hugo 图片灯箱 使用 Fancybox 实现图片灯箱/放大功能 Hugo 自带的图片渲染是没有灯箱效果的，所以我们需要自己添加。灯箱效果就是点击图片后，图片会放大显示。 修改 Hugo 配置文件 修改网站根目录下的 config.toml 或者 config.yaml 文件，我的配置文件为 yaml 格式，toml 需要自行调整格式，在 params参数下添加以下内容：\n1 2 params fancybox: true # 图片灯箱，false为关闭，true为开启 创建 render-image.html 文件 在你的 Hugo 根目录下创建以下路径和文件：./layouts/_default/_markup/render-image.html 编辑 render-image.html 添加以下内容： 1 2 3 4 5 6 7 {{if .Page.Site.Params.fancybox }} \u0026lt;div class=\u0026#34;post-img-view\u0026#34;\u0026gt; \u0026lt;a data-fancybox=\u0026#34;gallery\u0026#34; href=\u0026#34;{{ .Destination | safeURL }}\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;{{ .Destination | safeURL }}\u0026#34; alt=\u0026#34;{{ .Text }}\u0026#34; {{ with .Title}} title=\u0026#34;{{ . }}\u0026#34;{{ end }} /\u0026gt; \u0026lt;/a\u0026gt; \u0026lt;/div\u0026gt; {{ end }} 复制 custom.html 文件 从你主题目录 ./themes/stack/layouts/partials/footer/custom.html复制到 Hugo在你根目录 layouts/partials/footer/custom.html ,添加以下内容： 1 2 3 4 5 {{if .Page.Site.Params.fancybox }} \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/jquery@3.5.1/dist/jquery.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;https://cdn.jsdelivr.net/gh/fancyapps/fancybox@3.5.7/dist/jquery.fancybox.min.css\u0026#34; /\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/gh/fancyapps/fancybox@3.5.7/dist/jquery.fancybox.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; {{ end }} 接下来就可以直接 hugo server -D看看效果了。\n引入动态背景（点线漂浮(particles.js)） 来源： 莱特雷-letere 【 particles.js文档 】 1. 前往【 配置页面 】配置参数，参数按自己喜好即可，唯一注意要修改的参数是 detect_on，要改成 window 2. 下载配置文件，以及 particles.js 所需要的js文件 【 particlesjs-config.json 】(Ctrl + S 保存)，本博客的动态背景json配置，有需求的可直接下载\n3. 把下载好的文件，解压并将以下两个文件放到assets/background文件夹下 particlesjs-config.json particles.min.js 4. 在layouts/partials/footer/custom.html中，引入以下代码 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 \u0026lt;div id=\u0026#34;particles-js\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;script src={{ (resources.Get \u0026#34;background/particles.min.js\u0026#34;).Permalink }}\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; particlesJS.load(\u0026#39;particles-js\u0026#39;, {{ (resources.Get \u0026#34;background/particlesjs-config.json\u0026#34;).Permalink }}, function() { console.log(\u0026#39;particles.js loaded - callback\u0026#39;); }); \u0026lt;/script\u0026gt; \u0026lt;style\u0026gt; #particles-js { position: fixed; top: 0; left: 0; width: 100%; z-index: -1; } \u0026lt;/style\u0026gt; ","date":"2025-02-13T19:42:18+08:00","image":"https://file.meimolihan.eu.org/img/hugo-01.jpg","permalink":"https://meimolihan.eu.org/p/hugo-stack-%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/","title":"Hugo Stack 主题美化"},{"content":"hugo 文章编辑 新建文章命令 1 hugo new \u0026#34;post/hugo 文章编辑/index.md\u0026#34; 新建名为《hugo 文章编辑》的文章\n文章路径：.\\content\\post\\hugo 文章编辑\\index.md\n新建文章.bat 执行此批处理后，终端输入文章标题，自动创建文章并用记事本打开可以编辑文章内容。\n我的项目路径：电脑桌面GitHub\\hugo-main(自行修改)\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 @echo off :: 设置工作目录（确保路径正确） set \u0026#34;hugoDir=%USERPROFILE%\\Desktop\\GitHub\\hugo-main\u0026#34; :: 检查目录是否存在 if not exist \u0026#34;%hugoDir%\u0026#34; ( echo 目标目录 %hugoDir% 不存在，请检查路径是否正确。 pause exit ) :: 提示用户输入文件名 set /p fileName=请输入文章名： :: 检查是否输入了文件名 if \u0026#34;%fileName%\u0026#34;==\u0026#34;\u0026#34; ( echo 文件名不能为空，请重新运行脚本并输入有效的文件名。 pause exit ) :: 切换到 Hugo 项目目录 cd /d \u0026#34;%hugoDir%\u0026#34; :: 使用 hugo new 命令创建新文件 echo 正在创建新文件... hugo new \u0026#34;post/%fileName%/index.md\u0026#34; :: 检查文件是否创建成功 set \u0026#34;contentPath=%hugoDir%\\content\\post\\%fileName%\\index.md\u0026#34; if not exist \u0026#34;%contentPath%\u0026#34; ( echo 文件 %fileName% 的创建失败，请检查 Hugo 是否正确安装并配置。 pause exit ) :: 提示用户文件已创建 echo 文件 %fileName% 已成功创建在 %contentPath%！ :: 打开记事本并加载文件后退出CMD echo 正在打开记事本... start notepad.exe \u0026#34;%contentPath%\u0026#34; exit 文章模板 文章模板路径：\u0026quot;.\\archetypes\\default.md\u0026quot; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 --- title: \u0026#34;{{ replace .Name \u0026#34;-\u0026#34; \u0026#34; \u0026#34; | title }}\u0026#34; slug: \u0026#34;{{ replace .Name \u0026#34;-\u0026#34; \u0026#34; \u0026#34; | title }}\u0026#34; date: {{ .Date }} description: \u0026#34;\u0026#34; # 文章描述，用于搜索优化 summary: \u0026#34;\u0026#34; # 文章简要描述，展示在主页 math: true # 是否渲染数学公式：true 渲染，false 不渲染 hidden: false # 文章可见性：false 可见，true 隐藏 comments: true # 评论系统：false 关闭，true 显示 draft: false # 文章状态：true 草稿，false 发布 showToc: true # 是否显示目录：true 显示，false 不显示 TocOpen: true # 目录默认展开：true 展开，false 折叠 autonumbering: true # 目录自动编号：true 自动，false 不自动 hidemeta: false # 是否隐藏元信息：true 隐藏，false 显示 disableShare: true # 底部分享栏：true 不显示，false 显示 searchHidden: false # 搜索引擎收录：true 不收录，false 可收录 showbreadcrumbs: true # 当前路径显示：true 显示，false 不显示 # 文章顶置，输入1可以顶置文章 weight: # 文章封面，例如：hugo.jpg image: # 文章分类 categories: - 默认分类 # 文章标签 tags: - Blog --- ","date":"2025-02-12T18:55:48+08:00","image":"https://file.meimolihan.eu.org/img/hugo-01.jpg","permalink":"https://meimolihan.eu.org/p/hugo-%E6%96%87%E7%AB%A0%E7%BC%96%E8%BE%91/","title":"Hugo 文章编辑"},{"content":" docker 安装 🐳Debian 安装 docker 1 、安装 docker 命令 命令安装 Docker 1 sudo apt-get update \u0026amp;\u0026amp; sudo apt install docker.io 脚本安装 Docker 1 curl -sS -O https://raw.gitmirror.com/kejilion/sh/main/cn/kejilion.sh \u0026amp;\u0026amp; chmod +x kejilion.sh \u0026amp;\u0026amp; ./kejilion.sh 2 、更换docker国内源 1 2 3 4 5 6 7 8 9 10 cat \u0026gt; /etc/apt/sources.list.d/docker.list \u0026lt;\u0026lt;EOF deb https://mirrors.aliyun.com/debian/ bookworm main non-free non-free-firmware contrib deb-src https://mirrors.aliyun.com/debian/ bookworm main non-free non-free-firmware contrib deb https://mirrors.aliyun.com/debian-security/ bookworm-security main deb-src https://mirrors.aliyun.com/debian-security/ bookworm-security main deb https://mirrors.aliyun.com/debian/ bookworm-updates main non-free non-free-firmware contrib deb-src https://mirrors.aliyun.com/debian/ bookworm-updates main non-free non-free-firmware contrib deb https://mirrors.aliyun.com/debian/ bookworm-backports main non-free non-free-firmware contrib deb-src https://mirrors.aliyun.com/debian/ bookworm-backports main non-free non-free-firmware contrib EOF 3 、设置Docker开机自启动 使用systemd管理Docker服务 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 mkdir -p /etc/systemd/system \u0026amp;\u0026amp; touch /etc/systemd/system/docker.service \u0026amp;\u0026amp; cat \u0026gt; /etc/systemd/system/docker.service \u0026lt;\u0026lt;EOF [Unit] Description=Docker Application Container Engine Documentation= After=network.target docker.socket Requires=docker.socket [Service] Type=notify ExecStart=/usr/bin/dockerd -H fd:// ExecReload=/bin/kill -s HUP $MAINPID LimitNOFILE=infinity LimitNPROC=infinity LimitCORE=infinity TasksMax=infinity TimeoutStartSec=0 Restart=always StartLimitBurst=3 StartLimitInterval=60s RestartSec=5 KillMode=process [Install] WantedBy=multi-user.target EOF ## 启用 Docker 服务+开机自启动 Docker 服务 sudo systemctl enable docker \u0026amp;\u0026amp; sudo systemctl start docker 4、重新加载systemd配置 1 sudo systemctl daemon-reload 5、启用 Docker 服务+开机自启动 Docker 服务 1 sudo systemctl enable docker \u0026amp;\u0026amp; sudo systemctl start docker 6、重启 Docker 服务 1 sudo systemctl restart docker 7、验证 Docker 服务状态 1 bashsudo systemctl status docker 🐳CentOS 安装 Docker Docker是一个开源的容器化平台，可以帮助开发者快速构建、部署和运行应用程序。在CentOS 8上安装Docker后，可以手动启动Docker服务，但是如果希望Docker在开机时自动启动，需要进行一些配置。\n本文将详细介绍在CentOS 8上配置Docker开机自启动的步骤，并提供相应的代码示例。\n1 、安装 Docker 命令安装 Docker 1 sudo dnf install docker ## 安装Docker 脚本安装 Docker 1 curl -sS -O https://raw.gitmirror.com/kejilion/sh/main/cn/kejilion.sh \u0026amp;\u0026amp; chmod +x kejilion.sh \u0026amp;\u0026amp; ./kejilion.sh 2 、启动Docker服务 安装完成后，可以手动启动Docker服务：\n1 sudo systemctl start docker 3 、设置Docker开机自启动 要设置Docker在开机时自动启动，可以使用以下命令：\n1 sudo systemctl enable docker 4 、验证配置 现在，可以重新启动系统并验证Docker是否会自动启动。可以使用以下命令来重新启动系统：\n1 sudo systemctl reboot 5 、系统重新启动后，可以使用以下命令来验证Docker是否已经启动： 1 sudo systemctl status docker 如果输出中显示Active: active (running)则表示Docker已成功启动。\n🐳Ubuntu 安装Docker 卸载旧版本命令\n之前安装过docker需要先卸载旧版本，这条命令会卸载所有名为docker docker-engine docker.io containerd和runc的软件包\n1 sudo apt-get remove docker docker-engine docker.io containerd runc 1 、更新apt索引+安装docker运行的必要软件包 1 sudo apt-get update \u0026amp;\u0026amp; sudo apt-get install apt-transport-https ca-certificates curl software-properties-common -y 2 、使用国内阿里云镜像源来添加GPG密钥，以提高下载速度。 1 curl -fsSL http://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | sudo apt-key add - 3 、配置Docker的软件源，这可以通过添加apt存储库来实现。 用来添加Docker的官方软件源，我这边使用的阿里源，注意$(lsb_release -cs命令会自动替换为你的Ubuntu版本的代号（如focal、bionic等） ） 1 sudo add-apt-repository \u0026#34;deb [arch=amd64] http://mirrors.aliyun.com/docker-ce/linux/ubuntu $(lsb_release -cs) stable\u0026#34; 4 、通过apt命令来安装Docker Engine了 1 sudo systemctl start docker \u0026amp;\u0026amp; sudo apt-get install docker-ce docker-ce-cli containerd.io 5 、安装完成后，你需要启动Docker服务，并确保它在系统启动时自动启动 1 sudo systemctl start docker \u0026amp;\u0026amp; sudo systemctl enable docker 6 、运行一个容器用来测试docker是否安装成功 1 docker run hello-world ","date":"2025-02-10T12:11:30+08:00","image":"https://file.meimolihan.eu.org/img/docker-07.jpg","permalink":"https://meimolihan.eu.org/p/docker-%E5%AE%89%E8%A3%85/","title":"Docker 安装"},{"content":" Linux 部署 chrony 时间同步服务器 ⏰安装 chrony 1 、检查 chrony 安装情况 1 dpkg -l | grep chrony 2 、安装 chrony 1 apt update \u0026amp;\u0026amp; apt install chrony -y ⏰服务端 chrony 配置文件示例 1 、编辑配置文件 1 vim /etc/chrony/chrony.conf 2 、配置文件内容 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 cp /etc/chrony/chrony.conf /etc/chrony/chrony.conf-bak \u0026amp;\u0026amp; cat \u0026gt; /etc/chrony/chrony.conf \u0026lt;\u0026lt;\u0026#39;EOF\u0026#39; # 使用多个时间源进行同步 pool 10.200.0.2 iburst # 记录时钟漂移文件 driftfile /var/lib/chrony/drift # 设置最大偏差为1秒，允许最多三次步进修正 makestep 1.0 3 # 启用系统时钟与硬件实时时钟同步 rtcsync # 启用硬件时间戳功能 hwtimestamp * # 最少需要两个同步源进行时间校正 minsources 2 # 如果没有可用的时间源，使用本地时钟作为备用 local stratum 10 # 允许所有本地网络访问Chrony服务 allow 0.0.0.0/0 # 配置日志存储路径并启用日志记录 logdir /var/log/chrony log measurements statistics tracking EOF # 设置 chrony 立即启动并开机自启 systemctl enable --now chrony \u0026amp;\u0026amp; systemctl daemon-reload \u0026amp;\u0026amp; systemctl restart chronyd 3 、重启 chrony 1 systemctl restart chronyd ⏰Chrony客户端安装与配置 1 、查看当前系统时间 1 date 2 、编辑 chrony 配置文件 1 vim /etc/chrony/chrony.conf 3 、配置文件内容 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 cp /etc/chrony/chrony.conf /etc/chrony/chrony.conf-bak \u0026amp;\u0026amp; cat \u0026gt; /etc/chrony/chrony.conf \u0026lt;\u0026lt;\u0026#39;EOF\u0026#39; # 欢迎使用 chrony 配置文件。有关可用指令的更多信息，请参阅 chrony.conf(5)。 # 包含在 /etc/chrony/conf.d 目录中找到的配置文件。 confdir /etc/chrony/conf.d # 使用的 NTP 服务器 pool 2.pool.ntp.org iburst pool ntp.ntsc.ac.cn iburst pool ntp.sjtu.edu.cn iburst pool s2g.time.edu.cn iburst pool ntp.tencent.com iburst pool ntp.aliyun.com iburst # 使用来自 DHCP 的时间源。 sourcedir /run/chrony-dhcp # 使用在 /etc/chrony/sources.d 中找到的 NTP 源。 sourcedir /etc/chrony/sources.d # 此指令指定包含 NTP 身份验证的 ID/密钥对的文件位置。 # keyfile /etc/chrony/chrony.keys # 此指令指定 chronyd 将存储速率信息的文件。 driftfile /var/lib/chrony/chrony.drift # 保存 NTS 密钥和 cookie。 # ntsdumpdir /var/lib/chrony # 取消注释以下行以打开日志记录。 log tracking measurements statistics # 日志文件位置。 logdir /var/log/chrony # 阻止错误的估计扰乱机器时钟。 maxupdateskew 100.0 # 此指令启用内核同步（每 11 分钟一次）实时时钟。注意，它不能与 \u0026#39;rtcfile\u0026#39; 指令一起使用。 rtcsync # 如果调整超过一秒，则在前三个时钟更新中步进系统时钟，而不是缓慢调整。 makestep 1 3 # 从系统的 tz 数据库中获取 TAI-UTC 偏移量和闰秒。 # 使用提供闰秒平滑时间的时间源时，必须注释掉此指令。 leapsectz right/UTC EOF # 设置 chrony 立即启动并开机自启 systemctl enable --now chrony \u0026amp;\u0026amp; systemctl daemon-reload \u0026amp;\u0026amp; systemctl restart chronyd 4 、重启 chrony 1 systemctl restart chronyd ⏰可用的时间服务器地址 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 # CentOS NTP Servers server 0.centos.pool.ntp.org iburst server 1.centos.pool.ntp.org iburst server 2.centos.pool.ntp.org iburst server 3.centos.pool.ntp.org iburst # Apple NTP Servers server time1.apple.com iburst server time2.apple.com iburst server time3.apple.com iburst server time4.apple.com iburst server time5.apple.com iburst # Google NTP Servers server time1.google.com iburst server time2.google.com iburst server time3.google.com iburst server time4.google.com iburst # Pool.ntp.org NTP Servers (Global) server pool.ntp.org iburst # China NTP Servers (Local) server cn.pool.ntp.org iburst # Aliyun NTP Servers pool ntp1.aliyun.com iburst pool ntp2.aliyun.com iburst pool time1.aliyun.com iburst pool time2.aliyun.com iburst ⏰chrony 常用命令 查看当前系统使用的NTP时间源的状态，包括延迟、同步质量等。 1 chronyc sources -v 指示源的状态，*当前同步的源，+其他可接受的源 启动 chrony 1 systemctl start chronyd 重启 chrony 1 systemctl restart chronyd 重新加载 chrony 配置文件 1 systemctl daemon-reload 查看 chrony 时间同步状态 1 timedatectl status 查看 chrony 服务器状态 1 chronyc tracking System time：表示系统时间与NTP时间的偏差。 RMS offset：表示时间同步的精度。 Update interval：表示时间同步的间隔。\n设置 chrony 立即启动并开机自启 1 systemctl enable --now chrony 查看 chrony 占用端口 1 ss -ulwn 1 lsof -i :323 检查 chrony 服务运行状态 1 systemctl status chronyd 查看NTP源的详细统计信息 1 chronyc sourcestats 查看时间同步源的状态 1 chronyc activity 强制校准时间 1 chronyc -a makestep 开启网络时间同步 1 timedatectl set-ntp true ⏰卸载 chrony 1 、首先，使用以下命令停止chrony服务： 1 sudo systemctl stop chronyd 2 、卸载chrony并删除配置文件 1 sudo apt remove chrony \u0026amp;\u0026amp; sudo apt purge chrony 3 、清理残留文件（可选） 1 sudo rm -rf /etc/chrony \u0026amp;\u0026amp; sudo rm -rf /var/lib/chrony \u0026amp;\u0026amp; sudo rm -rf /var/log/chrony 完成以上步骤后，chrony就从Debian系统中被完全卸载了。\n","date":"2025-02-10T10:47:14+08:00","image":"https://file.meimolihan.eu.org/img/chrony.jpg","permalink":"https://meimolihan.eu.org/p/linux-%E9%83%A8%E7%BD%B2-chrony-%E6%97%B6%E9%97%B4%E5%90%8C%E6%AD%A5%E6%9C%8D%E5%8A%A1%E5%99%A8/","title":"Linux 部署 Chrony 时间同步服务器"},{"content":"Windows 安装 wget 下载wget.exe文件 访问 GNU Wget for Windows 的下载页面： GNU Wget for Windows 。 将 wget.exe 复制到 C:\\Windows\\System32 目录下。 验证安装： 打开命令提示符（cmd），输入以下命令： 1 wget --version 如果安装成功，会显示 wget 的版本信息。 ","date":"2025-02-07T11:12:19+08:00","image":"https://file.meimolihan.eu.org/img/windows-04.jpg","permalink":"https://meimolihan.eu.org/p/windows-%E5%AE%89%E8%A3%85-wget/","title":"Windows 安装 wget"},{"content":" 随机壁纸API链接 一、风景‮机随‬壁纸 1. 随机必应壁纸： https://api.timelessq.com/bing/random 2. 4K 风景壁纸图片： https://acg.suyanw.cn/landscape 3. 风景大片： https://api.zylearning.top/api/wallpaper?lx=fj 4. 随机高清风景壁纸： https://acg.suyanw.cn/gqbz/random.php 5. 随机二次‮风元‬景图： https://acg.suyanw.cn/scenery/random.php 6. 随机二‮元次‬风景图： https://api.asxe.vip/scenery.php 7. 随机二次‮壁元‬纸： https://api.luvying.com/acgimg 8. 随机二次‮壁元‬纸： https://acg.suyanw.cn/Anime 二、美女随机壁纸 1. 美‮模女‬特： https://api.zylearning.top/api/wallpaper?lx=mnmt 2. 4K 美女壁纸图片： https://acg.suyanw.cn/beauty 3. 电脑‮女美‬图片： http://api.btstu.cn/sjbz/?lx=meizi 三、萌宠随机壁纸 1. 4K 萌宠壁纸图片： https://acg.suyanw.cn/cutepet 2. 萌宠动物： https://api.zylearning.top/api/wallpaper?lx=dw 四、游戏随机壁纸 1. 王者荣耀原‮壁画‬纸： https://acg.suyanw.cn/wzry 2. 游戏壁纸： https://api.zylearning.top/api/wallpaper?lx=yx 3. 4K 游戏壁纸图片： https://acg.suyanw.cn/Game 五、动漫随机壁纸 1. 4K 动漫壁‮图纸‬片： https://acg.suyanw.cn/Anime 2. 动漫壁纸： https://api.zylearning.top/api/wallpaper?lx=dm 六、其他随机壁纸 1. 4K 壁纸： https://api.zylearning.top/api/wallpaper?lx=4k 2. 随机‮型类‬壁纸： https://api.zylearning.top/api/wallpaper 3. 爱情美图： https://api.zylearning.top/api/wallpaper?lx=aqmt 4. 明星壁纸： https://api.zylearning.top/api/wallpaper?lx=mx 5. 汽车壁纸： https://api.zylearning.top/api/wallpaper?lx=qc 6. 炫酷时尚： https://api.zylearning.top/api/wallpaper?lx=ss 7. 影视剧照： https://api.zylearning.top/api/wallpaper?lx=ysjz 七、高质量每日壁纸 1. 必‮每应‬日壁纸： https://api.dujin.org/bing/1920.php 2. 必‮每应‬日壁纸： https://bingw.jasonzeng.dev 3. 二次元每日壁纸： https://api.paugram.com/wallpaper/?source=sm 八、动漫随‮壁机‬纸 1. 动漫随机壁纸： https://api.asxe.vip/random.php 2. mc 酱动漫： https://acg.suyanw.cn/mcapi/random.php 3. 随机你的名‮图字‬片： https://acg.suyanw.cn/Yourname/random.php 九、下‮壁载‬纸 1. 随机美女 PC 壁纸： https://acg.suyanw.cn/pcmv 2. 随机二次元地址： https://api.suyanw.cn/api/comic/api.php 3. PC 随机二次元地址： https://acg.suyanw.cn/random.php 4. 二次元随机图地址： https://api.suyanw.cn/api/comic 5. 二次元‮机随‬图地址： https://api.dujin.org/pic/yuanshen 6. 二次元‮机随‬图地址： https://acg.suyanw.cn/api.php 7. 二次‮随元‬机图地址： https://www.dmoe.cc/random.php 8. 二次元‮机随‬图地址： https://acg.suyanw.cn/random.php 9. 二‮元次‬随机图地址： https://www.dmoe.cc/random.php 十、手‮随机‬机壁纸 1. 淘宝‮家买‬秀： https://acg.suyanw.cn/tbmjx/random.php 2. 随‮手机‬机美女： https://acg.suyanw.cn/sjmv/random.php 3. 随机手机动漫： https://acg.suyanw.cn/sjdm/random.php 4. 随机头像： https://acg.suyanw.cn/sjtx/random.php 5. 随机小姐姐美女图片： https://acg.suyanw.cn/ksxjj/random.php 6. 随机 jk 制服图： https://acg.suyanw.cn/jk/random.php 7. 随机‮丝黑‬图片： https://acg.suyanw.cn/hs/random.php 8. 随机三次元白丝 API： https://acg.suyanw.cn/whitesilk/random.php 9. 随机二次元色图： https://acg.suyanw.cn/sex/random.php 10. 随机猫羽雫图片： https://acg.suyanw.cn/mao/random.php 11. 随机 COS 美图： https://acg.suyanw.cn/cos/random.php 12. 原神‮机随‬图： https://api.suyanw.cn/api/ys ","date":"2025-02-06T09:41:46+08:00","image":"https://api.timelessq.com/bing/random","permalink":"https://meimolihan.eu.org/p/%E9%9A%8F%E6%9C%BA%E5%A3%81%E7%BA%B8api%E9%93%BE%E6%8E%A5/","title":"随机壁纸API链接"},{"content":"下载神器 IDM Internet Download Manager(支持Windows) 下载IDM: 【 官网地址 】【 直接下载 】下载完成后，点击exe文件按照指引进行安装就可以了 激活IDM: 【 github地址 】\n右键单击 Windows 开始菜单，然后选择 PowerShell 或终端（不是 CMD）。\n复制并粘贴下面的代码，然后按 Enter： 1 irm https://massgrave.dev/ias | iex 按照屏幕上的说明进行激活。 安装IDM浏览器插件：\n选择 2 \u0026ndash;\u0026gt;选择 9 \u0026ndash;\u0026gt;等待即可 出现黄色的字，即破解成功 如果后期破解失效，重复以上操作即可\n如果你的浏览器是Chrome,安装完IDM后会自动给浏览器安装插件，如果是国内的QQ或者360等浏览器，那就要自己添加。\n","date":"2025-02-05T21:04:13+08:00","image":"https://file.meimolihan.eu.org/img/idm-01.jpg","permalink":"https://meimolihan.eu.org/p/%E4%B8%8B%E8%BD%BD%E7%A5%9E%E5%99%A8idm/","title":"下载神器IDM"},{"content":"chrome浏览器插件 GitHub 中文-油猴插件 GitHub 中文-油猴插件地址： https://github.com/maboloshi/github-chinese BewlyBewly 优化 bilibili 网站界面的浏览器插件\nBewlyBewly 网站地址： https://hellogithub.com/repository/159b22e717b842b6a64161a6985b7dd6 ","date":"2025-02-05T18:56:54+08:00","image":"https://file.meimolihan.eu.org/img/chrome.jpg","permalink":"https://meimolihan.eu.org/p/chrome-%E6%B5%8F%E8%A7%88%E5%99%A8%E6%8F%92%E4%BB%B6/","title":"chrome 浏览器插件"},{"content":"Git 安装和用法 一 、Windows 安装 Git 1、下载软件包安装 Git Git下载地址： https://git-scm.com/download/win Windows 安装 Git 一直下一步就好\n2、命令行安装 Git 在命令提示符或 Powershell 中键入此命令。 1 winget install --id Git.Git -e --source winget 功能：安装 Git 的最新版本。\n来源：从 winget（Windows 包管理器）的官方源获取 Git 包。\n3、查看 Git 版本 1 git --version 二 、Git 的全局配置 第一件事是设置您的用户名和电子邮件地址。这很重要，因为每个 Git 提交都会使用此信息，并且它会不可改变地嵌入到您开始创建的提交中： 1、设置用户信息 1 2 3 4 5 # 设置用户名 git config --global user.name \u0026#34;John Doe\u0026#34; # 设置用户邮箱 git config --global user.email johndoe@example.com 2、Git 添加代理 1 2 git config --global http.proxy 127.0.0.1:7890 git config --global https.proxy 127.0.0.1:7890 如果你之前git中已经设置过上述配置，则使用如下命令取消再进行配置即可： 1 2 git config --global --unset http.proxy git config --global --unset https.proxy 3、增加 Git 的超时时间 1 2 git config --global http.lowSpeedLimit 0 git config --global http.lowSpeedTime 999999 4、查看当前配置 1 git config --list --show-origin 三 、切换到SSH密钥（推荐） 1、检‮是查‬否已经有SSH密钥 输入以下‮令命‬来检查.ssh‮录目‬下的文件：\n1 dir %USERPROFILE%\\.ssh 2、 如果没有SSH密钥，创建新的SSH密钥 输‮以入‬下命令生成SSH‮钥密‬对：\n1 ssh-keygen -t rsa -b 4096 -C \u0026#34;your_email@example.com\u0026#34; 3、一键复制公钥文件到剪切板 1 type %USERPROFILE%\\.ssh\\id_rsa.pub | clip 4、 将‮钥公‬添加到GitHub账户 登录‮你到‬的GitHub账户。 点击右上角的头像，选择 Settings。 在‮侧左‬菜单中选择 SSH and GPG keys。 点击 New SSH key 按钮。 在 Title 字段中输‮一入‬个名称（例如，你的电脑名称）， 在 “Key” 字段中粘贴刚才‮制复‬的公钥内容， 然后点击 “Add SSH key” 按钮。 5、修改远程仓库URL为SSH格式 1 git remote set-url origin git@github.com:meimolihan/sh.git 四 、GitHub新建项目并发布 1、进入【 GitHub官网 】\u0026ndash;\u0026gt;点击个人头像\u0026ndash;\u0026gt;点击Your repositories \u0026ndash;\u0026gt;点击New 2、输入项目名称music-lrc\u0026ndash;\u0026gt;Public【公开】\u0026ndash;\u0026gt;Create repository【创建存储库】 3、将本地仓库与 GitHub 上的远程仓库关联并推送代码 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 # 在README.md文件中追加一行\u0026#34;# music-lrc\u0026#34; echo \u0026#34;# music-lrc\u0026#34; \u0026gt;\u0026gt; README.md # 初始化一个新的Git仓库 git init # 将README.md文件添加到暂存区 git add README.md # 提交暂存区的所有更改，并附上提交信息\u0026#34;first commit\u0026#34; git commit -m \u0026#34;first commit\u0026#34; # 将当前分支名更改为\u0026#39;main\u0026#39; git branch -M main # 添加远程仓库地址，这里的远程仓库名为\u0026#39;origin\u0026#39;，地址为\u0026#39;https://github.com/meimolihan/music-lrc.git\u0026#39; git remote add origin https://github.com/meimolihan/music-lrc.git # 推送本地的\u0026#39;main\u0026#39;分支到远程仓库\u0026#39;origin\u0026#39;，并且设置上游分支（-u参数的作用），这样以后可以直接使用\u0026#39;git push\u0026#39;或\u0026#39;git pull\u0026#39;而无需指定远程仓库和分支名 git push -u origin main 4、将本地仓库推送到 GitHub (更新仓库) branch 'main' set up to track 'origin/main'.\n说明本地的 main 分支已经设置为跟踪远程仓库 origin 的 main 分支。后续再使用 git push 或 git pull 时，如果不指定分支，Git 就会默认操作这个跟踪关系对应的分支。\n1 2 3 4 5 6 7 8 # 将所有修改、新增或删除的文件添加到暂存区 git add . # 提交暂存区的更改，并附上提交信息\u0026#34;update\u0026#34; git commit -m \u0026#34;update\u0026#34; # 将本地分支的更新推送到远程仓库对应的分支。假设已经设置过上游分支（例如之前使用过`git push -u origin main`），可以直接使用`git push` git push 5、查看状态 1 git status 查看当前工作区和暂存区的状态，了解哪些文件已修改、新增或删除。\n6、Git 克隆项目 1 git clone https://github.com/meimolihan/music.git 五 、忽略文件 1、创建 .gitignore 文件 1 echo \u0026#34;\u0026#34; \u0026gt; .gitignore 2、指定不需要被 Git 跟踪的文件或目录。例如： 1 2 3 4 5 # 忽略所有 .log 文件 *.log # 忽略 node_modules 文件夹 /node_modules 六 、Git 仓库合并 1 、将‮‬【本地仓库】的更改合‮到并‬【程远仓库】 查看是否有未提交的修改 1 git status 更新本地分支到最新状态 1 git pull origin main 提交本地更改 1 2 git add . git commit -m \u0026#34;描述你的更改\u0026#34; 推送更改到远程仓库 1 git push origin main 2 、将【‮程远‬仓库】的更改合‮到并‬【本地仓库】 查看当前分支 首先，确认你当‮所前‬在的分支。如果你打‮将算‬远程‮改更‬合并到 main 分支，确保你在该分支上。 1 git branch -a 切换到目标分支 1 git checkout main 直接获‮并取‬合并远‮更程‬改 1 git pull origin main 查‮最看‬新提交记录 查看‮新最‬的提交记录，确‮远认‬程仓库的更‮是改‬否已经正确合‮到并‬本地。 1 git log --oneline 七 、清理仓库并优化存储 1、检查仓库大小 你可以使用以下命令检查仓库的大小变化：\n1 git count-objects -v 2、清理仓库并优化存储 1 git gc git gc 的主要功能是清理本地仓库中的无用对象（如未引用的提交、树对象、blob 对象等），并优化存储结构（如压缩对象、优化 packfile 等）。\n这些操作不会改变你的代码内容、分支结构或提交历史。因此，远程仓库的内容不会因为本地执行 git gc 而发生变化。\n3、自动维护 1 git config --global gc.auto 250 4、检查 Git 仓库的完整性 1 git fsck 建议定期运行 git gc 和 git fsck，以保持仓库的整洁和健康。可以设置 gc.auto 参数来自动触发垃圾回收：\n这表示当仓库中的松散对象数量达到 250 时，Git 会自动运行 git gc。\n八 、git 分支操作 1、 查看分支 查看所有分支（包括本地和远程分支）： 1 git branch -a 查看本地分支git branch ，查看远程分支git branch -r 2、 创建分支 创建一个新的分支（但不切换到该分支）： 1 git branch \u0026lt;branch-name\u0026gt; 切换分支 1 git switch \u0026lt;branch-name\u0026gt; 创建并切换到新分支： 1 git switch -c \u0026lt;branch-name\u0026gt; 3、 删除分支 删除本地分支： 1 git branch -d \u0026lt;branch-name\u0026gt; （如果分支未合并，会提示错误；强制删除用 -D） 1 git branch -D \u0026lt;branch-name\u0026gt; 删除远程分支： 1 git push origin --delete \u0026lt;branch-name\u0026gt; 4、 重命名分支 重命名当前分支： 1 git branch -m \u0026lt;new-branch-name\u0026gt; 重命名其他分支： 1 git branch -m \u0026lt;old-branch-name\u0026gt; \u0026lt;new-branch-name\u0026gt; 5、 推送分支 推送本地分支到远程仓库： 1 git push origin \u0026lt;branch-name\u0026gt; 设置上游分支（关联本地分支与远程分支）： 1 git push -u origin \u0026lt;branch-name\u0026gt; 6、 拉取分支 1 git pull origin \u0026lt;branch-name\u0026gt; 7、 跟踪远程分支 查看本地分支是否跟踪远程分支： 1 git branch -vv 设置本地分支跟踪远程分支： 1 git branch --set-upstream-to=origin/\u0026lt;branch-name\u0026gt; 8、 解决冲突 在合并或 rebase 时可能会出现冲突，解决冲突后需要手动标记文件为已解决： 1 git add \u0026lt;file-with-conflict\u0026gt; 九 、Git 使用 ssh 密钥连接 GitHub 1、 生成个人访问令牌 登录到你的GitHub账户。 点击‮上右‬角的头像，选择 Settings。 在左侧菜‮中单‬选择 Developer settings。 在左‮菜侧‬单中选择 Personal access tokens。 点击 Generate new token 按钮。 给令牌命名（例如 Git-Push-Token），然后根据你‮需的‬求选择权限范围。对于简单‮推的‬送操作，通常只需要 repo 权限即可。 点击 Generate token 按钮，然后‮制复‬生成的令牌。 2、 使用个人访问‮牌令‬进行推送 当执行 git push 命令时，在提示输‮密入‬码的地方，输‮刚入‬刚生成的‮人个‬访问令牌。 3、检‮是查‬否已经有SSH密钥 输入以下‮令命‬来检查.ssh‮录目‬下的文件：\n1 2 3 4 dir %USERPROFILE%\\.ssh ## 或者 dir $env:USERPROFILE\\.ssh 4、 如果没有SSH密钥，创建新的SSH密钥 输‮以入‬下命令生成SSH‮钥密‬对：\n1 ssh-keygen -t rsa -b 4096 -C \u0026#34;your_email@example.com\u0026#34; 5、一键复制公钥文件到剪切板 1 type %USERPROFILE%\\.ssh\\id_rsa.pub | clip 6、 将‮钥公‬添加到GitHub账户 登录‮你到‬的GitHub账户。 点击右上角的头像，选择 Settings。 在‮侧左‬菜单中选择 SSH and GPG keys。 点击 New SSH key 按钮。 在 Title 字段中输‮一入‬个名称（例如，你的电脑名称）， 在 “Key” 字段中粘贴刚才‮制复‬的公钥内容， 然后点击 “Add SSH key” 按钮。 7、修改远程仓库URL为SSH格式 1 git remote set-url origin git@github.com:meimolihan/sh.git 在项目‮录目‬下执行以下命令，查看‮程远‬仓库URL： 1 git remote -v 返回结果如下，说明修改成功 1 2 3 C:\\Users\\Administrator\\Desktop\\Git\\sh\u0026gt;git remote -v origin git@github.com:meimolihan/sh.git (fetch) origin git@github.com:meimolihan/sh.git (push) 8、使用SSH进‮推行‬送 1 git push -u origin main 再次执行 git push -u origin main 命令，此时应该‮以可‬成功推送。 十 、Git Tags 常用命令指南 git tag 用于标记特定的提交，通常用于版本发布。以下是常用的 git tag 相关命令：\n1、 查看所有标签 1 git tag 列出所有已创建的标签。\n2、 创建标签 轻量标签（Lightweight Tag） 1 git tag \u0026lt;tagname\u0026gt; 示例：git tag v1.0\n带注释的标签（Annotated Tag） 1 git tag -a \u0026lt;tagname\u0026gt; -m \u0026#34;Tag message\u0026#34; 示例：git tag -a v1.0 -m \u0026ldquo;Release version 1.0\u0026rdquo;\n带注释的标签会存储更多信息，如标签创建者、创建日期和注释消息。\n创建标签并指定提交 1 git tag -a \u0026lt;tagname\u0026gt; \u0026lt;commit-hash\u0026gt; -m \u0026#34;Tag message\u0026#34; 示例：git tag -a v1.0 abc1234 -m \u0026ldquo;Release version 1.0\u0026rdquo; 指定某个历史提交作为标签。\n3、 查看标签详情 1 git show \u0026lt;tagname\u0026gt; 示例：git show v1.0 查看标签的详细信息，包括注释。\n4、 删除本地标签 1 git tag -d \u0026lt;tagname\u0026gt; 示例：git tag -d v1.0\n5、 删除远程标签 1 git push origin --delete \u0026lt;tagname\u0026gt; 示例：git push origin \u0026ndash;delete v1.0\n6、 推送标签到远程仓库 推送单个标签 1 git push origin \u0026lt;tagname\u0026gt; 示例：git push origin v1.0\n推送所有标签 1 git push origin --tags 7、 检出标签 1 git checkout \u0026lt;tagname\u0026gt; 示例：git checkout v1.0\n检出标签对应的代码（进入“分离 HEAD”状态）。\n创建分支检出标签 1 git checkout -b \u0026lt;branch-name\u0026gt; \u0026lt;tagname\u0026gt; 示例：git checkout -b release-v1 v1.0\n从标签创建一个新分支。\n8、 标签排序 按创建时间排序（倒序）：\n1 git tag --sort=-creatordate 9、 查找特定标签 1 git tag -l \u0026#34;v1.*\u0026#34; 列出符合模式的标签（如 v1.0, v1.1 等）。\n10、 将更新推送到历史标签的windows批处理文件 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 @echo off REM Windows 批处理脚本：更新 Git 标签 REM 设置 Git 仓库路径 SET REPO_PATH=C:\\Users\\Administrator\\Desktop\\Git\\music REM 切换到指定的 Git 仓库目录 CD /D %REPO_PATH% REM 检查是否成功切换到仓库目录 IF NOT EXIST .git ( echo =========================================== echo 错误：目录 %REPO_PATH% 不是一个有效的 Git 仓库。 echo =========================================== pause EXIT /B 1 ) REM 添加所有更改并提交 echo =========================================== echo 正在添加所有更改... git add . echo =========================================== echo 正在提交更改，提交信息为 \u0026#34;update\u0026#34;... git commit -m \u0026#34;update\u0026#34; echo =========================================== REM 推送提交到远程仓库 echo 正在将提交推送到远程仓库... git push echo =========================================== REM 删除本地标签 v1.0.0 echo 正在删除本地标签 v1.0.0... git tag -d v1.0.0 echo =========================================== REM 删除远程标签 v1.0.0 echo 正在删除远程标签 v1.0.0... git push origin :refs/tags/v1.0.0 echo =========================================== REM 检查标签是否删除成功 echo 检查标签 v1.0.0 是否删除成功... git tag -l | findstr /I \u0026#34;v1.0.0\u0026#34; \u0026gt;nul IF %ERRORLEVEL% EQU 0 ( echo 远程标签 v1.0.0 删除失败，请手动检查。 ) ELSE ( echo 远程标签 v1.0.0 删除成功。 ) echo =========================================== REM 创建新标签 v1.0.0 echo 正在创建新标签 v1.0.0，标签信息为 \u0026#34;为最新提交的重新创建标签\u0026#34;... git tag -a v1.0.0 -m \u0026#34;Recreate tags for the latest submission\u0026#34; echo =========================================== REM 推送新标签到远程仓库 echo 正在将新的标签 v1.0.0 推送到远程仓库... git push origin v1.0.0 echo =========================================== REM 检查标签是否推送成功 echo 检查标签 v1.0.0 是否推送成功... git tag -l | findstr /I \u0026#34;v1.0.0\u0026#34; \u0026gt;nul IF %ERRORLEVEL% EQU 0 ( echo 标签 v1.0.0 推送成功。 ) ELSE ( echo 标签 v1.0.0 推送失败，请手动检查。 ) echo =========================================== echo 所有操作已完成。 pause 十一 、Git下载GitHub文件 1、 获取下载链接 我的项目地址： https://github.com/meimolihan/sh 点击要下载的文件linux-check.sh 点击Raw按钮 复制下载链接https://raw.githubusercontent.com/meimolihan/sh/refs/heads/main/linux-check.sh 2、 linux 下载命令 1 wget -c -O /etc/profile.d/linux-check.sh https://raw.githubusercontent.com/meimolihan/sh/refs/heads/main/linux-check.sh \u0026amp;\u0026amp; chmod +x /etc/profile.d/linux-check.sh \u0026amp;\u0026amp; ln -sf /etc/profile.d/linux-check.sh /usr/local/bin/m \u0026amp;\u0026amp; /etc/profile.d/linux-check.sh /etc/profile.d 目录是一个用于存放 shell 脚本的目录，这些脚本会在用户登录系统并启动一个交互式登录 shell 时被自动执行。 ln -sf /etc/profile.d/linux-check.sh /usr/local/bin/m执行这条命令后，会在 /usr/local/bin 目录下创建一个名为 m 的符号链接， 该符号链接指向 /etc/profile.d/linux-check.sh 文件。这样，当你在终端中输入 m 并按下回车键时，实际上就相当于执行了 /etc/profile.d/linux-check.sh 脚本。 十二 、Git 解决 .gitignore 文件不起作用 注意:以下命令需‮在要‬你项目中右键点击 Git Bash Here 进行命令‮口窗‬输入:\n移除 public 目录的跟踪 1 2 3 4 5 6 7 8 9 10 11 # 移除 public 目录的跟踪 git rm --cached -r public # 将更改添加到暂存区 git add . # 提交更改 git commit -m \u0026#34;Remove tracked files to respect .gitignore\u0026#34; # 将本地分支的更新推送到远程仓库对应的分支。假设已经设置过上游分支（例如之前使用过`git push -u origin main`），可以直接使用`git push` git push 将Git缓存的所‮文有‬件都‮除清‬掉，再重新添‮并加‬提交.gitignore文件。 1 2 3 4 5 6 7 8 9 10 11 # 将Git缓存的所‮文有‬件都‮除清‬掉，再重新添‮并加‬提交.gitignore文件。 git rm -r --cached . # 将更改添加到暂存区 git add . # 提交更改 git commit -m \u0026#39;update .gitignore\u0026#39; # 将本地分支的更新推送到远程仓库对应的分支。假设已经设置过上游分支（例如之前使用过`git push -u origin main`），可以直接使用`git push` git push ","date":"2025-02-05T18:22:27+08:00","image":"https://file.meimolihan.eu.org/img/git-01.jpg","permalink":"https://meimolihan.eu.org/p/git-%E5%AE%89%E8%A3%85%E5%92%8C%E7%94%A8%E6%B3%95/","title":"Git 安装和用法"},{"content":"Github Release 加速站点汇总 1、 https://slink.ltd/ 2、 https://ghp.ml1.one/ 3、 https://doget.nocsdn.com/ 4、 https://ghgo.xyz 5、 https://gh.api.99988866.xyz/ 6、 https://ghps.cc/ 7、 https://gh-proxy.com/ 8、 https://ghproxy.cc/ 9、 https://cf.ghproxy.cc/ 10、 https://github.tmby.shop/ 11、 https://gh-proxy.ygxz.in/ 12、 https://ghproxy.net/ ","date":"2025-02-05T14:40:24+08:00","image":"https://file.meimolihan.eu.org/img/github-01.jpg","permalink":"https://meimolihan.eu.org/p/github-release-%E5%8A%A0%E9%80%9F%E7%AB%99%E7%82%B9%E6%B1%87%E6%80%BB/","title":"Github Release 加速站点汇总"},{"content":"GitHub新建项目并发布 一 、新建项目 GitHub官网： https://github.com 1、点击个人头像\u0026ndash;\u0026gt;点击Your repositories \u0026ndash;\u0026gt;点击New 2、输入项目名称music-lrc\u0026ndash;\u0026gt;Public【公开】\u0026ndash;\u0026gt;Create repository【创建存储库】 3、将本地仓库与 GitHub 上的远程仓库关联并推送代码 1 2 3 4 5 6 7 echo \u0026#34;# music-lrc\u0026#34; \u0026gt;\u0026gt; README.md git init git add README.md git commit -m \u0026#34;first commit\u0026#34; git branch -M main git remote add origin https://github.com/meimolihan/music-lrc.git git push -u origin main 4、将本地仓库推送到GitHub branch 'main' set up to track 'origin/main'.\n说明本地的 main 分支已经设置为跟踪远程仓库 origin 的 main 分支。后续再使用 git push 或 git pull 时，如果不指定分支，Git 就会默认操作这个跟踪关系对应的分支。\n5、切换为SSH连接GitHub 1 git remote set-url origin git@github.com:meimolihan/music-lrc.git 6、Linux 查看 GitHub 仓库容量 1 curl -s https://api.github.com/repos/meimolihan/meimolihan.github.io | jq \u0026#39;.size\u0026#39; 1 2 3 4 root@Debian-LXC ~ # curl -s https://api.github.com/repos/meimolihan/meimolihan.github.io | jq \u0026#39;.size\u0026#39; 844163 ## 已经成功使用 GitHub API 获取到了仓库 meimolihan/meimolihan.github.io 的大小信息。API 返回的这个数值 844163 单位是 KB。 ## 换算成 MB：因为 1 MB = 1024 KB，所以该仓库大小换算成 MB 约为 844163 ÷ 1024 ≈ 824.38 MB。 二 、发布 Release 版本 三 、CDN 加速 github 1 、复制文件地址 我的github文件地址： https://github.com/meimolihan/music-lrc/blob/main/一万个理由-郑源.lrc 2 、CDN 免费加速网址 CDN 免费加速网址： https://www.jsdelivr.com/documentation#id-github 使用说明：\n根端点始终是https://cdn.jsdelivr.net\n加载任何 GitHub 版本、提交或分支：/gh/user/repo@version/file https://cdn.jsdelivr.net/gh/user/repo@version/file user为你的github用户名 repo为你的github项目名称 version为你的github项目Tags版本 file为你的github发布的文件名称\n3 、我的CDN 加速地址： https://cdn.jsdelivr.net/gh/meimolihan/music-lrc@1.0.0/一万个理由-郑源.lrc 四 、更新 Tags 1.0.0 内容 删除本地标签 1 git tag -d 1.0.0 删除远程标签 1 git push origin :refs/tags/1.0.0 为新提交打标签 1 git tag 1.0.0 将新标签推送到远程仓库 1 git push origin 1.0.0 ","date":"2025-02-05T12:15:25+08:00","image":"https://file.meimolihan.eu.org/img/github-01.jpg","permalink":"https://meimolihan.eu.org/p/github%E6%96%B0%E5%BB%BA%E9%A1%B9%E7%9B%AE%E5%B9%B6%E5%8F%91%E5%B8%83/","title":"GitHub新建项目并发布"},{"content":"一 、Linux 计划任务（覆盖命令） 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 cat \u0026gt; /var/spool/cron/crontabs/$USER \u0026lt;\u0026lt;\u0026#39;EOF\u0026#39; ################### 我的定时任务 ################### ## 每日20:10，acme.sh 更新证书 # 10 20 * * * \u0026#34;/root/.acme.sh\u0026#34;/acme.sh --cron --home \u0026#34;/root/.acme.sh\u0026#34; \u0026gt; /dev/null ## 每日00:00，nginx 更新证书 # 0 0 * * * ~/auto_cert_renewal.sh ## 每日01:00，更新 hosts 文件定时任务 0 1 * * * /usr/bin/python3 /mnt/mydisk/my-sh/hosts/DnsParse.py 0 13 * * * /usr/bin/python3 /mnt/mydisk/my-sh/hosts/DnsParse.py ## 每日01:25，certbot 自动续签 mobufan.eu.org 证书（脚本方式） 25 1 * * * /mnt/my-sh/ssl/certbot-mobufan.eu.org.sh ## 每日01:35，certbot 续签的 mobufan.eu.org 证书同步到 nginx证书目录 35 1 * * * cp /etc/letsencrypt/live/mobufan.eu.org/fullchain.pem /etc/nginx/keyfile/cert.pem \u0026amp;\u0026amp; cp /etc/letsencrypt/live/mobufan.eu.org/privkey.pem /etc/nginx/keyfile/key.pem ## 临时挂载10.10.10.254:/mnt/mydisk目录，挂载到/mnt/ARS2-NFS目录 10 1 * * * mount -t nfs -o rw 10.10.10.254:/mnt/mydisk /mnt/ARS2-NFS ## 每日01:10，同步到 hosts 到 emby 15 0 * * * rsync -avhzp --progress --delete /etc/hosts /mnt/mydisk/home/emby-amilys/config/hosts ## 每日02:10，同步到 hosts 到 nastools 20 1 * * * rsync -avhzp --progress --delete /etc/hosts /mnt/mydisk/home/nastools/config/hosts ## 每日02:10，同步 nginx 静态目录 10 2 * * * mkdir -p /mnt/ARS2-NFS/反向代理/nginx-666-bak/html \u0026amp;\u0026amp; rsync -avhzp --progress --delete /var/www/html/* /mnt/ARS2-NFS/反向代理/nginx-666-bak/html/ ## 每日02:15，同步 nginx 配置文件目录 15 2 * * * mkdir -p /mnt/ARS2-NFS/反向代理/nginx-666-bak/nginx \u0026amp;\u0026amp; rsync -avhzp --progress --delete /etc/nginx/* /mnt/ARS2-NFS/反向代理/nginx-666-bak/nginx/ ################### 我的定时任务 ################### EOF crontab -l ## 查看是否成功 二 、Cron任务查看与编辑 1 、列出当前用户的Cron任务 1 crontab -l 2 、编辑Cron任务 1 crontab -e 3 、删除当前用户的所有Cron任务 1 crontab -r ","date":"2025-02-04T17:37:50+08:00","image":"https://file.meimolihan.eu.org/img/crontab-01.jpg","permalink":"https://meimolihan.eu.org/p/linux%E8%AE%A1%E5%88%92%E4%BB%BB%E5%8A%A1/","title":"Linux计划任务"},{"content":" Linux 开机脚本 手动创建Linux通用显示脚本 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 # Linux通用 开机显示‮脚本 sudo touch /etc/profile.d/linux-check.sh \u0026amp;\u0026amp; sudo chmod +x /etc/profile.d/linux-check.sh \u0026amp;\u0026amp; sudo ln -sf /etc/profile.d/linux-check.sh /usr/local/bin/m \u0026amp;\u0026amp; sudo cat \u0026gt; /etc/profile.d/linux-check.sh \u0026lt;\u0026lt;\u0026#39;EOF\u0026#39; #!/bin/bash # #************************************************** #FileName： check.sh ## -------------------粗体----------------------- ## \\E[0m 重置颜色 ## \\E[1;31m 红色 ## \\E[1;32m 绿色 ## \\E[1;33m 黄色 ## \\E[1;34m 蓝色 ## \\E[1;35m 紫色 ## \\E[1;36m 青色 ## \\E[1;37m 白色 #************************************************** echo -e \u0026#34;\\e[1;32m-----------系统信息----------\\e[0m\u0026#34; echo -e \u0026#34;\\e[1;34m主机名称 : \\e[1;31m`hostname`\\e[0m\u0026#34; echo -e \u0026#34;\\e[1;34m系统版本 : \\e[1;31m`cat /etc/os-release | grep -w \u0026#34;PRETTY_NAME\u0026#34; | cut -d= -f2 | tr -d \u0026#39;\u0026#34;\u0026#39; | sed \u0026#39;s/\\s*(\\([^)]*\\))//g\u0026#39;| sed \u0026#39;s/Stream //g\u0026#39;| sed \u0026#39;s/Linux //g\u0026#39;`\\e[0m\u0026#34; echo -e \u0026#34;\\e[1;34m内核版本 : \\e[1;31m`uname -r`\\e[0m\u0026#34; echo -e \u0026#34;\\e[1;34m编码格式 : \\e[1;31m${LANG}\\e[0m\u0026#34; echo -e \u0026#34;\\e[1;32m-----------CPU 信息----------\\e[0m\u0026#34; echo -e \u0026#34;\\e[1;34mCPU 架构 : \\e[1;31m`uname -m`\\e[0m\u0026#34; echo -e \u0026#34;\\e[1;34mCPU 型号 :\\e[1;31m`cat /proc/cpuinfo | grep \u0026#34;model name\u0026#34; | head -1 | awk -F: \u0026#39;{print $2}\u0026#39;`\\e[0m\u0026#34; echo -e \u0026#34;\\e[1;34mCPU 核心 : \\e[1;31m`cat /proc/cpuinfo | grep processor | wc -l | awk \u0026#39;{print $1\u0026#34; 核\u0026#34;}\u0026#39;`\\e[0m\u0026#34; echo -e \u0026#34;\\e[1;34mCPU 负载 :\\e[1;31m $(awk \u0026#39;{printf \u0026#34;%.2f\u0026#34;, $3}\u0026#39; /proc/loadavg)\\e[0m\u0026#34; echo -e \u0026#34;\\e[1;34mCPU 占用 : \\e[1;31m`top -bn1 | grep \u0026#34;Cpu(s)\u0026#34; | awk \u0026#39;{print 100 - $8}\u0026#39; | cut -c 1-2 | awk \u0026#39;{printf(\u0026#34;%.2f%%\\n\u0026#34;, $1/100*100)}\u0026#39;`\\e[0m\u0026#34; echo -e \u0026#34;\\e[1;32m-----------网络信息----------\\e[0m\u0026#34; echo -e \u0026#34;\\e[1;34mIPV4内网 : \\e[1;31m`hostname -i`\\e[0m\u0026#34; echo -e \u0026#34;\\e[1;34mIPV4公网 : \\e[1;31m$(curl -4 -s ifconfig.co)\\e[0m\u0026#34; echo -e \u0026#34;\\e[1;34m默认网关 : \\e[1;31m$(ip route show default | awk \u0026#39;/default/ {print $3}\u0026#39;)\\e[0m\u0026#34; if (ping -c2 -w2 www.baidu.com \u0026amp;\u0026gt;/dev/null);then echo -e \u0026#34;\\e[1;34m网络连通 : \\e[1;31m是\\e[0m\u0026#34; else echo -e \u0026#34;\\e[1;34m网络连通 : \\e[1;31m否\\e[0m\u0026#34; fi echo -e \u0026#34;\\e[1;32m-----------磁盘信息----------\\e[0m\u0026#34; echo -e \u0026#34;\\e[1;34m磁盘占用 : \\e[1;31m`df -h | awk \u0026#39;$NF==\u0026#34;/\u0026#34;{printf \u0026#34;%s/%s (%s)\u0026#34;, $3, $2, $5}\u0026#39;`\\e[0m\u0026#34; echo -e \u0026#34;\\E[1;34mNFS 挂载 : \\E[1;31m`echo \u0026#34;\u0026#34; \u0026amp;\u0026amp; df -hT /mnt/* | grep \u0026#34;10.10.10.*:/mnt/*\u0026#34;`\\E[0m\u0026#34; # 获取当前时间 start_time=$(date \u0026#39;+%Y-%m-%d %H:%M:%S\u0026#39;) echo -e \u0026#34;\\e[1;34m当前时间 ：\\e[1;31m$start_time\\e[0m\u0026#34; echo -e \u0026#34;\\e[1;34m运行时间 : \\e[1;31m$(cat /proc/uptime | awk -F. \u0026#39;{run_days=int($1 / 86400);run_hours=int(($1 % 86400) / 3600);run_minutes=int(($1 % 3600) / 60); if (run_days \u0026gt; 0) printf(\u0026#34;%d天 \u0026#34;, run_days); if (run_hours \u0026gt; 0) printf(\u0026#34;%d时 \u0026#34;, run_hours); printf(\u0026#34;%d分\\n\u0026#34;, run_minutes)}\u0026#39;)\\e[0m\u0026#34; echo -e \u0026#34;\\e[1;32m-----------------------------\\e[0m\u0026#34; EOF sudo /etc/profile.d/linux-check.sh ","date":"2025-02-04T17:31:41+08:00","image":"https://file.meimolihan.eu.org/img/shell-02.jpg","permalink":"https://meimolihan.eu.org/p/linux-%E5%BC%80%E6%9C%BA%E8%84%9A%E6%9C%AC/","title":"Linux 开机脚本"},{"content":" Sun-Panel-css源码 与末大佬博客： https://blog.ymz.icu/archives/sun-panelym-nav-zi-ding-yi-cssjs-yuan-ma-si-lu Sun-Panel_鼠标悬停动画+鼠标新光标样式+卡片背景线条样式+网页计时器 服务器主机shell输入以下命令 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 touch /mnt/mydisk/home/sun-panel/config/custom/index.css \u0026amp;\u0026amp; cat \u0026gt; /mnt/mydisk/home/sun-panel/config/custom/index.css \u0026lt;\u0026lt;\u0026#39;EOF\u0026#39; /*鼠标悬停动画 */ /* 当鼠标悬停在图标信息框上时触发动画 */ /* 详细图标摇晃动画 */ .icon-info-box .rounded-2xl:hover { background: rgba(42, 42, 42, 0.7) !important;/* 背景颜色变成深灰色 */ -webkit-animation: info-shake-bounce .5s alternate !important; -moz-animation: info-shake-bounce .5s alternate !important; -o-animation: info-shake-bounce .5s alternate !important; animation: info-shake-bounce .5s alternate !important; } /* 小图标摇晃动画 */ .icon-small-box .rounded-2xl:hover { background: rgba(42, 42, 42, 0.7) !important;/* 背景颜色变成深灰色 */ -webkit-animation: small-shake-bounce .5s alternate !important; -moz-animation: small-shake-bounce .5s alternate !important; -o-animation: small-shake-bounce .5s alternate !important; animation: small-shake-bounce .5s alternate !important; } /* 定义摇详细图标晃弹跳动画的关键帧 */ @keyframes info-shake-bounce { 0%, 100% { transform: rotate(0); } 25% { transform: rotate(10deg); } 50% { transform: rotate(-10deg); } 75% { transform: rotate(2.5deg); } 85% { transform: rotate(-2.5deg); } } /* 定义摇小图标晃弹跳动画的关键帧 */ @keyframes small-shake-bounce { 0%, 100% { transform: rotate(0); } 25% { transform: rotate(15deg); } 50% { transform: rotate(-15deg); } 75% { transform: rotate(5deg); } 85% { transform: rotate(5deg); } } /* 自定义鼠标新光标样式 */ body { cursor: url(https://cdn.custom-cursor.com/db/4828/32/arrow2747.png), default !important; } /* 自定义鼠标悬浮光标 */ .cursor-pointer { cursor: url(https://cdn.custom-cursor.com/db/4827/32/arrow2747.png), auto !important; } /* 卡片背景线条样式 BY 香水 [二群大佬提供] */ /* 伪元素创建背景线条样式 */ .w-full .font-semibold:before { position: absolute; /* 设置为绝对定位 */ width: 93px; /* 宽度为93像素 */ display: block; /* 设置为块级元素 */ height: 75px; /* 高度为75像素 */ content: \u0026#34;\u0026#34;; /* 伪元素内容为空 */ border-radius: 50%; /* 边框半径为50%，形成圆形 */ z-index: -1; /* 设置层级为-1，将其放在内容之后 */ right: -27px; /* 距离右边-27像素的位置 */ top: -35px; /* 距离顶部-35像素的位置 */ background: #ffffff3b; /* 背景颜色为淡白色带透明度的3b */ box-shadow: -8px 21px 0 #ffffff1a; /* 设置阴影效果，水平偏移-8px，垂直偏移21px，颜色为淡白色带透明度的1a */ } /* 伪元素创建另一种背景线条样式 */ .w-full .font-semibold:after { position: absolute; /* 设置为绝对定位 */ width: 40px; /* 宽度为40像素 */ display: block; /* 设置为块级元素 */ height: 40px; /* 高度为40像素 */ border: 4px solid #ffffff3b; /* 边框为4像素的实线，颜色为淡白色带透明度的3b */ content: \u0026#34;\u0026#34;; /* 伪元素内容为空 */ border-radius: 50%; /* 边框半径为50%，形成圆形 */ top: -19px; /* 距离顶部-19像素的位置 */ right: 48px; /* 距离右边48像素的位置 */ z-index: -1; /* 设置层级为-1，将其放在内容之后 */ } /* 设置图标信息框的圆角样式 */ .icon-info-box .rounded-2xl { position: relative; /* 设置为相对定位 */ border-radius: 15px; /* 设置边框半径为15像素，形成圆角 */ overflow: hidden; /* 超出部分隐藏 */ -webkit-backdrop-filter: blur(10px); /* 使用Webkit前缀的背景滤镜，模糊程度为10像素 */ backdrop-filter: blur(10px); /* 背景滤镜，模糊程度为10像素 */ } function siteTime() { window.setTimeout(siteTime, 1000); var seconds = 1000; var minutes = seconds * 60; var hours = minutes * 60; var days = hours * 24; var years = days * 365; var targetDate = new Date(2025, 01, 28); // 注意月份是从0开始的，所以11表示12月 var today = new Date(); var diff = today - targetDate; // 计算已运行的年数 var totalYears = Math.floor(diff / years); // 计算剩余时间 var remainingTime = diff % years; var diffDays = Math.floor(remainingTime / days); remainingTime %= days; var diffHours = Math.floor(remainingTime / hours); remainingTime %= hours; var diffMinutes = Math.floor(remainingTime / minutes); remainingTime %= minutes; var diffSeconds = Math.floor(remainingTime / seconds); document.getElementById(\u0026#34;sitetime\u0026#34;).innerHTML = \u0026#34;网页已运营 \u0026#34; + totalYears + \u0026#34; 年 \u0026#34; + diffDays + \u0026#34; 天 \u0026#34; + diffHours + \u0026#34; 小时 \u0026#34; + diffMinutes + \u0026#34; 分钟 \u0026#34; + diffSeconds + \u0026#34; 秒\u0026#34;; } siteTime(); EOF *浏览器清空缓存，刷新后见效果\n下面是拆分出的单独代码 1 、Sun-Panel_鼠标悬停动画 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 /*鼠标悬停动画 */ /* 当鼠标悬停在图标信息框上时触发动画 */ /* 详细图标摇晃动画 */ .icon-info-box .rounded-2xl:hover { background: rgba(42, 42, 42, 0.7) !important;/* 背景颜色变成深灰色 */ -webkit-animation: info-shake-bounce .5s alternate !important; -moz-animation: info-shake-bounce .5s alternate !important; -o-animation: info-shake-bounce .5s alternate !important; animation: info-shake-bounce .5s alternate !important; } /* 小图标摇晃动画 */ .icon-small-box .rounded-2xl:hover { background: rgba(42, 42, 42, 0.7) !important;/* 背景颜色变成深灰色 */ -webkit-animation: small-shake-bounce .5s alternate !important; -moz-animation: small-shake-bounce .5s alternate !important; -o-animation: small-shake-bounce .5s alternate !important; animation: small-shake-bounce .5s alternate !important; } /* 定义摇详细图标晃弹跳动画的关键帧 */ @keyframes info-shake-bounce { 0%, 100% { transform: rotate(0); } 25% { transform: rotate(10deg); } 50% { transform: rotate(-10deg); } 75% { transform: rotate(2.5deg); } 85% { transform: rotate(-2.5deg); } } /* 定义摇小图标晃弹跳动画的关键帧 */ @keyframes small-shake-bounce { 0%, 100% { transform: rotate(0); } 25% { transform: rotate(15deg); } 50% { transform: rotate(-15deg); } 75% { transform: rotate(5deg); } 85% { transform: rotate(5deg); } } 2 、自定义鼠标新光标样式 1 2 3 4 5 6 7 8 9 /* 自定义鼠标新光标样式 */ body { cursor: url(https://cdn.custom-cursor.com/db/4828/32/arrow2747.png), default !important; } /* 自定义鼠标悬浮光标 */ .cursor-pointer { cursor: url(https://cdn.custom-cursor.com/db/4827/32/arrow2747.png), auto !important; } 3 、卡片背景线条样式 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 /* 卡片背景线条样式 BY 香水 [二群大佬提供] */ /* 伪元素创建背景线条样式 */ .w-full .font-semibold:before { position: absolute; /* 设置为绝对定位 */ width: 93px; /* 宽度为93像素 */ display: block; /* 设置为块级元素 */ height: 75px; /* 高度为75像素 */ content: \u0026#34;\u0026#34;; /* 伪元素内容为空 */ border-radius: 50%; /* 边框半径为50%，形成圆形 */ z-index: -1; /* 设置层级为-1，将其放在内容之后 */ right: -27px; /* 距离右边-27像素的位置 */ top: -35px; /* 距离顶部-35像素的位置 */ background: #ffffff3b; /* 背景颜色为淡白色带透明度的3b */ box-shadow: -8px 21px 0 #ffffff1a; /* 设置阴影效果，水平偏移-8px，垂直偏移21px，颜色为淡白色带透明度的1a */ } /* 伪元素创建另一种背景线条样式 */ .w-full .font-semibold:after { position: absolute; /* 设置为绝对定位 */ width: 40px; /* 宽度为40像素 */ display: block; /* 设置为块级元素 */ height: 40px; /* 高度为40像素 */ border: 4px solid #ffffff3b; /* 边框为4像素的实线，颜色为淡白色带透明度的3b */ content: \u0026#34;\u0026#34;; /* 伪元素内容为空 */ border-radius: 50%; /* 边框半径为50%，形成圆形 */ top: -19px; /* 距离顶部-19像素的位置 */ right: 48px; /* 距离右边48像素的位置 */ z-index: -1; /* 设置层级为-1，将其放在内容之后 */ } 4 、网页计时器 展示此内容需要在Sun-Panel自定义页脚加上此代码 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 \u0026lt;span id=\u0026#34;sitetime\u0026#34;\u0026gt;\u0026lt;/span\u0026gt; function siteTime() { window.setTimeout(siteTime, 1000); var seconds = 1000; var minutes = seconds * 60; var hours = minutes * 60; var days = hours * 24; var years = days * 365; var targetDate = new Date(2023, 11, 18); // 注意月份是从0开始的，所以11表示12月 var today = new Date(); var diff = today - targetDate; // 计算已运行的年数 var totalYears = Math.floor(diff / years); // 计算剩余时间 var remainingTime = diff % years; var diffDays = Math.floor(remainingTime / days); remainingTime %= days; var diffHours = Math.floor(remainingTime / hours); remainingTime %= hours; var diffMinutes = Math.floor(remainingTime / minutes); remainingTime %= minutes; var diffSeconds = Math.floor(remainingTime / seconds); document.getElementById(\u0026#34;sitetime\u0026#34;).innerHTML = \u0026#34;网页已运营 \u0026#34; + totalYears + \u0026#34; 年 \u0026#34; + diffDays + \u0026#34; 天 \u0026#34; + diffHours + \u0026#34; 小时 \u0026#34; + diffMinutes + \u0026#34; 分钟 \u0026#34; + diffSeconds + \u0026#34; 秒\u0026#34;; } siteTime(); ","date":"2025-02-04T17:25:31+08:00","image":"https://file.meimolihan.eu.org/img/sun-panel.jpg","permalink":"https://meimolihan.eu.org/p/sun-panel-css%E6%BA%90%E7%A0%81/","title":"Sun Panel Css源码"},{"content":" Sun-Panel-js源码 插件集地址： https://github.com/hslr-s/sun-panel-js-plugins Sun-Panel： https://doc.sun-panel.top/zh_cn 一 、显示概览快速跳转\u0026ndash;服务器主机shell输入以下命令 1 、创建js文件touch /mnt/mydisk/home/sun-panel/config/custom/index.js \u0026amp;\u0026amp; cat \u0026gt; /mnt/mydisk/home/sun-panel/config/custom/index.js \u0026lt;\u0026lt;\u0026#39;EOF\u0026#39; (function () { // =========== Config Start =========== // ------------------------------------ // 距离滚动偏移量 const scrollOffset = 80 // 显示风格( auto:自动(默认) | mobile:左上角显示触发按钮-移动端风格 | sidebar:常态显示侧栏) const displayStyle = \u0026#39;auto\u0026#39; // 移动端宽度定义 const mobileWidth = 800 const SunPanelTOCDomIdName = \u0026#39;sun-panel-toc-dom\u0026#39; // 左上角按钮 SVG 图标 const svgTocMobileBtn = \u0026#39;\u0026lt;svg xmlns=\u0026#34;http://www.w3.org/2000/svg\u0026#34; viewBox=\u0026#34;0 0 24 24\u0026#34;\u0026gt;\u0026lt;path fill=\u0026#34;currentColor\u0026#34; d=\u0026#34;M17.5 4.5c-1.95 0-4.05.4-5.5 1.5c-1.45-1.1-3.55-1.5-5.5-1.5c-1.45 0-2.99.22-4.28.79C1.49 5.62 1 6.33 1 7.14v11.28c0 1.3 1.22 2.26 2.48 1.94c.98-.25 2.02-.36 3.02-.36c1.56 0 3.22.26 4.56.92c.6.3 1.28.3 1.87 0c1.34-.67 3-.92 4.56-.92c1 0 2.04.11 3.02.36c1.26.33 2.48-.63 2.48-1.94V7.14c0-.81-.49-1.52-1.22-1.85c-1.28-.57-2.82-.79-4.27-.79M21 17.23c0 .63-.58 1.09-1.2.98c-.75-.14-1.53-.2-2.3-.2c-1.7 0-4.15.65-5.5 1.5V8c1.35-.85 3.8-1.5 5.5-1.5c.92 0 1.83.09 2.7.28c.46.1.8.51.8.98z\u0026#34;/\u0026gt;\u0026lt;path fill=\u0026#34;currentColor\u0026#34; d=\u0026#34;M13.98 11.01c-.32 0-.61-.2-.71-.52c-.13-.39.09-.82.48-.94c1.54-.5 3.53-.66 5.36-.45c.41.05.71.42.66.83s-.42.71-.83.66c-1.62-.19-3.39-.04-4.73.39c-.08.01-.16.03-.23.03m0 2.66c-.32 0-.61-.2-.71-.52c-.13-.39.09-.82.48-.94c1.53-.5 3.53-.66 5.36-.45c.41.05.71.42.66.83s-.42.71-.83.66c-1.62-.19-3.39-.04-4.73.39a1 1 0 0 1-.23.03m0 2.66c-.32 0-.61-.2-.71-.52c-.13-.39.09-.82.48-.94c1.53-.5 3.53-.66 5.36-.45c.41.05.71.42.66.83s-.42.7-.83.66c-1.62-.19-3.39-.04-4.73.39a1 1 0 0 1-.23.03\u0026#34;/\u0026gt;\u0026lt;/svg\u0026gt;\u0026#39; // ------------------------------------ // =========== Config End =========== // 滚动容器的类名 const scrollContainerElementClassName = \u0026#39;.scroll-container\u0026#39; // 一些函数 const isMobile = () =\u0026gt; { if (displayStyle === \u0026#39;mobile\u0026#39;) { return true } else if (displayStyle === \u0026#39;pc\u0026#39;) { return false } const width = window.innerWidth return width \u0026lt; mobileWidth } function createDom() { // 检测是否已经存在TOC DOM，存在则删除 (function () { const element = document.getElementById(SunPanelTOCDomIdName) if (element) { element.remove() } })() const SunPanelTOCDom = document.createElement(\u0026#39;div\u0026#39;) SunPanelTOCDom.id = SunPanelTOCDomIdName document.body.appendChild(SunPanelTOCDom) // ========= Add style start ========= const style = document.createElement(\u0026#39;style\u0026#39;) const SunPanelTOCDomStyleId = `#${SunPanelTOCDomIdName}` style.textContent = ` ${SunPanelTOCDomStyleId} #toc-mobile-btn { top: 20px !important; left: 20px !important; position: fixed; width: 46px; height: 46px; background-color: #2a2a2a6b; color: white; border-radius: 0.5rem; display: flex; justify-content: center; align-items: center; cursor: pointer; } ${SunPanelTOCDomStyleId} .hidden { display: none !important; } ${SunPanelTOCDomStyleId} #toc-sidebar { width: 40px; padding: 10px; position: fixed; top: 0; left: 0; height: 100%; overflow: hidden; display: flex; flex-direction: column; justify-content: center; transition: width 0.3s ease, background-color 0.3s ease; border-top-right-radius: 20px; border-bottom-right-radius: 20px; background-color: none; } ${SunPanelTOCDomStyleId} .toc-mobile-btn-svg-container{ width:21px; height:21px; } ${SunPanelTOCDomStyleId} .toc-sidebar-expansion { width: 200px !important; display: flex; background-color: rgb(42 42 42 / 90%); box-shadow: 2px 0 5px rgba(0, 0, 0, 0.2); } ${SunPanelTOCDomStyleId} #toc-sidebar .toc-sidebar-box { width: 500px; } ${SunPanelTOCDomStyleId} .title-bar-box { display: flex; align-items: center; position: relative; cursor: pointer; } ${SunPanelTOCDomStyleId} .title-bar-slip { width: 20px; height: 6px; background-color: white; border-radius: 4px; margin: 15px 0; transition: height 0.3s ease, width 0.3s ease; box-shadow: 2px 0 5px rgba(0, 0, 0, 0.5); } ${SunPanelTOCDomStyleId} .title-bar-title { opacity: 0; white-space: nowrap; transition: opacity 0.3s ease, transform 0.3s ease, margin-left 0.3s ease; font-size: 14px; color: white; } ${SunPanelTOCDomStyleId} .toc-sidebar-expansion .title-bar-title { opacity: 1; margin-left: 10px; } ${SunPanelTOCDomStyleId} .toc-sidebar-expansion .title-bar-slip { box-shadow: none; } ${SunPanelTOCDomStyleId} .toc-sidebar-expansion .title-bar-box:hover .title-bar-slip { width: 40px; } ${SunPanelTOCDomStyleId} .toc-sidebar-expansion .title-bar-box:hover .title-bar-title { font-size: 20px; } ` // 添加样式到文档头部 SunPanelTOCDom.appendChild(style) // ========= Add style end ========= // 添加移动端菜单按钮 const tocMobileBtn = document.createElement(\u0026#39;div\u0026#39;) tocMobileBtn.id = \u0026#39;toc-mobile-btn\u0026#39; tocMobileBtn.classList.add(\u0026#39;backdrop-blur-[2px]\u0026#39;) SunPanelTOCDom.appendChild(tocMobileBtn) const tocMobileBtnSvgcContainer = document.createElement(\u0026#39;div\u0026#39;) tocMobileBtnSvgcContainer.innerHTML = svgTocMobileBtn tocMobileBtnSvgcContainer.classList.add(\u0026#39;toc-mobile-btn-svg-container\u0026#39;) tocMobileBtn.appendChild(tocMobileBtnSvgcContainer) // 创建侧边栏容器 const sidebar = document.createElement(\u0026#39;div\u0026#39;) sidebar.id = \u0026#39;toc-sidebar\u0026#39; const sidebarBox = document.createElement(\u0026#39;div\u0026#39;) sidebarBox.className = \u0026#39;toc-sidebar-box\u0026#39; // 查询出所有类名包含 item-group-index- 的元素 const items = document.querySelectorAll(\u0026#39;[class*=\u0026#34;item-group-index-\u0026#34;]\u0026#39;) // 遍历并打印每个元素的完整类名 items.forEach((item) =\u0026gt; { item.classList.forEach((className) =\u0026gt; { if (className.startsWith(\u0026#39;item-group-index-\u0026#39;)) { const titleBarBox = document.createElement(\u0026#39;div\u0026#39;) titleBarBox.className = \u0026#39;title-bar-box\u0026#39; // titleBarBox.href = `#${item.id}` titleBarBox.dataset.groupClassName = className // 目录条 const titleBarSlip = document.createElement(\u0026#39;div\u0026#39;) titleBarSlip.className = \u0026#39;title-bar-slip\u0026#39; // 创建一个链接 const titleBarTitle = document.createElement(\u0026#39;div\u0026#39;) titleBarTitle.className = \u0026#39;title-bar-title\u0026#39; // 获取子元素中 class=\u0026#34;group-title\u0026#34; 的内容 const titleElement = item.querySelector(\u0026#39;.group-title\u0026#39;) const titleText = titleElement ? titleElement.textContent : item.id titleBarTitle.textContent = titleText titleBarBox.appendChild(titleBarSlip) titleBarBox.appendChild(titleBarTitle) sidebarBox.appendChild(titleBarBox) } }) }) sidebar.appendChild(sidebarBox) // 将侧边栏添加到页面中 SunPanelTOCDom.appendChild(sidebar) function mobileHideSidebar() { sidebar.classList.remove(\u0026#39;toc-sidebar-expansion\u0026#39;) sidebar.classList.add(\u0026#39;hidden\u0026#39;) } function hideSidebar() { sidebar.classList.remove(\u0026#39;toc-sidebar-expansion\u0026#39;) } function showSidebar() { sidebar.classList.add(\u0026#39;toc-sidebar-expansion\u0026#39;) sidebar.classList.remove(\u0026#39;hidden\u0026#39;) } // ---------------- // 监听宽度变化开始 // ---------------- function debounce(func, wait) { let timeout return function (...args) { clearTimeout(timeout) timeout = setTimeout(() =\u0026gt; { func.apply(this, args) }, wait) } } function handleResize() { if (isMobile()) { tocMobileBtn.classList.remove(\u0026#39;hidden\u0026#39;) sidebar.classList.add(\u0026#39;hidden\u0026#39;) } else { tocMobileBtn.classList.add(\u0026#39;hidden\u0026#39;) sidebar.classList.remove(\u0026#39;hidden\u0026#39;) } } // 使用防抖函数包装你的处理函数 const debouncedHandleResize = debounce(handleResize, 200) // 添加事件监听器 window.addEventListener(\u0026#39;resize\u0026#39;, debouncedHandleResize) // 首次触发 handleResize() // ---------------- // 监听宽度变化结束 // ---------------- // 监听移动端按钮点击 tocMobileBtn.addEventListener(\u0026#39;click\u0026#39;, () =\u0026gt; { if (sidebar.classList.contains(\u0026#39;toc-sidebar-expansion\u0026#39;)) { // 隐藏 mobileHideSidebar() } else { // 显示 showSidebar() } }) // 监听TOC栏失去hover sidebar.addEventListener(\u0026#39;mouseleave\u0026#39;, () =\u0026gt; { if (isMobile()) { // 隐藏 mobileHideSidebar() } else { hideSidebar() } }) // 监听TOC栏获得hover sidebar.addEventListener(\u0026#39;mouseenter\u0026#39;, () =\u0026gt; { showSidebar() }) // 监听TOC点击事件 document.querySelectorAll(\u0026#39;.title-bar-box\u0026#39;).forEach((box) =\u0026gt; { box.addEventListener(\u0026#39;click\u0026#39;, function (event) { // 检查触发事件的元素是否有 \u0026#39;data-groupClassName\u0026#39; 属性 if (this.dataset.groupClassName) { // 获取 \u0026#39;data-groupClass\u0026#39; 属性的值 const groupClassName = this.dataset.groupClassName // 使用属性值作为选择器查询对应的元素 const targetElement = document.querySelector(`.${groupClassName}`) if (targetElement) { // 获取目标元素的 \u0026#39;top\u0026#39; 坐标 const targetTop = targetElement.offsetTop const scrollContainerElement = document.querySelector(scrollContainerElementClassName) if (scrollContainerElement) { scrollContainerElement.scrollTo({ top: targetTop - scrollOffset, behavior: \u0026#39;smooth\u0026#39;, // 平滑滚动 }) } } } }) }) } // 判断是否已经存在分组，不存在将定时监听 const items = document.querySelectorAll(\u0026#39;[class*=\u0026#34;item-group-index-\u0026#34;]\u0026#39;) if (items.length \u0026gt; 0) { createDom() return } const interval = setInterval(() =\u0026gt; { const items = document.querySelectorAll(\u0026#39;[class*=\u0026#34;item-group-index-\u0026#34;]\u0026#39;) if (items.length \u0026gt; 0) { createDom() clearInterval(interval) } }, 1000) })() EOF 2 、Sun-Panel个性化设置\u0026ndash;自定义页脚，粘贴以下内容 1 \u0026lt;script src=\u0026#34;/custom/index.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; 二 、页面雪花特效 1 、创建xuehua.js文件 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 touch /mnt/mydisk/home/sun-panel/config/custom/xuehua.js \u0026amp;\u0026amp; cat \u0026gt; /mnt/mydisk/home/sun-panel/config/custom/xuehua.js \u0026lt;\u0026lt;\u0026#39;EOF\u0026#39; function snow() { // 1、定义一片雪花模板 var flake = document.createElement(\u0026#39;div\u0026#39;); // 定义雪花字符 ❄❉❅❆✻✼❇❈❊✥✺ flake.innerHTML = \u0026#39;❄\u0026#39;; flake.style.cssText = \u0026#39;position:absolute;color:#fff;\u0026#39;; //获取页面的高度 相当于雪花下落结束时Y轴的位置 var documentHieght = window.innerHeight; //获取页面的宽度，利用这个数来算出，雪花开始时left的值 var documentWidth = window.innerWidth; //定义生成一片雪花的毫秒数，不建议低于100 var millisec =200; //2、设置第一个定时器，周期性定时器，每隔一段时间（millisec）生成一片雪花； setInterval(function() { //页面加载之后，定时器就开始工作 //随机生成雪花下落 开始 时left的值，相当于开始时X轴的位置 var startLeft = Math.random() * documentWidth; //随机生成雪花下落 结束 时left的值，相当于结束时X轴的位置 var endLeft = Math.random() * documentWidth; //随机生成雪花大小 var flakeSize = 3 + 20 * Math.random(); //随机生成雪花下落持续时间，时间越大下落越慢 var durationTime = 6000 + 10000 * Math.random(); //随机生成雪花下落 开始 时的透明度 var startOpacity = 0.7 + 0.3 * Math.random(); //随机生成雪花下落 结束 时的透明度 var endOpacity = 0.2 + 0.2 * Math.random(); //克隆一个雪花模板 var cloneFlake = flake.cloneNode(true); //第一次修改样式，定义克隆出来的雪花的样式 cloneFlake.style.cssText += ` left: ${startLeft}px; opacity: ${startOpacity}; font-size:${flakeSize}px; top:-25px; transition:${durationTime}ms;`; //拼接到页面中 document.body.appendChild(cloneFlake); //设置第二个定时器，一次性定时器， //当第一个定时器生成雪花，并在页面上渲染出来后，修改雪花的样式，让雪花动起来； setTimeout(function() { //第二次修改样式 cloneFlake.style.cssText += ` left: ${endLeft}px; top:${documentHieght}px; opacity:${endOpacity};`; //4、设置第三个定时器，当雪花落下后，删除雪花。 setTimeout(function() { cloneFlake.remove(); }, durationTime); }, 0); }, millisec); } snow(); EOF 2 、Sun-Panel个性化设置\u0026ndash;自定义页脚，粘贴以下内容 1 \u0026lt;script src=\u0026#34;/custom/xuehua.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; 三 、mp4视频壁纸 1 、创建js文件 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 touch /mnt/mydisk/home/sun-panel/config/custom/mp4.js \u0026amp;\u0026amp; cat \u0026gt; /mnt/mydisk/home/sun-panel/config/custom/mp4.js \u0026lt;\u0026lt;\u0026#39;EOF\u0026#39; document.addEventListener(\u0026#39;DOMContentLoaded\u0026#39;, (event) =\u0026gt; { // 用于添加视频背景的函数 const addVideoBackground = (wallpaperDiv) =\u0026gt; { // 创建video元素 const video = document.createElement(\u0026#39;video\u0026#39;); // 设置视频属性 video.autoplay = true; // 使用属性而不是setAttribute，因为autoplay是一个布尔属性 video.loop = true; video.muted = true; video.playsInline = true; // 注意这里是驼峰式写法，但在HTML中应使用playsinline // 应用CSS样式到video元素 video.style.position = \u0026#39;absolute\u0026#39;; video.style.top = \u0026#39;0\u0026#39;; video.style.left = \u0026#39;0\u0026#39;; video.style.width = \u0026#39;100%\u0026#39;; video.style.height = \u0026#39;100%\u0026#39;; video.style.objectFit = \u0026#39;cover\u0026#39;; // 定义多个视频源 const videoSources = [ \u0026#39;/uploads/%E5%8A%A8%E6%80%81%E5%A3%81%E7%BA%B8-01.mp4\u0026#39;, \u0026#39;/uploads/%E5%8A%A8%E6%80%81%E5%A3%81%E7%BA%B8-02.mp4\u0026#39;, \u0026#39;/uploads/%E5%8A%A8%E6%80%81%E5%A3%81%E7%BA%B8-03.mp4\u0026#39;, \u0026#39;/uploads/%E5%8A%A8%E6%80%81%E5%A3%81%E7%BA%B8-04.mp4\u0026#39;, \u0026#39;/uploads/%E5%8A%A8%E6%80%81%E5%A3%81%E7%BA%B8-05.mp4\u0026#39;, // \u0026#39;/uploads/%E5%8A%A8%E6%80%81%E5%A3%81%E7%BA%B8-06.mp4\u0026#39;, // \u0026#39;/uploads/%E5%8A%A8%E6%80%81%E5%A3%81%E7%BA%B8-07.mp4\u0026#39;, // \u0026#39;/uploads/%E5%8A%A8%E6%80%81%E5%A3%81%E7%BA%B8-08.mp4\u0026#39;, // \u0026#39;/uploads/%E5%8A%A8%E6%80%81%E5%A3%81%E7%BA%B8-09.mp4\u0026#39; // 在这里可以添加更多的视频源 ]; // 从视频源数组中随机选择一个 const randomSource = videoSources[Math.floor(Math.random() * videoSources.length)]; // 创建source元素并设置随机选择的视频源 const source = document.createElement(\u0026#39;source\u0026#39;); source.src = randomSource; source.type = \u0026#39;video/mp4\u0026#39;; // 将source元素添加到video元素中 video.appendChild(source); // 监听视频加载元数据事件，尝试播放视频 video.addEventListener(\u0026#39;loadedmetadata\u0026#39;, () =\u0026gt; { video.play().catch((error) =\u0026gt; { // 如果播放失败，可以在这里处理错误，例如显示一个备用图片或消息 console.error(\u0026#39;视频播放失败:\u0026#39;, error); }); }); // 将video元素添加到指定的wallpaperDiv中 wallpaperDiv.appendChild(video); }; // 使用MutationObserver监视DOM变化 const observer = new MutationObserver((mutationsList, observer) =\u0026gt; { // 查找匹配的.cover.wallpaper元素 const wallpaperDiv = document.querySelector(\u0026#39;.cover.wallpaper\u0026#39;); if (wallpaperDiv \u0026amp;\u0026amp; !wallpaperDiv.querySelector(\u0026#39;video\u0026#39;)) { // 添加视频背景 addVideoBackground(wallpaperDiv); // 注意：我们不再断开观察者，以便它能够继续监视未来的变化 } }); // 启动观察者监视document.body的变化 observer.observe(document.body, { childList: true, subtree: true }); }); EOF 2 、Sun-Panel个性化设置\u0026ndash;自定义页脚，粘贴以下内容 1 \u0026lt;script src=\u0026#34;/custom/mp4.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; 四 、点击特效-散开 1 、创建js文件touch /mnt/mydisk/home/sun-panel/config/custom/dianji.js \u0026amp;\u0026amp; cat \u0026gt; /mnt/mydisk/home/sun-panel/config/custom/dianji.js \u0026lt;\u0026lt;\u0026#39;EOF\u0026#39; class Circle { constructor({ origin, speed, color, angle, context }) { this.origin = origin; // 初始位置 this.position = { ...this.origin }; // 当前位置 this.color = color; // 颜色 this.speed = speed; // 速度 this.angle = angle; // 角度 this.context = context; // 绘制上下文 this.renderCount = 0; // 渲染计数 } draw() { // 绘制圆形 this.context.fillStyle = this.color; this.context.beginPath(); this.context.arc(this.position.x, this.position.y, 2, 0, Math.PI * 2); this.context.fill(); } move() { // 移动圆形 this.position.x = (Math.sin(this.angle) * this.speed) + this.position.x; this.position.y = (Math.cos(this.angle) * this.speed) + this.position.y + (this.renderCount * 0.3); this.renderCount++; } } class Boom { constructor({ origin, context, circleCount = 10, area }) { this.origin = origin; // 初始位置 this.context = context; // 绘制上下文 this.circleCount = circleCount; // 圆形数量 this.area = area; // 区域 this.stop = false; // 停止标志 this.circles = []; // 圆形数组 } randomArray(range) { // 从数组中随机取值 const length = range.length; const randomIndex = Math.floor(length * Math.random()); return range[randomIndex]; } randomColor() { // 随机生成颜色 const range = [\u0026#39;8\u0026#39;, \u0026#39;9\u0026#39;, \u0026#39;A\u0026#39;, \u0026#39;B\u0026#39;, \u0026#39;C\u0026#39;, \u0026#39;D\u0026#39;, \u0026#39;E\u0026#39;, \u0026#39;F\u0026#39;]; return \u0026#39;#\u0026#39; + this.randomArray(range) + this.randomArray(range) + this.randomArray(range) + this.randomArray(range) + this.randomArray(range) + this.randomArray(range); } randomRange(start, end) { // 在范围内生成随机数 return (end - start) * Math.random() + start; } init() { // 初始化Boom对象 for (let i = 0; i \u0026lt; this.circleCount; i++) { const circle = new Circle({ context: this.context, origin: this.origin, color: this.randomColor(), angle: this.randomRange(Math.PI - 1, Math.PI + 1), speed: this.randomRange(1, 6) }); this.circles.push(circle); } } move() { // 移动所有圆形，并检测是否超出区域 this.circles.forEach((circle, index) =\u0026gt; { if (circle.position.x \u0026gt; this.area.width || circle.position.y \u0026gt; this.area.height) { return this.circles.splice(index, 1); } circle.move(); }); if (this.circles.length === 0) { this.stop = true; } } draw() { // 绘制所有圆形 this.circles.forEach(circle =\u0026gt; circle.draw()); } } class CursorSpecialEffects { constructor() { // 鼠标特效主类 this.computerCanvas = document.createElement(\u0026#39;canvas\u0026#39;); // 计算用Canvas this.renderCanvas = document.createElement(\u0026#39;canvas\u0026#39;); // 渲染用Canvas this.computerContext = this.computerCanvas.getContext(\u0026#39;2d\u0026#39;); // 计算用上下文 this.renderContext = this.renderCanvas.getContext(\u0026#39;2d\u0026#39;); // 渲染用上下文 this.globalWidth = window.innerWidth; // 全局宽度 this.globalHeight = window.innerHeight; // 全局高度 this.booms = []; // Boom对象数组 this.running = false; // 运行标志 } handleMouseDown(e) { // 处理鼠标点击事件 const boom = new Boom({ origin: { x: e.clientX, y: e.clientY }, context: this.computerContext, area: { width: this.globalWidth, height: this.globalHeight } }); boom.init(); this.booms.push(boom); this.running || this.run(); } handlePageHide() { // 处理页面隐藏事件 this.booms = []; this.running = false; } init() { // 初始化方法 const style = this.renderCanvas.style; style.position = \u0026#39;fixed\u0026#39;; style.top = style.left = 0; style.zIndex = \u0026#39;999999999999999999999999999999999999999999\u0026#39;; style.pointerEvents = \u0026#39;none\u0026#39;; style.width = this.renderCanvas.width = this.computerCanvas.width = this.globalWidth; style.height = this.renderCanvas.height = this.computerCanvas.height = this.globalHeight; document.body.append(this.renderCanvas); window.addEventListener(\u0026#39;mousedown\u0026#39;, this.handleMouseDown.bind(this)); window.addEventListener(\u0026#39;pagehide\u0026#39;, this.handlePageHide.bind(this)); } run() { // 运行方法 this.running = true; if (this.booms.length === 0) { return this.running = false; } requestAnimationFrame(this.run.bind(this)); this.computerContext.clearRect(0, 0, this.globalWidth, this.globalHeight); this.renderContext.clearRect(0, 0, this.globalWidth, this.globalHeight); this.booms.forEach((boom, index) =\u0026gt; { if (boom.stop) { return this.booms.splice(index, 1); } boom.move(); boom.draw(); }); this.renderContext.drawImage(this.computerCanvas, 0, 0, this.globalWidth, this.globalHeight); } } const cursorSpecialEffects = new CursorSpecialEffects(); cursorSpecialEffects.init(); EOF 2 、Sun-Panel个性化设置\u0026ndash;自定义页脚，粘贴以下内容 1 \u0026lt;script src=\u0026#34;/custom/dianji.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; 五 、点击特效-烟花 点击烟花效果js插件地址：https://github.com/hslr-s/sun-panel-js-plugins/tree/master/clickFireworksEffects 1 、创建yanhua.js文件 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 touch /mnt/mydisk/home/sun-panel/config/custom/index.js \u0026amp;\u0026amp; cat \u0026gt; /mnt/mydisk/home/sun-panel/config/custom/yanhua.js \u0026lt;\u0026lt;\u0026#39;EOF\u0026#39; function clickFireworksEffects() { let balls = []; let longPressed = false; let longPress; let multiplier = 0; let width, height; let origin; let normal; let ctx; const colours = [\u0026#34;#F73859\u0026#34;, \u0026#34;#14FFEC\u0026#34;, \u0026#34;#00E0FF\u0026#34;, \u0026#34;#FF99FE\u0026#34;, \u0026#34;#FAF15D\u0026#34;]; const canvas = document.createElement(\u0026#34;canvas\u0026#34;); document.body.appendChild(canvas); canvas.setAttribute(\u0026#34;style\u0026#34;, \u0026#34;width: 100%; height: 100%; top: 0; left: 0; z-index: 99999; position: fixed; pointer-events: none;\u0026#34;); const pointer = document.createElement(\u0026#34;span\u0026#34;); pointer.classList.add(\u0026#34;pointer\u0026#34;); document.body.appendChild(pointer); if (canvas.getContext \u0026amp;\u0026amp; window.addEventListener) { ctx = canvas.getContext(\u0026#34;2d\u0026#34;); updateSize(); window.addEventListener(\u0026#39;resize\u0026#39;, updateSize, false); loop(); window.addEventListener(\u0026#34;mousedown\u0026#34;, function(e) { pushBalls(randBetween(10, 20), e.clientX, e.clientY); document.body.classList.add(\u0026#34;is-pressed\u0026#34;); longPress = setTimeout(function(){ document.body.classList.add(\u0026#34;is-longpress\u0026#34;); longPressed = true; }, 500); }, false); window.addEventListener(\u0026#34;mouseup\u0026#34;, function(e) { clearInterval(longPress); if (longPressed == true) { document.body.classList.remove(\u0026#34;is-longpress\u0026#34;); pushBalls(randBetween(50 + Math.ceil(multiplier), 100 + Math.ceil(multiplier)), e.clientX, e.clientY); longPressed = false; } document.body.classList.remove(\u0026#34;is-pressed\u0026#34;); }, false); window.addEventListener(\u0026#34;mousemove\u0026#34;, function(e) { let x = e.clientX; let y = e.clientY; pointer.style.top = y + \u0026#34;px\u0026#34;; pointer.style.left = x + \u0026#34;px\u0026#34;; }, false); } else { console.log(\u0026#34;canvas or addEventListener is unsupported!\u0026#34;); } function updateSize() { canvas.width = window.innerWidth * 2; canvas.height = window.innerHeight * 2; canvas.style.width = window.innerWidth + \u0026#39;px\u0026#39;; canvas.style.height = window.innerHeight + \u0026#39;px\u0026#39;; ctx.scale(2, 2); width = (canvas.width = window.innerWidth); height = (canvas.height = window.innerHeight); origin = { x: width / 2, y: height / 2 }; normal = { x: width / 2, y: height / 2 }; } class Ball { constructor(x = origin.x, y = origin.y) { this.x = x; this.y = y; this.angle = Math.PI * 2 * Math.random(); if (longPressed == true) { this.multiplier = randBetween(14 + multiplier, 15 + multiplier); } else { this.multiplier = randBetween(6, 12); } this.vx = (this.multiplier + Math.random() * 0.5) * Math.cos(this.angle); this.vy = (this.multiplier + Math.random() * 0.5) * Math.sin(this.angle); this.r = randBetween(8, 12) + 3 * Math.random(); this.color = colours[Math.floor(Math.random() * colours.length)]; } update() { this.x += this.vx - normal.x; this.y += this.vy - normal.y; normal.x = -2 / window.innerWidth * Math.sin(this.angle); normal.y = -2 / window.innerHeight * Math.cos(this.angle); this.r -= 0.3; this.vx *= 0.9; this.vy *= 0.9; } } function pushBalls(count = 1, x = origin.x, y = origin.y) { for (let i = 0; i \u0026lt; count; i++) { balls.push(new Ball(x, y)); } } function randBetween(min, max) { return Math.floor(Math.random() * max) + min; } function loop() { ctx.fillStyle = \u0026#34;rgba(255, 255, 255, 0)\u0026#34;; ctx.clearRect(0, 0, canvas.width, canvas.height); for (let i = 0; i \u0026lt; balls.length; i++) { let b = balls[i]; if (b.r \u0026lt; 0) continue; ctx.fillStyle = b.color; ctx.beginPath(); ctx.arc(b.x, b.y, b.r, 0, Math.PI * 2, false); ctx.fill(); b.update(); } if (longPressed == true) { multiplier += 0.2; } else if (!longPressed \u0026amp;\u0026amp; multiplier \u0026gt;= 0) { multiplier -= 0.4; } removeBall(); requestAnimationFrame(loop); } function removeBall() { for (let i = 0; i \u0026lt; balls.length; i++) { let b = balls[i]; if (b.x + b.r \u0026lt; 0 || b.x - b.r \u0026gt; width || b.y + b.r \u0026lt; 0 || b.y - b.r \u0026gt; height || b.r \u0026lt; 0) { balls.splice(i, 1); } } } } clickFireworksEffects();//调用特效函数 EOF 2 、Sun-Panel个性化设置\u0026ndash;自定义页脚，粘贴以下内容 1 \u0026lt;script src=\u0026#34;/custom/yanhua.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; 浏览器清空缓存，刷新后见效果 ","date":"2025-02-04T17:15:07+08:00","image":"https://file.meimolihan.eu.org/img/sun-panel.jpg","permalink":"https://meimolihan.eu.org/p/sun-panel-js%E6%BA%90%E7%A0%81/","title":"Sun Panel Js源码"},{"content":" typecho-butterfly主题-天气时钟教程 哔哩哔哩视频教程 其中时钟和风天气key和时钟高德地图web服务key最好自己去申请对应的api key，默认使用我自己的，可能会被限制，不保证可靠性\n时钟和风天气key 申请地址: https://id.qweather.com/#/login 登录后进入控制台 创建应用 填写应用名称和key名称随意 选择WebApi 复制key 时钟高德地图web服务key 申请地址: https://lbs.amap.com/ 登录后进入控制台 创建应用，名称随意，类型选其他 点击添加, key名称随意，服务平台选择Web服务,点击提交 复制key hexo博客-butterfly主题-天气时钟教程 给hexo-theme-butterfly添加 侧边栏电子钟 安装 1. 如果有安装店长的插件版侧边栏电子钟（与店长的电子钟冲突），在博客根目录[Blogroot]下打开终端，运行以下指令 1 2 # 卸载原版电子钟 npm uninstall hexo-butterfly-clock 2. 安装插件,在博客根目录[Blogroot]下打开终端，运行以下指令： 1 npm install hexo-butterfly-clock-anzhiyu --save 3. 添加配置信息，以下为写法示例 在站点配置文件_config.yml或者主题配置文件_config.butterfly.yml中添加\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 # electric_clock # see https://anzhiy.cn/posts/fc18.html electric_clock: enable: true # 开关 priority: 5 # 过滤器优先权 enable_page: all # 应用页面 exclude: # - /posts/ # - /about/ layout: # 挂载容器类型 type: class name: sticky_layout index: 0 loading: https://cdn.cbd.int/hexo-butterfly-clock-anzhiyu/lib/loading.gif # 加载动画自定义 clock_css: https://cdn.cbd.int/hexo-butterfly-clock-anzhiyu/lib/clock.min.css clock_js: https://cdn.cbd.int/hexo-butterfly-clock-anzhiyu/lib/clock.js ip_api: https://widget.qweather.net/simple/static/js/he-simple-common.js?v=2.0 qweather_key: # 和风天气key gaud_map_key: # 高得地图web服务key default_rectangle: false # 开启后将一直显示rectangle位置的天气，否则将获取访问者的地理位置与天气 rectangle: 112.6534116,27.96920845 # 获取访问者位置失败时会显示该位置的天气，同时该位置为开启default_rectangle后的位置 其中时钟和风天气key和时钟高德地图web服务key最好自己去申请对应的api key，默认使用我自己的，可能会被限制，不保证可靠性\n时钟和风天气key申请地址: https://id.qweather.com/#/login 登录后进入控制台 创建应用 填写应用名称和key名称随意 选择WebApi 复制key 我的时钟和风天气key：6c59d6c6a76a4841a8e30b93e4cc38b1 时钟高德地图web服务key 申请地址: https://lbs.amap.com/ 登录后进入控制台 创建应用，名称随意，类型选其他 点击添加, key名称随意，服务平台选择Web服务,点击提交 复制key 时钟高德地图web服务key：6faa489a78be3b1b97a722b4b0cb2dfa 4. 参数释义 参数 备选值/类型 释义 priority number 【可选】过滤器优先级，数值越小，执行越早，默认为10，选填 enable true / false 【必选】控制开关 enable_page path 【可选】填写想要应用的页面,如根目录就填\u0026rsquo;/\u0026rsquo;，分类页面就填\u0026rsquo;/categories/\u0026rsquo;。若要应用于所有页面，就填all，默认为all exclude path 【可选】填写想要屏蔽的页面，可以多个。写法见示例。原理是将屏蔽项的内容逐个放到当前路径去匹配，若当前路径包含任一屏蔽项，则不会挂载。 layout.type id / class 【可选】挂载容器类型，填写id或class，不填则默认为id layout.name text 【必选】挂载容器名称 layout.index 0 和正整数 【可选】前提是layout.type为class，因为同一页面可能有多个class，此项用来确认究竟排在第几个顺位 loading URL 【可选】电子钟加载动画的图片 clock_css URL 【可选】电子钟样式CDN资源 clock_js URL 【可选】电子钟执行脚本CDN资源 ip_api URL 【可选】获取时钟IP的API qweather_key string 【可选】和风天气key gaud_map_key string 【可选】高德地图web服务key default_rectangle - 【可选】此参数描述缺失，请确认具体含义 rectangle - 【可选】此参数描述缺失，请确认具体含义 ","date":"2025-02-04T17:00:00+08:00","image":"https://file.meimolihan.eu.org/img/weather-01.jpg","permalink":"https://meimolihan.eu.org/p/typecho-butterfly%E4%B8%BB%E9%A2%98-%E5%A4%A9%E6%B0%94%E6%97%B6%E9%92%9F%E6%95%99%E7%A8%8B/","title":"Typecho Butterfly主题 天气时钟教程"},{"content":" Typecho 音乐播放器 QPlayer2 一款简洁小巧的 HTML5 底部悬浮音乐播放器\n安装 下载 或克隆此工程 将文件夹重命名为 QPlayer2，并放到 Typecho 的插件目录，默认 usr/plugins 在控制台启用插件 歌曲列表 JSON 数组\n键名 说明 必须 name 歌曲名称 是 artist 艺术家数组或文本 否 cover 封面链接 否 lyrics [歌词文本][0] 否 provider 提供器名称 否，默认 [default][1] lrc 歌词链接，随提供器而定 否 QPlayer2 使用说明 在Typecho插件管理中打开QPlayer2设置。 播放列表中添加以下内容。 内容如下： 1 2 3 4 5 6 7 8 9 10 11 12 13 [{ \u0026#34;name\u0026#34;: \u0026#34;Nightglow\u0026#34;, \u0026#34;artist\u0026#34;: \u0026#34;蔡健雅\u0026#34;, \u0026#34;audio\u0026#34;: \u0026#34;https://cdn.jsdelivr.net/gh/moeshin/QPlayer-res/Nightglow.mp3\u0026#34;, \u0026#34;cover\u0026#34;: \u0026#34;https://cdn.jsdelivr.net/gh/moeshin/QPlayer-res/Nightglow.jpg\u0026#34;, \u0026#34;lrc\u0026#34;: \u0026#34;https://cdn.jsdelivr.net/gh/moeshin/QPlayer-res/Nightglow.lrc\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;やわらかな光\u0026#34;, \u0026#34;artist\u0026#34;: \u0026#34;やまだ豊\u0026#34;, \u0026#34;audio\u0026#34;: \u0026#34;https://cdn.jsdelivr.net/gh/moeshin/QPlayer-res/やわらかな光.mp3\u0026#34;, \u0026#34;cover\u0026#34;: \u0026#34;https://cdn.jsdelivr.net/gh/moeshin/QPlayer-res/やわらかな光.jpg\u0026#34;, \u0026#34;lyrics\u0026#34;: \u0026#34;[00:00.00]请欣赏\u0026#34; }] ","date":"2025-02-04T16:51:13+08:00","image":"https://file.meimolihan.eu.org/img/qblayer2.jpg","permalink":"https://meimolihan.eu.org/p/typecho%E9%9F%B3%E4%B9%90%E6%92%AD%E6%94%BE%E5%99%A8qplayer2/","title":"Typecho音乐播放器QPlayer2"},{"content":" typecho插件-文章标签 方法一 、官方下载 Typecho 文章标签选择器插件： https://typecho.work/archives/tagshelper.html github 地址： https://github.com/typecho-fans/plugins/tree/master/tagshelper 插件存放路径：/mnt/mydisk/home/typecho/typecho/usr/plugins\n回到后台，启用 tagshelper 插件，再打开文章撰写页面，右下角会出现可选择的标签项\n方法二 、手动创建 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 mkdir -pm 777 /mnt/mydisk/home/typecho/typecho/usr/plugins/tagshelper \u0026amp;\u0026amp; touch /mnt/mydisk/home/typecho/typecho/usr/plugins/tagshelper/Plugin.php \u0026amp;\u0026amp; cat \u0026gt; touch /mnt/mydisk/home/typecho/typecho/usr/plugins/tagshelper/Plugin.php \u0026lt;\u0026lt;\u0026#39;EOF\u0026#39; \u0026lt;?php /** * 后台编辑文章时增加标签选择列表 * * @package tagshelper * @author 泽泽社长 * @version 1.1 * @link http://blog.zezeshe.com */ class tagshelper_Plugin implements Typecho_Plugin_Interface { public static function activate() { Typecho_Plugin::factory(\u0026#39;admin/write-post.php\u0026#39;)-\u0026gt;bottom = array(\u0026#39;tagshelper_Plugin\u0026#39;, \u0026#39;tagslist\u0026#39;); } /* 禁用插件方法 */ public static function deactivate(){} public static function config(Typecho_Widget_Helper_Form $form){ } public static function personalConfig(Typecho_Widget_Helper_Form $form){} public static function tagslist() { ?\u0026gt;\u0026lt;style\u0026gt;.tagshelper a{cursor: pointer; padding: 0px 6px; margin: 2px 0;display: inline-block;border-radius: 2px;text-decoration: none;} .tagshelper a:hover{background: #ccc;color: #fff;} \u0026lt;/style\u0026gt; \u0026lt;script\u0026gt; $(document).ready(function(){ $(\u0026#39;#tags\u0026#39;).after(\u0026#39;\u0026lt;div style=\u0026#34;margin-top: 35px;\u0026#34; class=\u0026#34;tagshelper\u0026#34;\u0026gt;\u0026lt;ul style=\u0026#34;list-style: none;border: 1px solid #D9D9D6;padding: 6px 12px; max-height: 240px;overflow: auto;background-color: #FFF;border-radius: 2px;\u0026#34;\u0026gt;\u0026lt;?php $i=0; Typecho_Widget::widget(\u0026#39;Widget_Metas_Tag_Cloud\u0026#39;, \u0026#39;sort=count\u0026amp;desc=1\u0026amp;limit=200\u0026#39;)-\u0026gt;to($tags); while ($tags-\u0026gt;next()) { echo \u0026#34;\u0026lt;a id=\u0026#34;.$i.\u0026#34; onclick=\\\u0026#34;$(\\\u0026#39;#tags\\\u0026#39;).tokenInput(\\\u0026#39;add\\\u0026#39;, {id: \\\u0026#39;\u0026#34;.$tags-\u0026gt;name.\u0026#34;\\\u0026#39;, tags: \\\u0026#39;\u0026#34;.$tags-\u0026gt;name.\u0026#34;\\\u0026#39;});\\\u0026#34;\u0026gt;\u0026#34;.$tags-\u0026gt;name.\u0026#34;\u0026lt;/a\u0026gt;\u0026#34;; $i++; } ?\u0026gt;\u0026lt;/ul\u0026gt;\u0026lt;/div\u0026gt;\u0026#39;); });\u0026lt;/script\u0026gt; \u0026lt;?php } } EOF 回到后台，启用 tagshelper 插件，再打开文章撰写页面，右下角会出现可选择的标签项\n","date":"2025-02-04T11:39:54+08:00","image":"https://file.meimolihan.eu.org/img/typecho-03.jpg","permalink":"https://meimolihan.eu.org/p/typecho%E6%8F%92%E4%BB%B6-%E6%96%87%E7%AB%A0%E6%A0%87%E7%AD%BE/","title":"Typecho插件 文章标签"},{"content":" 表情符号 emoji 常用符号 ❤️🎞️🚀💡⏬🐳\n笑脸与人 😀😃😄😁😆😅🤣😂🙂🙃🫠😉😊😇🥰\n😍🤩😘😗☺️😚😙🥲😋😛😜🤪😝🤑🤗\n🤭🫢🫣🤫🤔🫡🤐🤨😐😑😶🫥😶‍🌫️😏😒\n🙄😬😮‍💨🤥🫨🙂‍↔️🙂‍↕️😌😔😪🤤😴😷🤒🤕\n🤢🤮🤧🥵🥶🥴😵😵‍💫🤯🤠🥳🥸😎🤓🧐\n😕🫤😟🙁☹️😮😯😲😳🥺🥹😦😧😨😰\n😥😢😭😱😖😣😞😓😩😫🥱😤😡😠🤬\n😈👿💀☠️💩🤡👹👺👻👽👾🤖😺😸😹\n😻😼😽🙀😿😾🙈🙉🙊💋💯💢💥💫💦\n💨🕳️💤👋🤚🖐️✋🖖🫱🫲🫳🫴🫷🫸👌\n🤌🤏✌️🤞🫰🤟🤘🤙👈👉👆🖕👇☝️🫵\n👍👎✊👊🤛🤜👏🙌🫶👐🤲🤝🙏✍️💅\n🤳💪🦾🦿🦵🦶👂🦻👃🧠🫀🫁🦷🦴👀\n👁️👅👄🫦👶🧒👦👧🧑👱👨🧔🧔‍♂️🧔‍♀️👨‍🦰\n👨‍🦱👨‍🦳👨‍🦲👩👩‍🦰🧑‍🦰👩‍🦱🧑‍🦱👩‍🦳🧑‍🦳👩‍🦲🧑‍🦲👱‍♀️👱‍♂️🧓\n👴👵🙍🙍‍♂️🙍‍♀️🙎🙎‍♂️🙎‍♀️🙅🙅‍♂️🙅‍♀️🙆🙆‍♂️🙆‍♀️💁\n💁‍♂️💁‍♀️🙋🙋‍♂️🙋‍♀️🧏🧏‍♂️🧏‍♀️🙇🙇‍♂️🙇‍♀️🤦🤦‍♂️🤦‍♀️🤷\n🤷‍♂️🤷‍♀️🫅🤴👸👳👳‍♂️👳‍♀️👲🧕🤵👰🤰🤱👩‍🍼\n💃🕺🛀🛌🧑‍🤝‍🧑👭👫👬💏👩‍❤️‍💋‍👨👨‍❤️‍💋‍👨👩‍❤️‍💋‍👩💑👩‍❤️‍👨👨‍❤️‍👨\n👩‍❤️‍👩💌💘💝💖💗💓💞💕💟❣️💔❤️‍🔥❤️‍🩹❤️\n🩷🧡💛💚💙🩵💜🤎🖤🩶🤍\n动物与自然 🐵🐒🦍🦧🐶🐕🦮🐕‍🦺🐩🐺🦊🦝🐱🐈🐈‍⬛\n🦁🐯🐅🐆🐴🫎🫏🐎🦄🦓🦌🦬🐮🐂🐃\n🐄🐷🐖🐗🐽🐏🐑🐐🐪🐫🦙🦒🐘🦣🦏\n🦛🐭🐁🐀🐹🐰🐇🐿️🦫🦔🦇🐻🐻‍❄️🐨🐼\n🦥🦦🦨🦘🦡🐾🦃🐔🐓🐣🐤🐥🐦🐧🕊️\n🦅🦆🦢🦉🦤🪶🦩🦚🦜🪽🐦‍⬛🪿🐦‍🔥🐸🐊\n🐢🦎🐍🐲🐉🦕🦖🐳🐋🐬🦭🐟🐠🐡🦈\n🐙🐚🪸🪼🐌🦋🐛🐜🐝🪲🐞🦗🪳🕷️🕸️\n🦂🦟🪰🪱🦠💐🌸💮🪷🏵️🌹🥀🌺🌻🌼\n🌷🪻🌱🪴🌲🌳🌴🌵🌾🌿☘️🍀🍁🍂🍃\n🪹🪺🍄\n饮食 🍇🍈🍉🍊🍋🍋‍🟩🍌🍍🥭🍎🍏🍐🍑🍒🍓\n🫐🥝🍅🫒🥥🥑🍆🥔🥕🌽🌶️🫑🥒🥬🥦\n🧄🧅🥜🫘🌰🫚🫛🍄‍🟫🍞🥐🥖🫓🥨🥯🥞\n🧇🧀🍖🍗🥩🥓🍔🍟🍕🌭🥪🌮🌯🫔🥙\n🧆🥚🍳🥘🍲🫕🥣🥗🍿🧈🧂🥫🍱🍘🍙\n🍚🍛🍜🍝🍠🍢🍣🍤🍥🥮🍡🥟🥠🥡🦀\n🦞🦐🦑🦪🍦🍧🍨🍩🍪🎂🍰🧁🥧🍫🍬\n🍭🍮🍯🍼🥛☕🫖🍵🍶🍾🍷🍸🍹🍺🍻\n🥂🥃🫗🥤🧋🧃🧉🧊🥢🍽️🍴🥄🔪🫙🏺\n行为 🎃🎄🎆🎇🧨✨🎈🎉🎊🎋🎍🎎🎏🎐🎑\n🧧🎀🎁🎗️🎟️🎫🎖️🏆🏅🥇🥈🥉⚽⚾🥎\n🏀🏐🏈🏉🎾🥏🎳🏏🏑🏒🥍🏓🏸🥊🥋\n🥅⛳⛸️🎣🤿🎽🎿🛷🥌🎯🪀🪁🔫🎱🔮\n🪄🎮🕹️🎰🎲🧩🧸🪅🪩🪆♠️♥️♦️♣️♟️\n🃏🀄🎴🎭🖼️🎨🧵🪡🧶🪢🧑‍⚕️👨‍⚕️👩‍⚕️🧑‍🎓👨‍🎓\n👩‍🎓🧑‍🏫👨‍🏫👩‍🏫🧑‍⚖️👨‍⚖️👩‍⚖️🧑‍🌾👨‍🌾👩‍🌾🧑‍🍳👨‍🍳👩‍🍳🧑‍🔧👨‍🔧\n👩‍🔧🧑‍🏭👨‍🏭👩‍🏭🧑‍💼👨‍💼👩‍💼🧑‍🔬👨‍🔬👩‍🔬🧑‍💻👨‍💻👩‍💻🧑‍🎤👨‍🎤\n👩‍🎤🧑‍🎨👨‍🎨👩‍🎨🧑‍✈️👨‍✈️👩‍✈️🧑‍🚀👨‍🚀👩‍🚀🧑‍🚒👨‍🚒👩‍🚒👮👮‍♂️\n👮‍♀️🕵️🕵️‍♂️🕵️‍♀️💂💂‍♂️💂‍♀️🥷👷👷‍♂️👷‍♀️👼🎅🤶🧑‍🎄\n🦸🦸‍♂️🦸‍♀️🦹🦹‍♂️🦹‍♀️🧙🧙‍♂️🧙‍♀️🧚🧚‍♂️🧚‍♀️🧛🧛‍♂️🧛‍♀️\n🧜🧜‍♂️🧜‍♀️🧝🧝‍♂️🧝‍♀️🧞🧞‍♂️🧞‍♀️🧟🧟‍♂️🧟‍♀️🧌🤵🤵‍♂️\n🤵‍♀️👰👰‍♂️👰‍♀️🤰🫃🫄🤱👩‍🍼👨‍🍼🧑‍🍼💆💆‍♂️💆‍♀️🚶\n🚶‍♂️🚶‍♀️🚶‍➡️🚶‍♀️‍➡️🚶‍♂️‍➡️🧍🧍‍♂️🧍‍♀️🧎🧎‍♂️🧎‍♀️🧎‍➡️🧎‍♀️‍➡️🧎‍♂️‍➡️🧑‍🦯\n🧑‍🦯‍➡️👨‍🦯👨‍🦯‍➡️👩‍🦯👩‍🦯‍➡️🧑‍🦼🧑‍🦼‍➡️👨‍🦼👨‍🦼‍➡️👩‍🦼👩‍🦼‍➡️🧑‍🦽🧑‍🦽‍➡️👨‍🦽👨‍🦽‍➡️\n👩‍🦽👩‍🦽‍➡️🏃🏃‍♂️🏃‍♀️🏃‍➡️🏃‍♀️‍➡️🏃‍♂️‍➡️💇💇‍♂️💇‍♀️🕴️👯👯‍♂️👯‍♀️\n🧖🧖‍♂️🧖‍♀️🧗🧗‍♂️🧗‍♀️🤺🏇⛷️🏂🏌️🏌️‍♂️🏌️‍♀️🏄🏄‍♂️\n🏄‍♀️🚣🚣‍♂️🚣‍♀️🏊🏊‍♂️🏊‍♀️⛹️⛹️‍♂️⛹️‍♀️🏋️🏋️‍♂️🏋️‍♀️🚴🚴‍♂️\n🚴‍♀️🚵🚵‍♂️🚵‍♀️🤸🤸‍♂️🤸‍♀️🤼🤼‍♂️🤼‍♀️🤽🤽‍♂️🤽‍♀️🤾🤾‍♂️\n🤾‍♀️🤹🤹‍♂️🤹‍♀️🧘🧘‍♂️🧘‍♀️\n出行与地点 🌍🌎🌏🌐🗺️🗾🧭🏔️⛰️🌋🗻🏕️🏖️🏜️🏝️\n🏞️🏟️🏛️🏗️🧱🪨🪵🛖🏘️🏚️🏠🏡🏢🏣🏤\n🏥🏦🏨🏩🏪🏫🏬🏭🏯🏰💒🗼🗽⛪🕌\n🛕🕍⛩️🕋⛲⛺🌁🌃🏙️🌄🌅🌆🌇🌉♨️\n🎠🛝🎡🎢💈🎪🚂🚃🚄🚅🚆🚇🚈🚉🚊\n🚝🚞🚋🚌🚍🚎🚐🚑🚒🚓🚔🚕🚖🚗🚘\n🚙🛻🚚🚛🚜🏎️🏍️🛵🦽🦼🛺🚲🛴🛹🛼\n🚏🛣️🛤️🛢️⛽🛞🚨🚥🚦🛑🚧⚓🛟⛵🛶\n🚤🛳️⛴️🛥️🚢✈️🛩️🛫🛬🪂💺🚁🚟🚠🚡\n🛰️🚀🛸🛎️🧳⌛⏳⌚⏰⏱️⏲️🕰️🕛🕧🕐\n🕜🕑🕝🕒🕞🕓🕟🕔🕠🕕🕡🕖🕢🕗🕣\n🕘🕤🕙🕥🕚🕦🌑🌒🌓🌔🌕🌖🌗🌘🌙\n🌚🌛🌜🌡️☀️🌝🌞🪐⭐🌟🌠🌌☁️⛅⛈️\n🌤️🌥️🌦️🌧️🌨️🌩️🌪️🌫️🌬️🌀🌈🌂☂️☔⛱️\n⚡❄️☃️⛄☄️🔥💧🌊\n物体 👩‍❤️‍👩💌💘💝💖💗💓💞💕💟❣️💔❤️‍🔥❤️‍🩹❤️\n👓🕶️🥽🥼🦺👔👕👖🧣🧤🧥🧦👗👘🥻\n🩱🩲🩳👙👚🪭👛👜👝🛍️🎒🩴👞👟🥾\n🥿👠👡🩰👢🪮👑👒🎩🎓🧢🪖⛑️📿💄\n💍💎🔇🔈🔉🔊📢📣📯🔔🔕🎼🎵🎶🎙️\n🎚️🎛️🎤🎧📻🎷🪗🎸🎹🎺🎻🪕🥁🪘🪇\n🪈📱📲☎️📞📟📠🔋🪫🔌💻🖥️🖨️⌨️🖱️\n🖲️💽💾💿📀🧮🎥🎞️📽️🎬📺📷📸📹📼\n🔍🔎🕯️💡🔦🏮🪔📔📕📖📗📘📙📚📓\n📒📃📜📄📰🗞️📑🔖🏷️💰🪙💴💵💶💷\n💸💳🧾💹✉️📧📨📩📤📥📦📫📪📬📭\n📮🗳️✏️✒️🖋️🖊️🖌️🖍️📝💼📁📂🗂️📅📆\n🗒️🗓️📇📈📉📊📋📌📍📎🖇️📏📐✂️🗃️\n🗄️🗑️🔒🔓🔏🔐🔑🗝️🔨🪓⛏️⚒️🛠️🗡️⚔️\n💣🪃🏹🛡️🪚🔧🪛🔩⚙️🗜️⚖️🦯🔗⛓️‍💥⛓️\n🪝🧰🧲🪜⚗️🧪🧫🧬🔬🔭📡💉🩸💊🩹\n🩼🩺🩻🚪🛗🪞🪟🛏️🛋️🪑🚽🪠🚿🛁🪤\n🪒🧴🧷🧹🧺🧻🪣🧼🫧🪥🧽🧯🛒🚬⚰️\n🪦⚱️🧿🪬🗿🪧🪪\n符号 🏧🚮🚰♿🚹🚺🚻🚼🚾🛂🛃🛄🛅🗣️👤\n👥🫂👣⚠️🚸⛔🚫🚳🚭🚯🚱🚷📵🔞☢️\n☣️⬆️↗️➡️↘️⬇️↙️⬅️↖️↕️↔️↩️↪️⤴️⤵️\n🔃🔄🔙🔚🔛🔜🔝🛐⚛️🕉️✡️☸️☯️✝️☦️\n☪️☮️🕎🔯🪯♈♉♊♋♌♍♎♏♐♑\n♒♓⛎🔀🔁🔂▶️⏩⏭️⏯️◀️⏪⏮️🔼⏫\n🔽⏬⏸️⏹️⏺️⏏️🎦🔅🔆📶🛜📳📴♀️♂️\n⚧️✖️➕➖➗🟰♾️‼️⁉️❓❔❕❗〰️💱\n💲⚕️♻️⚜️🔱📛🔰⭕✅☑️✔️❌❎➰➿\n〽️✳️✴️❇️©️®️™️#️⃣*️⃣0️⃣1️⃣2️⃣3️⃣4️⃣5️⃣\n6️⃣7️⃣8️⃣9️⃣🔟🔠🔡🔢🔣🔤🅰️🆎🅱️🆑🆒\n🆓ℹ️🆔Ⓜ️🆕🆖🅾️🆗🅿️🆘🆙🆚🈁🈂️🈷️\n🈶🈯🉐🈹🈚🈲🉑🈸🈴🈳㊗️㊙️🈺🈵🔴\n🟠🟡🟢🔵🟣🟤⚫⚪🟥🟧🟨🟩🔺🔻💠\n🟦🟪🟫⬛⬜◼️◻️◾◽▪️▫️🔶🔷🔸🔹\n🔘🔳🔲💬👁️‍🗨️🗨️🗯️💭👨‍👩‍👦👨‍👩‍👧👨‍👩‍👧‍👦👨‍👩‍👦‍👦👨‍👩‍👧‍👧👨‍👨‍👦👨‍👨‍👧\n👨‍👨‍👧‍👦👨‍👨‍👦‍👦👨‍👨‍👧‍👧👩‍👩‍👦👩‍👩‍👧👩‍👩‍👧‍👦👩‍👩‍👦‍👦👩‍👩‍👧‍👧👨‍👦👨‍👦‍👦👨‍👧👨‍👧‍👦👨‍👧‍👧👩‍👦👩‍👦‍👦👩‍👧👩‍👧‍👦\n👩‍👧‍👧👪🧑‍🧑‍🧒🧑‍🧑‍🧒‍🧒🧑‍🧒🧑‍🧒‍🧒\n旗帜 🏁🚩🎌🏴🏳️🏳️‍🌈🏳️‍⚧️🏴‍☠️\n","date":"2025-02-03T23:14:47+08:00","image":"https://file.meimolihan.eu.org/img/emoji.jpg","permalink":"https://meimolihan.eu.org/p/%E8%A1%A8%E6%83%85%E7%AC%A6%E5%8F%B7emoji/","title":"表情符号emoji"},{"content":"Typecho前台主题Butterfly 前台主题存放路径./usr/themes Butterfly 前台主题下载地址： https://github.com/wehaox/Typecho-Butterfly typecho-butterfly主题使用文档： https://blog.haoi.net/archives/typecho-butterfly.html 友链如何使用 你需要去独立页面选择友情链接模块，标题取名为友链 如何生成butterfly的友链效果？\n你可以去主题后台按照提示设置友链(它会渲染在文章的最上面) 你可以在友链的独立页面模块中直接写入友链div的html代码(自定义程度更高) 如何在typecho使用html不被md解析? 你只需使用 !!! 收尾包裹住html既可以 注意:主题1.7.0(包括)之前的部分版本友链模块存在bug，请更新到1.7.0之后再配合下面的示例使用 下面的示例效果如图所示\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 ## \u0026lt;i class=\u0026#34;fas fa-check-double\u0026#34; style=\u0026#34;color:#f66;padding-right:.4rem\u0026#34;\u0026gt;\u0026lt;/i\u0026gt; 这是html友链示例 !!! \u0026lt;div class=\u0026#34;flink-list\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;flink-list-item\u0026#34;\u0026gt; \u0026lt;a href=\u0026#34;修改网址\u0026#34; title=\u0026#34;修改标题\u0026#34; target=\u0026#34;_blank\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;flink-item-icon\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;修改图标\u0026#34; onerror=\u0026#34;this.onerror=null;this.src=\u0026#39;/img/friend_404.gif\u0026#39;\u0026#34; alt=\u0026#34;修改标题\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;flink-item-name\u0026#34;\u0026gt;修改标题\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;flink-item-desc\u0026#34; title=\u0026#34;修改描述\u0026#34;\u0026gt;修改描述\u0026lt;/div\u0026gt;\u0026lt;/a\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;flink-list-item\u0026#34;\u0026gt; \u0026lt;a href=\u0026#34;修改网址\u0026#34; title=\u0026#34;修改标题\u0026#34; target=\u0026#34;_blank\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;flink-item-icon\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;修改图标\u0026#34; onerror=\u0026#34;this.onerror=null;this.src=\u0026#39;/img/friend_404.gif\u0026#39;\u0026#34; alt=\u0026#34;修改标题2\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;flink-item-name\u0026#34;\u0026gt;修改标题2\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;flink-item-desc\u0026#34; title=\u0026#34;修改描述\u0026#34;\u0026gt;修改描述2\u0026lt;/div\u0026gt;\u0026lt;/a\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; !!! ## \u0026lt;i class=\u0026#34;fas fa-fan\u0026#34; style=\u0026#34;color:#0cc;padding-right:.4rem\u0026#34;\u0026gt;\u0026lt;/i\u0026gt; 这是html友链示例第二个分组 !!! \u0026lt;div class=\u0026#34;flink-list\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;flink-list-item\u0026#34;\u0026gt; \u0026lt;a href=\u0026#34;修改网址\u0026#34; title=\u0026#34;修改标题\u0026#34; target=\u0026#34;_blank\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;flink-item-icon\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;修改图标\u0026#34; onerror=\u0026#34;this.onerror=null;this.src=\u0026#39;/img/friend_404.gif\u0026#39;\u0026#34; alt=\u0026#34;修改标题\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;flink-item-name\u0026#34;\u0026gt;修改标题\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;flink-item-desc\u0026#34; title=\u0026#34;修改描述\u0026#34;\u0026gt;修改描述\u0026lt;/div\u0026gt;\u0026lt;/a\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;flink-list-item\u0026#34;\u0026gt; \u0026lt;a href=\u0026#34;修改网址\u0026#34; title=\u0026#34;修改标题\u0026#34; target=\u0026#34;_blank\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;flink-item-icon\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;修改图标\u0026#34; onerror=\u0026#34;this.onerror=null;this.src=\u0026#39;/img/friend_404.gif\u0026#39;\u0026#34; alt=\u0026#34;修改标题分组2\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;flink-item-name\u0026#34;\u0026gt;修改标题2\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;flink-item-desc\u0026#34; title=\u0026#34;修改描述\u0026#34;\u0026gt;修改描述分组2\u0026lt;/div\u0026gt;\u0026lt;/a\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; !!! [note type=\u0026#34;success flat no-icon\u0026#34;]你好啊，想申请友链按如下格式填写 ...网站名称 ...网站链接 ...网站头像 [/note] 原主题： hexo-butterfly Demo： WeHao‘s Blog 使用文档： 使用文档 💻安装 你最好从 Release 页面下载，code页下载代码可能更新遗漏或者更新提前导致页面出错\n下载好后放进博客usr/theme内解压即可\n⭐帮助主题发展(加快更新) 如果你发现主题bug或者建议可以去 issues 提交反馈 如果你一定能力可以向主题提交 PR 来丰富主题 如果你只是一个普通是使用者，你可以在右上角给主题点一个 star 来鼓励作者来加快更新 ✌️移植特色 方便原hexo的博文转移，因为都是md文档 原butterfly的用户可以直接使用原版butterfly主题的css文件，拥有原先同样的效果 注意：移植并非为最新版butterfly,你的index.css可能会在本主题出现bug 由于使用动态博客，大部分功能可以让程序去实现，不用借助第三方api(可在主题外观设置中自定义) 在线编辑文档 搜索、加密和置顶文章可以直接使用(相比hexo无需太多额外配置) 相比hexo，程序安装更加方便，使用更加高效 网站咨询显示同时在线人数(某些虚拟主机似乎无法使用) 可在后台设置侧边栏信息以及侧边栏的隐藏和显示 后续将开发更多功能 🎉已实现的功能 支持评论区谷歌人机验证、hcaptcha人机验证 全站加密或禁止访问 一键开启魔改主题 单独设置文章过期提醒 文章加密（博客程序自带） 后台设置需要置顶文章 后台设置友链并可以使html自定义友链 文章内可设置回复可见 卡片化设计 支持二级目录 双栏设计 响应式主题 夜间模式 Pjax 文章阅读模式 简体和繁体转换 电脑和手机都可查看TOC目录 内置多种代码配色（darker/pale night/light/ocean/mac/mac light），可自定义代码配色 代码块显示代码语言/关闭或展开代码块/代码复制/代码自动换行 可关闭文字复制/可开启内容复制增加版权信息） 本地搜索 Mathjax 和 Katex 内置404页面 显示字数统计 显示相关文章 过期文章提醒 多种在线聊天（Chatra/Tidio/Daovoice/Gitter/Crisp） 谷歌广告/手动广告位置 修改网站配色 打字特效 activate_power_mode 多种背景特效（静止彩带/动态彩带/Canvas Nest） 多种鼠标点击特效（烟花/爱心） 内置一种 Preloader 加载动画 Fancybox大图模式 照片墙 图片懒加载 Snackbar弹窗 PWA 详情看：\n博客说明 ","date":"2025-02-03T21:09:16+08:00","image":"https://file.meimolihan.eu.org/img/typecho-03.jpg","permalink":"https://meimolihan.eu.org/p/typecho%E5%89%8D%E5%8F%B0%E4%B8%BB%E9%A2%98butterfly/","title":"Typecho前台主题Butterfly"},{"content":" typecho后台主题JKAdmin 一 、JKAdmin 后台主题（官方主题保持不变） 1 、下载 JKAdmin 后台主题 JKAdmin 官方地址： https://3si.tech/shop/22.html 2 、使用方法： 解压后台主题到你的Typecho安装目录，文件夹改个名，比如我的叫 jkadmin 编辑 Typecho 安装目录下 config.inc.php 把里面的 define('__TYPECHO_ADMIN_DIR****', '/admin/') 中的 admin 改成define('__TYPECHO_ADMIN_DIR****', '/jkadmin/') 解压 Widget.zip 替换 Typecho 安装目录下的 var\\Typecho\\Widget 文件夹。说明：只对原始的 typecho 组件加了一点 css，没啥影响，你以后都可以不用在替换回去。 3 、自定义登录页 jkadmin 提供了一个css自定接入口。可以方便的修改css，防止升级被覆盖。\n您可以在 jkadmin后台主题目录/assets/css 目录 ，没有就新建一个css目录。在该目录下新建custom.css。 编辑该文件添加自定义css。\n我用命令直接创建custom.css文件，命令如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 mkdir -p /mnt/mydisk/home/typecho/typecho/jkadmin/assets/css \u0026amp;\u0026amp; touch /mnt/mydisk/home/typecho/typecho/jkadmin/assets/css/custom.css \u0026amp;\u0026amp; cat \u0026gt; /mnt/mydisk/home/typecho/typecho/jkadmin/assets/css/custom.css \u0026lt;\u0026lt;\u0026#39;EOF\u0026#39; .profile-greeting { background-image: url(\u0026#34;https://pic.imgdb.cn/item/64aab0201ddac507ccc4ca0f.jpg\u0026#34;); } /*设置登录背景图片*/ #login-img-wrapper { background-image: url(\u0026#34;https://acg.suyanw.cn/Anime\u0026#34;)!important; background-size: cover; background-repeat: no-repeat; } /*设置登录框透明度*/ #login-img-wrapper .login-card { opacity: 0.88; } /*设置注册背景图片*/ #register-img-wrapper { background-image: url(\u0026#34;https://acg.suyanw.cn/Anime\u0026#34;)!important; background-size: cover; background-repeat: no-repeat; } /*设置注册框透明度*/ #register-img-wrapper .login-card { opacity: 0.88; } EOF ","date":"2025-02-03T19:55:18+08:00","image":"https://file.meimolihan.eu.org/img/typecho-03.jpg","permalink":"https://meimolihan.eu.org/p/typecho%E5%90%8E%E5%8F%B0%E4%B8%BB%E9%A2%98jkadmin/","title":"Typecho后台主题JKAdmin"},{"content":" docker 镜像加速 linux 一键修改 docker 国内源 官网地址： https://linuxmirrors.cn/ 中国大陆 1 bash \u0026lt;(curl -sSL https://linuxmirrors.cn/main.sh) 中国大陆教育网 1 bash \u0026lt;(curl -sSL https://linuxmirrors.cn/main.sh) --edu 手动修改 docker 源 1 、GPT修改格式 国外地址更新： https://github.com/dongyubin/DockerHub 国内地址更新： https://www.wangdu.site/course/2109.html 2 、Linux Docker_修改镜像地址 1 2 3 4 5 6 7 8 9 10 11 12 13 14 touch /etc/docker/daemon.json \u0026amp;\u0026amp; cat \u0026gt; /etc/docker/daemon.json \u0026lt;\u0026lt;EOF { \u0026#34;registry-mirrors\u0026#34;: [ \u0026#34;https://dockerpull.org\u0026#34;, \u0026#34;https://docker.1panel.dev\u0026#34;, \u0026#34;https://docker.fxxk.dedyn.io\u0026#34;, \u0026#34;https://docker.xn--6oq72ry9d5zx.cn\u0026#34;, \u0026#34;https://docker.zhai.cm\u0026#34;, \u0026#34;https://docker.5z5f.com\u0026#34; ] } EOF sudo systemctl daemon-reload \u0026amp;\u0026amp; sudo systemctl restart docker 3 、查看修改是否成功 1 docker info openwrt Docker_修改镜像地址 获得 docker 镜像源地址 方法1、网页查找 国外地址更新： https://github.com/dongyubin/DockerHub 国内地址更新： https://www.wangdu.site/course/2109.html 方法2、终端命令查找 小雅大礼包命令，选择一个可用速度快的镜像源\n输入9回车，再输入6回车\n1 bash -c \u0026#34;$(curl --insecure -fsSL https://ddsrem.com/xiaoya_install.sh)\u0026#34; ","date":"2025-02-03T17:59:50+08:00","image":"https://file.meimolihan.eu.org/img/docker-07.jpg","permalink":"https://meimolihan.eu.org/p/docker-%E9%95%9C%E5%83%8F%E5%8A%A0%E9%80%9F/","title":"Docker 镜像加速"},{"content":"Typecho 代码高亮插件Code Prettify 介绍 基于prismjs的代码语法高亮typecho插件，支持众多常见的代码语言高亮显示，提供11种代码高亮风格自由切换，支持显示代码语言类型、行号，以及支持复制代码到剪切板功能\n⭐GitHub项目 最新更新时间：2020-08-15\n起始 最初基于 Highlight 插件，开发一款名为ColorHighlight插件\n但因为插件本身存在不少BUG，自己又不想重写结构，于是便重新基于CodeHighlighter开发了一款\n依旧在原有的代码高亮样式上新增了Mac风格，修改了部分JS代码\n激活 ⏬下载 第 1 步：下载本插件，解压，放到 usr/plugins/ 目录中；\n第 2 步：文件夹名改为 CodePrettify；\n第 3 步：登录管理后台，激活插件 （请勿与其它同类插件同时启用，以免互相影响）\n第 4 步：设置：选择主题风格，是否显示行号等。\n用法 1 2 3 4 \\```php(语言类型选填) \u0026lt;?php echo \u0026#39;hello jrotty!\u0026#39;; ?\u0026gt; \\``` 删除上边代码中的\\ Pjax 如果你的网站有开启Pjax\n请把以下代码添加到回调函数的地方，在你使用的主题设置里看看\n1 2 3 4 5 6 if (typeof Prism !== \u0026#39;undefined\u0026#39;) { var pres = document.getElementsByTagName(\u0026#39;pre\u0026#39;); for (var i = 0; i \u0026lt; pres.length; i++){ if (pres[i].getElementsByTagName(\u0026#39;code\u0026#39;).length \u0026gt; 0) pres[i].className = \u0026#39;line-numbers\u0026#39;;} Prism.highlightAll(true,null);} 重要说明 可设置项 选择高亮主题风格 (官方提供的 8 种风格切换，本人自己新增了三种（Mac风格）) coy.css dark.css BlackMac.css（黑色Mac风格） GrayMac.css （默认选中：Mac风格（灰色）） WhiteMac.css（白色Mac风格） twilight.css tomorrow-night.css 是否在代码左侧显示行号 （默认开启） ","date":"2025-02-02T21:15:27+08:00","image":"https://file.meimolihan.eu.org/img/typecho-03.jpg","permalink":"https://meimolihan.eu.org/p/typecho%E4%BB%A3%E7%A0%81%E9%AB%98%E4%BA%AE%E6%8F%92%E4%BB%B6codeprettify/","title":"Typecho代码高亮插件CodePrettify"},{"content":"Windows 配置 NFS 服务 Windows为客户端，NFS的配置 1、Windows挂载NFS到本地磁盘Q 1 2 3 mount 10.10.10.242:/mnt/mydisk g: mount 10.10.10.251:/mnt/mydisk h: mount 10.10.10.246:/mnt/mydisk i: 将服务器10.10.10.251上的/mnt/mydisk文件夹，挂载为本地磁盘q 2、Windows卸载_NFS挂载的本地磁盘Q 1 2 3 net use g: /delete net use h: /delete net use i: /delete ","date":"2025-01-29T17:55:43+08:00","image":"https://file.meimolihan.eu.org/img/windows-04.jpg","permalink":"https://meimolihan.eu.org/p/windows%E9%85%8D%E7%BD%AEnfs%E6%9C%8D%E5%8A%A1/","title":"Windows配置NFS服务"},{"content":" Alpine 配置NFS服务 一 、配置 NFS 基础设置 科技lion一键脚本工具\n1 sudo curl -sS -O https://kejilion.pro/kejilion.sh \u0026amp;\u0026amp; chmod +x kejilion.sh \u0026amp;\u0026amp; ./kejilion.sh 更新软件包+安装NFS客户端+启动nfsmount 服务+系统启‮时动‬挂载命令+启动 nfs 服务+自动启动nfs服务\n1 apk update; apk add nfs-utils; rc-service nfsmount start; rc-update add nfsmount; rc-service nfs start; rc-update add nfs 二 、Alpine为服务端，NFS的配置 1 2 3 4 5 6 7 mkdir -p -m 777 /mnt/mydisk \u0026amp;\u0026amp; chmod +x /etc/exports \u0026amp;\u0026amp; cat \u0026gt; /etc/exports \u0026lt;\u0026lt;\u0026#39;EOF\u0026#39; ## 挂载/mnt/mydisk为共享目录 /mnt/mydisk *(rw,fsid=0,no_subtree_check,no_root_squash,insecure,sync) EOF ## 让编辑生效命令 exportfs -r 三 、Alpine为客户端，NFS的配置 1、临时挂载NFS服务 手动挂载10.10.10.251服务端/mnt/mydisk目录，为本地/mnt/ARS2-NFS 1 2 3 4 5 6 7 8 9 10 11 ## 临时挂载10.10.10.251服务器的/mnt/mydisk文件夹，挂载到本地的/mnt/ARS2-NFS文件夹 mkdir -pm 755 /mnt/ARS2-NFS \u0026amp;\u0026amp; chmod +x /etc/exports \u0026amp;\u0026amp; mount -t nfs -o rw 10.10.10.251:/mnt/mydisk /mnt/ARS2-NFS \u0026amp;\u0026amp; df -hT /mnt/* ## 临时挂载10.10.10.254服务器的/mnt/ntfs文件夹，挂载到本地的/mnt/PVE-NFS文件夹 mkdir -pm 755 /mnt/PVE-NFS \u0026amp;\u0026amp; chmod +x /etc/exports \u0026amp;\u0026amp; mount -t nfs -o rw 10.10.10.254:/mnt/ntfs /mnt/PVE-NFS \u0026amp;\u0026amp; df -hT /mnt/* ## 临时挂载10.10.10.245服务器的/mnt/mydisk文件夹，挂载到本地的/mnt/Debian-NFS文件夹 mkdir -pm 755 /mnt/Debian-NFS \u0026amp;\u0026amp; chmod +x /etc/exports \u0026amp;\u0026amp; mount -t nfs -o rw 10.10.10.247:/mnt/mydisk /mnt/Debian-NFS \u0026amp;\u0026amp; df -hT /mnt/* ## 临时挂载10.10.10.247服务器的/mnt/mydisk文件夹，挂载到本地的/mnt/Ubuntu-NFS文件夹 mkdir -pm 755 /mnt/Ubuntu-NFS \u0026amp;\u0026amp; chmod +x /etc/exports \u0026amp;\u0026amp; mount -t nfs -o rw 10.10.10.247:/mnt/mydisk /mnt/Ubuntu-NFS \u0026amp;\u0026amp; df -hT /mnt/* 2 、永久挂载NFS服务 挂载10.10.10.251服务端/mnt/mydisk目录，开机自动挂载本地文件目录为/mnt/ARS2-NFS 方法一 、覆盖NFS配置文件/etc/fstab\n1 2 3 4 5 6 7 8 9 10 11 12 13 mkdir -p -m 777 /mnt/ARS2-NFS /mnt/PVE-NFS /mnt/Debian-NFS \u0026amp;\u0026amp; chmod +x /etc/exports \u0026amp;\u0026amp; cat \u0026gt; /etc/fstab \u0026lt;\u0026lt;\u0026#39;EOF\u0026#39; ## 覆盖/etc/fstab文件 ## 将10.10.10.251服务器的/mnt/mydisk文件夹，挂载到本地的/mnt/ARS2-NFS文件夹 10.10.10.251:/mnt/mydisk /mnt/ARS2-NFS nfs nofail,x-systemd.device-timeout=15s 0 0 ## 将10.10.10.254服务器的/mnt/ntfs文件夹，挂载到本地的/mnt/PVE-NFS文件夹 10.10.10.254:/mnt/ntfs /mnt/PVE-NFS nfs nofail,x-systemd.device-timeout=15s 0 0 ## 将10.10.10.245服务器的/mnt/mydisk文件夹，挂载到本地的/mnt/Debian-NFS文件夹 10.10.10.245:/mnt/mydisk /mnt/Debian-NFS nfs nofail,x-systemd.device-timeout=15s 0 0 EOF reboot 方法二 、追加NFS配置文件/etc/fstab\n1 2 3 4 5 6 7 8 ## 追加一条，挂载Debian服务器NFS mkdir -p -m 777 /mnt/Debian-NFS \u0026amp;\u0026amp; chmod +x /etc/exports \u0026amp;\u0026amp; cat \u0026gt;\u0026gt;/etc/fstab \u0026lt;\u0026lt;\u0026#39;EOF\u0026#39; ## 追加一条挂载 ## 将10.10.10.245服务器的/mnt/mydisk文件夹，挂载到本地的/mnt/Debian-NFS文件夹 10.10.10.245:/mnt/mydisk /mnt/Debian-NFS nfs nofail,x-systemd.device-timeout=15s 0 0 EOF # 追加一条，挂载Debian服务器NFS reboot 四 、取消挂载命令 1 、查看NFS挂载目录 1 df -hT /mnt/* NFS挂载目录详情 文件系统 类型 大小 已用 可用 已用% 挂载点 10.10.10.251:/mnt/mydisk nfs 2.7T 1.8T 823G 69% /mnt/ARS2-NFS 10.10.10.254:/mnt/ntfs nfs 932G 216G 717G 24% /mnt/PVE-NFS 10.10.10.247:/mnt/mydisk nfs 16G 7.9G 6.9G 54% /mnt/Ubuntu-NFS 2 、取消挂载命令 1 umount /mnt/ARS2-NFS \u0026amp;\u0026amp; df -hT /mnt/* # 这些是本地目录 五 、查看NFS共享目录 1 、查看客户端NFS共享 1 showmount -e 10.10.10.254 # 客户端查看NFS共享 2 、查看本机NFS共享目录 1 showmount -e # 本机查看NFS共享 3 、查看所有的NFS服务器挂载目录 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 touch ./check_nfs_shares.sh \u0026amp;\u0026amp; cat \u0026gt; ./check_nfs_shares.sh \u0026lt;\u0026lt;EOF #!/bin/bash echo -e \u0026#34;-----------------------\u0026#34; echo -e \u0026#34;\\E[1;31m$(showmount -e 10.10.10.242 | sed \u0026#39;s/^Export list for //\u0026#39;)\\E[0m\u0026#34; echo -e \u0026#34;-----------------------\u0026#34; echo -e \u0026#34;\\E[1;31m$(showmount -e 10.10.10.252 | sed \u0026#39;s/^Export list for //\u0026#39;)\\E[0m\u0026#34; echo -e \u0026#34;-----------------------\u0026#34; echo -e \u0026#34;\\E[1;31m$(showmount -e 10.10.10.243 | sed \u0026#39;s/^Export list for //\u0026#39;)\\E[0m\u0026#34; echo -e \u0026#34;-----------------------\u0026#34; echo -e \u0026#34;\\E[1;31m$(showmount -e 10.10.10.254 | sed \u0026#39;s/^Export list for //\u0026#39;)\\E[0m\u0026#34; echo -e \u0026#34;-----------------------\u0026#34; echo -e \u0026#34;\\E[1;31m$(showmount -e 10.10.10.251 | sed \u0026#39;s/^Export list for //\u0026#39;)\\E[0m\u0026#34; echo -e \u0026#34;-----------------------\u0026#34; echo -e \u0026#34;\\E[1;31m$(showmount -e 10.10.10.245 | sed \u0026#39;s/^Export list for //\u0026#39;)\\E[0m\u0026#34; echo -e \u0026#34;-----------------------\u0026#34; echo -e \u0026#34;\\E[1;31m$(showmount -e 10.10.10.246 | sed \u0026#39;s/^Export list for //\u0026#39;)\\E[0m\u0026#34; echo -e \u0026#34;-----------------------\u0026#34; echo -e \u0026#34;\\E[1;31m$(showmount -e 10.10.10.247 | sed \u0026#39;s/^Export list for //\u0026#39;)\\E[0m\u0026#34; echo -e \u0026#34;-----------------------\u0026#34; EOF chmod +x ./check_nfs_shares.sh \u0026amp;\u0026amp; ./check_nfs_shares.sh ","date":"2025-01-29T17:50:47+08:00","image":"https://file.meimolihan.eu.org/img/alpine-02.jpg","permalink":"https://meimolihan.eu.org/p/alpine-%E9%85%8D%E7%BD%AE-nfs-%E6%9C%8D%E5%8A%A1/","title":"Alpine 配置 NFS 服务"},{"content":" Ubuntu 配置 NFS 服务 科技lion一键脚本工具 1 sudo curl -sS -O https://kejilion.pro/kejilion.sh \u0026amp;\u0026amp; chmod +x kejilion.sh \u0026amp;\u0026amp; ./kejilion.sh 2 .安装NFS客户端软件\n1 sudo apt update \u0026amp;\u0026amp; sudo apt install nfs-kernel-server nfs-common -y 一、Ubuntu为服务端，NFS的配置 1 、挂载/mnt/mydisk为共享目录 1 2 3 4 5 6 sudo mkdir -pm 755 /mnt/mydisk \u0026amp;\u0026amp; sudo chmod +x /etc/exports \u0026amp;\u0026amp; sudo cat \u0026gt; /etc/exports \u0026lt;\u0026lt;\u0026#39;EOF\u0026#39; ## 挂载/mnt/mydisk为共享目录 /mnt/mydisk *(rw,fsid=0,no_subtree_check,no_root_squash,insecure,sync) EOF sudo exportfs -r ## 让编辑生效命令 2 、重启nfs服务器 1 sudo service nfs-kernel-server restart ## 重启nfs服务器 或者 1 sudo /etc/init.d/nfs-kernel-server restart ## 重启nfs服务器 二、Ubuntu为客户端，NFS的配置 挂载10.10.10.251服务器的/mnt/mydisk目录，为本地/mnt/mydisk/NFS/ARS2\n1、临时挂载NFS服务 1 2 3 4 5 6 7 8 ## 临时挂载10.10.10.251服务器的/mnt/mydisk文件夹，挂载到本地的/mnt/ARS2-NFS文件夹 mkdir -pm 755 /mnt/ARS2-NFS \u0026amp;\u0026amp; chmod +x /etc/exports \u0026amp;\u0026amp; mount -t nfs -o rw 10.10.10.251:/mnt/mydisk /mnt/ARS2-NFS \u0026amp;\u0026amp; df -hT /mnt/* ## 临时挂载10.10.10.254服务器的/mnt/ntfs文件夹，挂载到本地的/mnt/PVE-NFS文件夹 mkdir -pm 755 /mnt/PVE-NFS \u0026amp;\u0026amp; chmod +x /etc/exports \u0026amp;\u0026amp; mount -t nfs -o rw 10.10.10.254:/mnt/ntfs /mnt/PVE-NFS \u0026amp;\u0026amp; df -hT /mnt/* ## 临时挂载10.10.10.245服务器的/mnt/mydisk文件夹，挂载到本地的/mnt/Debian-NFS文件夹 mkdir -pm 755 /mnt/Debian-NFS \u0026amp;\u0026amp; chmod +x /etc/exports \u0026amp;\u0026amp; mount -t nfs -o rw 10.10.10.247:/mnt/mydisk /mnt/Debian-NFS \u0026amp;\u0026amp; df -hT /mnt/* 2、永久挂载NFS服务 方法 1、覆盖NFS配置文件/etc/fstab\n1 2 3 4 5 6 7 8 9 sudo mkdir -pm 755 /mnt/ARS2-NFS /mnt/PVE-NFS /mnt/Debian-NFS \u0026amp;\u0026amp; sudo chmod +x /etc/exports \u0026amp;\u0026amp; sudo cat \u0026gt; /etc/fstab \u0026lt;\u0026lt;\u0026#39;EOF\u0026#39; 10.10.10.251:/mnt/mydisk /mnt/ARS2-NFS nfs nofail,x-systemd.device-timeout=15s 0 0 10.10.10.254:/mnt/ntfs /mnt/PVE-NFS nfs nofail,x-systemd.device-timeout=15s 0 0 10.10.10.245:/mnt/mydisk /mnt/Debian-NFS nfs nofail,x-systemd.device-timeout=15s 0 0 EOF sudo reboot 方法 2、追加NFS配置文件/etc/fstab\n1 2 3 4 5 6 sudo mkdir -pm 755 /mnt/Alpine-NFS \u0026amp;\u0026amp; sudo chmod +x /etc/exports \u0026amp;\u0026amp; sudo cat \u0026gt;\u0026gt;/etc/fstab \u0026lt;\u0026lt;\u0026#39;EOF\u0026#39; # 追加一条，挂载Alpine服务器NFS 10.10.10.242:/mnt/mydisk /mnt/Alpine-NFS nfs nofail,x-systemd.device-timeout=15s 0 0 EOF sudo reboot 三、取消挂载命令 1 、查看NFS挂载目录 1 df -hT /mnt/* 挂载目录详情 文件系统 类型 大小 已用 可用 已用% 挂载点 10.10.10.251:/mnt/mydisk nfs 2.7T 1.8T 823G 69% /mnt/ARS2-NFS 10.10.10.254:/mnt/ntfs nfs 932G 216G 717G 24% /mnt/PVE-NFS 10.10.10.247:/mnt/mydisk nfs 16G 7.9G 6.9G 54% /mnt/Ubuntu-NFS 2 、取消挂载命令 1 sudo umount /mnt/ARS2-NFS \u0026amp;\u0026amp; sudo df -hT /mnt/* # 这些是本地目录 四 、查看NFS共享目录 1、查看客户端NFS共享 1 sudo showmount -e 10.10.10.254 # 客户端查看NFS共享 2 、查看本机NFS共享目录 1 sudo showmount -e # 本机查看NFS共享 3 、查看所有NFS服务器挂载目录 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 touch ./check_nfs_shares.sh \u0026amp;\u0026amp; cat \u0026gt; ./check_nfs_shares.sh \u0026lt;\u0026lt;EOF #!/bin/bash echo -e \u0026#34;-----------------------\u0026#34; echo -e \u0026#34;\\E[1;31m$(showmount -e 10.10.10.242 | sed \u0026#39;s/^Export list for //\u0026#39;)\\E[0m\u0026#34; echo -e \u0026#34;-----------------------\u0026#34; echo -e \u0026#34;\\E[1;31m$(showmount -e 10.10.10.252 | sed \u0026#39;s/^Export list for //\u0026#39;)\\E[0m\u0026#34; echo -e \u0026#34;-----------------------\u0026#34; echo -e \u0026#34;\\E[1;31m$(showmount -e 10.10.10.243 | sed \u0026#39;s/^Export list for //\u0026#39;)\\E[0m\u0026#34; echo -e \u0026#34;-----------------------\u0026#34; echo -e \u0026#34;\\E[1;31m$(showmount -e 10.10.10.254 | sed \u0026#39;s/^Export list for //\u0026#39;)\\E[0m\u0026#34; echo -e \u0026#34;-----------------------\u0026#34; echo -e \u0026#34;\\E[1;31m$(showmount -e 10.10.10.251 | sed \u0026#39;s/^Export list for //\u0026#39;)\\E[0m\u0026#34; echo -e \u0026#34;-----------------------\u0026#34; echo -e \u0026#34;\\E[1;31m$(showmount -e 10.10.10.245 | sed \u0026#39;s/^Export list for //\u0026#39;)\\E[0m\u0026#34; echo -e \u0026#34;-----------------------\u0026#34; echo -e \u0026#34;\\E[1;31m$(showmount -e 10.10.10.246 | sed \u0026#39;s/^Export list for //\u0026#39;)\\E[0m\u0026#34; echo -e \u0026#34;-----------------------\u0026#34; echo -e \u0026#34;\\E[1;31m$(showmount -e 10.10.10.247 | sed \u0026#39;s/^Export list for //\u0026#39;)\\E[0m\u0026#34; echo -e \u0026#34;-----------------------\u0026#34; EOF chmod +x ./check_nfs_shares.sh \u0026amp;\u0026amp; ./check_nfs_shares.sh ","date":"2025-01-29T17:46:51+08:00","image":"https://file.meimolihan.eu.org/img/ubuntu-03.jpg","permalink":"https://meimolihan.eu.org/p/ubuntu%E9%85%8D%E7%BD%AEnfs%E6%9C%8D%E5%8A%A1/","title":"Ubuntu配置NFS服务"},{"content":" CentOS-stream9 配置 NFS 服务 前言： 科技lion一键脚本工具\n1 sudo curl -sS -O https://kejilion.pro/kejilion.sh \u0026amp;\u0026amp; chmod +x kejilion.sh \u0026amp;\u0026amp; ./kejilion.sh 安装NFS依赖包+启动NFS服务+开机自启动NFS服务+NFS状态查看 1 yum clean all; yum -y install nfs-utils rpcbind; yum clean all; yum -y install nfs-utils rpcbind; systemctl status rpcbind.service; systemctl status rpcbind.service 一、CentOS 9_服务端NFS配置 1 2 3 4 5 6 7 mkdir -pm 755 /mnt/mydisk \u0026amp;\u0026amp; chmod +x /etc/exports \u0026amp;\u0026amp; cat \u0026gt; /etc/exports \u0026lt;\u0026lt;\u0026#39;EOF\u0026#39; ## 覆盖/etc/exports内容 ## NFS 共享将被挂载到 /mnt/mydisk 目录，并赋予相关权限 /mnt/mydisk *(rw,fsid=0,no_subtree_check,no_root_squash,insecure,sync) EOF ## 让编辑生效命令+重启NFS服务 exportfs -r \u0026amp;\u0026amp; systemctl restart nfs-server.service 二、CentOS 9客户端NFS配置 1、临时挂载NFS服务 1 2 3 4 5 6 7 8 9 10 11 ## 临时挂载10.10.10.251服务器的/mnt/mydisk文件夹，挂载到本地的/mnt/ARS2-NFS文件夹 mkdir -pm 755 /mnt/ARS2-NFS \u0026amp;\u0026amp; chmod +x /etc/exports \u0026amp;\u0026amp; mount -t nfs -o rw 10.10.10.251:/mnt/mydisk /mnt/ARS2-NFS \u0026amp;\u0026amp; df -hT /mnt/* ## 临时挂载10.10.10.254服务器的/mnt/ntfs文件夹，挂载到本地的/mnt/PVE-NFS文件夹 mkdir -pm 755 /mnt/PVE-NFS \u0026amp;\u0026amp; chmod +x /etc/exports \u0026amp;\u0026amp; mount -t nfs -o rw 10.10.10.254:/mnt/ntfs /mnt/PVE-NFS \u0026amp;\u0026amp; df -hT /mnt/* ## 临时挂载10.10.10.245服务器的/mnt/mydisk文件夹，挂载到本地的/mnt/Debian-NFS文件夹 mkdir -pm 755 /mnt/Debian-NFS \u0026amp;\u0026amp; chmod +x /etc/exports \u0026amp;\u0026amp; mount -t nfs -o rw 10.10.10.247:/mnt/mydisk /mnt/Debian-NFS \u0026amp;\u0026amp; df -hT /mnt/* ## 临时挂载10.10.10.247服务器的/mnt/mydisk文件夹，挂载到本地的/mnt/Ubuntu-NFS文件夹 mkdir -pm 755 /mnt/Ubuntu-NFS \u0026amp;\u0026amp; chmod +x /etc/exports \u0026amp;\u0026amp; mount -t nfs -o rw 10.10.10.247:/mnt/mydisk /mnt/Ubuntu-NFS \u0026amp;\u0026amp; df -hT /mnt/* 2、永久挂载NFS服务 方法 1、覆盖NFS配置文件/etc/fstab 1 2 3 4 5 6 7 8 9 10 11 12 13 mkdir -pm 755 /mnt/ARS2-NFS /mnt/PVE-NFS /mnt/Debian-NFS \u0026amp;\u0026amp; chmod +x /etc/exports \u0026amp;\u0026amp; cat \u0026gt; /etc/fstab \u0026lt;\u0026lt;\u0026#39;EOF\u0026#39; ## 覆盖/etc/fstab文件 ## 将10.10.10.251服务器的/mnt/mydisk文件夹，挂载到本地的/mnt/ARS2-NFS文件夹 10.10.10.251:/mnt/mydisk /mnt/ARS2-NFS nfs nofail,x-systemd.device-timeout=15s 0 0 ## 将10.10.10.254服务器的/mnt/ntfs文件夹，挂载到本地的/mnt/PVE-NFS文件夹 10.10.10.254:/mnt/ntfs /mnt/PVE-NFS nfs nofail,x-systemd.device-timeout=15s 0 0 ## 将10.10.10.245服务器的/mnt/mydisk文件夹，挂载到本地的/mnt/Debian-NFS文件夹 10.10.10.245:/mnt/mydisk /mnt/Debian-NFS nfs nofail,x-systemd.device-timeout=15s 0 0 EOF # 覆盖/etc/fstab文件 reboot 方法 2、追加NFS配置文件/etc/fstab 1 2 3 4 5 6 7 mkdir -pm 755 /mnt/ARS2-NFS \u0026amp;\u0026amp; chmod +x /etc/exports \u0026amp;\u0026amp; cat \u0026gt;\u0026gt;/etc/fstab \u0026lt;\u0026lt;EOF ## 追加一条，挂载ARS2服务器NFS ## 将10.10.10.251服务器的/mnt/mydisk文件夹，挂载到本地的/mnt/ARS2-NFS文件夹 10.10.10.251:/mnt/mydisk /mnt/ARS2-NFS nfs nofail,x-systemd.device-timeout=15s 0 0 EOF reboot 三、取消挂载命令 1 、查看NFS挂载目录 1 df -hT /mnt/* NFS挂载目录详情 |:\u0026mdash;:|:\u0026mdash;:|:\u0026mdash;:|:\u0026mdash;:|:\u0026mdash;:|:\u0026mdash;:|:\u0026mdash;:| |文件系统|类型 |大小|已用|可用|已用%|挂载点| |10.10.10.251:/mnt/mydisk | nfs| 2.7T| 1.8T | 823G| 69% | /mnt/ARS2-NFS| |10.10.10.254:/mnt/ntfs| nfs | 932G| 216G | 717G| 24% | /mnt/PVE-NFS| |10.10.10.247:/mnt/mydisk| nfs| 16G | 7.9G| 6.9G | 54%| /mnt/Ubuntu-NFS|\n2 、取消挂载命令 1 umount /mnt/ARS2-NFS \u0026amp;\u0026amp; df -hT /mnt/* # 这些是本地目录 四 、查看NFS共享目录 1、查看客户端NFS共享 1 showmount -e 10.10.10.254 # 客户端查看NFS共享 2 、查看本机NFS共享目录 1 showmount -e # 本机查看NFS共享 3 、查看所有NFS服务器挂载目录 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 touch ./check_nfs_shares.sh \u0026amp;\u0026amp; cat \u0026gt; ./check_nfs_shares.sh \u0026lt;\u0026lt;EOF #!/bin/bash echo -e \u0026#34;-----------------------\u0026#34; echo -e \u0026#34;\\E[1;31m$(showmount -e 10.10.10.242 | sed \u0026#39;s/^Export list for //\u0026#39;)\\E[0m\u0026#34; echo -e \u0026#34;-----------------------\u0026#34; echo -e \u0026#34;\\E[1;31m$(showmount -e 10.10.10.252 | sed \u0026#39;s/^Export list for //\u0026#39;)\\E[0m\u0026#34; echo -e \u0026#34;-----------------------\u0026#34; echo -e \u0026#34;\\E[1;31m$(showmount -e 10.10.10.243 | sed \u0026#39;s/^Export list for //\u0026#39;)\\E[0m\u0026#34; echo -e \u0026#34;-----------------------\u0026#34; echo -e \u0026#34;\\E[1;31m$(showmount -e 10.10.10.254 | sed \u0026#39;s/^Export list for //\u0026#39;)\\E[0m\u0026#34; echo -e \u0026#34;-----------------------\u0026#34; echo -e \u0026#34;\\E[1;31m$(showmount -e 10.10.10.251 | sed \u0026#39;s/^Export list for //\u0026#39;)\\E[0m\u0026#34; echo -e \u0026#34;-----------------------\u0026#34; echo -e \u0026#34;\\E[1;31m$(showmount -e 10.10.10.245 | sed \u0026#39;s/^Export list for //\u0026#39;)\\E[0m\u0026#34; echo -e \u0026#34;-----------------------\u0026#34; echo -e \u0026#34;\\E[1;31m$(showmount -e 10.10.10.246 | sed \u0026#39;s/^Export list for //\u0026#39;)\\E[0m\u0026#34; echo -e \u0026#34;-----------------------\u0026#34; echo -e \u0026#34;\\E[1;31m$(showmount -e 10.10.10.247 | sed \u0026#39;s/^Export list for //\u0026#39;)\\E[0m\u0026#34; echo -e \u0026#34;-----------------------\u0026#34; EOF chmod +x ./check_nfs_shares.sh \u0026amp;\u0026amp; ./check_nfs_shares.sh ","date":"2025-01-29T17:42:36+08:00","image":"https://file.meimolihan.eu.org/img/centos-03.jpg","permalink":"https://meimolihan.eu.org/p/centos-%E9%85%8D%E7%BD%AE-nfs-%E6%9C%8D%E5%8A%A1/","title":"CentOS 配置 NFS 服务"},{"content":" Debian 配置NFS 服务 科技lion一键脚本工具 1 sudo curl -sS -O https://kejilion.pro/kejilion.sh \u0026amp;\u0026amp; chmod +x kejilion.sh \u0026amp;\u0026amp; ./kejilion.sh 安装NFS客户端软件 1 sudo apt update \u0026amp;\u0026amp; sudo apt install nfs-kernel-server nfs-common -y 一、Debian为服务端，NFS的配置 1 、挂载/mnt/mydisk为共享目录 1 2 3 4 5 6 sudo mkdir -pm 755 /mnt/mydisk \u0026amp;\u0026amp; sudo chmod +x /etc/exports \u0026amp;\u0026amp; sudo cat \u0026gt; /etc/exports \u0026lt;\u0026lt;\u0026#39;EOF\u0026#39; ## 挂载/mnt/mydisk为共享目录 /mnt/mydisk *(rw,fsid=0,no_subtree_check,no_root_squash,insecure,sync) EOF sudo exportfs -r ## 让编辑生效命令 2 、重启nfs服务器 1 sudo service nfs-kernel-server restart ## 重启nfs服务器 或者 1 sudo /etc/init.d/nfs-kernel-server restart ## 重启nfs服务器 二、Debian为客户端，NFS的配置 挂载10.10.10.251服务器的/mnt/mydisk目录，为本地/mnt/mydisk/NFS/ARS2\n1、临时挂载NFS服务 1 2 3 4 5 6 7 8 ## 临时挂载10.10.10.251服务器的/mnt/mydisk文件夹，挂载到本地的/mnt/ARS2-NFS文件夹 mkdir -pm 755 /mnt/ARS2-NFS \u0026amp;\u0026amp; chmod +x /etc/exports \u0026amp;\u0026amp; mount -t nfs -o rw 10.10.10.251:/mnt/mydisk /mnt/ARS2-NFS \u0026amp;\u0026amp; df -hT /mnt/* ## 临时挂载10.10.10.254服务器的/mnt/ntfs文件夹，挂载到本地的/mnt/PVE-NFS文件夹 mkdir -pm 755 /mnt/PVE-NFS \u0026amp;\u0026amp; chmod +x /etc/exports \u0026amp;\u0026amp; mount -t nfs -o rw 10.10.10.254:/mnt/ntfs /mnt/PVE-NFS \u0026amp;\u0026amp; df -hT /mnt/* ## 临时挂载10.10.10.245服务器的/mnt/mydisk文件夹，挂载到本地的/mnt/Debian-NFS文件夹 mkdir -pm 755 /mnt/Debian-NFS \u0026amp;\u0026amp; chmod +x /etc/exports \u0026amp;\u0026amp; mount -t nfs -o rw 10.10.10.247:/mnt/mydisk /mnt/Debian-NFS \u0026amp;\u0026amp; df -hT /mnt/* 2、永久挂载NFS服务 方法 1、覆盖NFS配置文件/etc/fstab\n1 2 3 4 5 6 7 8 9 sudo mkdir -pm 755 /mnt/ARS2-NFS /mnt/PVE-NFS /mnt/Debian-NFS \u0026amp;\u0026amp; sudo chmod +x /etc/exports \u0026amp;\u0026amp; sudo cat \u0026gt; /etc/fstab \u0026lt;\u0026lt;\u0026#39;EOF\u0026#39; 10.10.10.251:/mnt/mydisk /mnt/ARS2-NFS nfs nofail,x-systemd.device-timeout=15s 0 0 10.10.10.254:/mnt/ntfs /mnt/PVE-NFS nfs nofail,x-systemd.device-timeout=15s 0 0 10.10.10.245:/mnt/mydisk /mnt/Debian-NFS nfs nofail,x-systemd.device-timeout=15s 0 0 EOF sudo reboot 方法 2、追加NFS配置文件/etc/fstab\n1 2 3 4 5 6 sudo mkdir -pm 755 /mnt/Alpine-NFS \u0026amp;\u0026amp; sudo chmod +x /etc/exports \u0026amp;\u0026amp; sudo cat \u0026gt;\u0026gt;/etc/fstab \u0026lt;\u0026lt;\u0026#39;EOF\u0026#39; # 追加一条，挂载Alpine服务器NFS 10.10.10.242:/mnt/mydisk /mnt/Alpine-NFS nfs nofail,x-systemd.device-timeout=15s 0 0 EOF sudo reboot 三、取消挂载命令 1 、查看NFS挂载目录 1 df -hT /mnt/* 挂载目录详情 文件系统 类型 大小 已用 可用 已用% 挂载点 10.10.10.251:/mnt/mydisk nfs 2.7T 1.8T 823G 69% /mnt/ARS2-NFS 10.10.10.254:/mnt/ntfs nfs 932G 216G 717G 24% /mnt/PVE-NFS 10.10.10.247:/mnt/mydisk nfs 16G 7.9G 6.9G 54% /mnt/Ubuntu-NFS 2 、取消挂载命令 1 sudo umount /mnt/ARS2-NFS \u0026amp;\u0026amp; sudo df -hT /mnt/* # 这些是本地目录 四 、查看NFS共享目录 1、查看客户端NFS共享 1 sudo showmount -e 10.10.10.254 # 客户端查看NFS共享 2 、查看本机NFS共享目录 1 sudo showmount -e # 本机查看NFS共享 3 、查看所有NFS服务器挂载目录 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 touch ./check_nfs_shares.sh \u0026amp;\u0026amp; cat \u0026gt; ./check_nfs_shares.sh \u0026lt;\u0026lt;EOF #!/bin/bash echo -e \u0026#34;-----------------------\u0026#34; echo -e \u0026#34;\\E[1;31m$(showmount -e 10.10.10.242 | sed \u0026#39;s/^Export list for //\u0026#39;)\\E[0m\u0026#34; echo -e \u0026#34;-----------------------\u0026#34; echo -e \u0026#34;\\E[1;31m$(showmount -e 10.10.10.252 | sed \u0026#39;s/^Export list for //\u0026#39;)\\E[0m\u0026#34; echo -e \u0026#34;-----------------------\u0026#34; echo -e \u0026#34;\\E[1;31m$(showmount -e 10.10.10.243 | sed \u0026#39;s/^Export list for //\u0026#39;)\\E[0m\u0026#34; echo -e \u0026#34;-----------------------\u0026#34; echo -e \u0026#34;\\E[1;31m$(showmount -e 10.10.10.254 | sed \u0026#39;s/^Export list for //\u0026#39;)\\E[0m\u0026#34; echo -e \u0026#34;-----------------------\u0026#34; echo -e \u0026#34;\\E[1;31m$(showmount -e 10.10.10.251 | sed \u0026#39;s/^Export list for //\u0026#39;)\\E[0m\u0026#34; echo -e \u0026#34;-----------------------\u0026#34; echo -e \u0026#34;\\E[1;31m$(showmount -e 10.10.10.245 | sed \u0026#39;s/^Export list for //\u0026#39;)\\E[0m\u0026#34; echo -e \u0026#34;-----------------------\u0026#34; echo -e \u0026#34;\\E[1;31m$(showmount -e 10.10.10.246 | sed \u0026#39;s/^Export list for //\u0026#39;)\\E[0m\u0026#34; echo -e \u0026#34;-----------------------\u0026#34; echo -e \u0026#34;\\E[1;31m$(showmount -e 10.10.10.247 | sed \u0026#39;s/^Export list for //\u0026#39;)\\E[0m\u0026#34; echo -e \u0026#34;-----------------------\u0026#34; EOF chmod +x ./check_nfs_shares.sh \u0026amp;\u0026amp; ./check_nfs_shares.sh ","date":"2025-01-29T17:34:47+08:00","image":"https://file.meimolihan.eu.org/img/debian-05.jpg","permalink":"https://meimolihan.eu.org/p/debian%E9%85%8D%E7%BD%AEnfs%E6%9C%8D%E5%8A%A1/","title":"Debian配置NFS服务"},{"content":" pve 配置NFS 使用PVE作为NAS，需将本地硬盘挂载到宿主机下的共享目录：\nmount -t 硬盘文件系统类型 /dev/硬盘分区编号 /PVE内的共享目录路径，例如\nmount -t ext4 /dev/sda2 /mnt/pve/share\n如果是使用LXC作为NAS，则需提前映射本地硬盘到容器内的共享目录：\npct set LXC容器ID -mpX /dev/硬盘分区编号,mp=LXC容器内的共享目录路径，例如：\npct set 100 -mp0 /dev/sda2,mp=/mnt/share\n一、PVE为服务端，NFS的配置 1、服务器安装NFS服务 1 apt-get install nfs-kernel-server 2 、检查 NFS 服务状态 1 sudo systemctl status nfs-kernel-server 3、创建共享目录赋予读写权限+新建exports文件 1 2 3 4 5 6 7 8 9 mkdir -pm 755 /mnt/ntfs \u0026amp;\u0026amp; touch /etc/exports \u0026amp;\u0026amp; chmod +x /etc/exports \u0026amp;\u0026amp; cat \u0026gt; /etc/exports \u0026lt;\u0026lt;EOF ## 挂载/mnt/ntfs为共享命令 /mnt/ntfs *(rw,fsid=0,no_subtree_check,no_root_squash,insecure,sync) /mnt/mydisk *(rw,fsid=0,no_subtree_check,no_root_squash,insecure,sync) EOF exportfs -rv \u0026amp;\u0026amp; /etc/init.d/nfs-kernel-server start ## nfs开机自启 二 、PVE为客户端，NFS的配置 1 、PVE查看NFS挂载目录 1 showmount -e 10.10.10.251 # 客户端查看NFS共享 或者在服务端执行命令查看NFS共享目录\n1 showmount -e # 本机查看NFS共享 2 、PVE_web配置NFS 3 、查看所有NFS服务器挂载目录 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 touch ./check_nfs_shares.sh \u0026amp;\u0026amp; cat \u0026gt; ./check_nfs_shares.sh \u0026lt;\u0026lt;EOF #!/bin/bash echo -e \u0026#34;-----------------------\u0026#34; echo -e \u0026#34;\\E[1;31m$(showmount -e 10.10.10.242 | sed \u0026#39;s/^Export list for //\u0026#39;)\\E[0m\u0026#34; echo -e \u0026#34;-----------------------\u0026#34; echo -e \u0026#34;\\E[1;31m$(showmount -e 10.10.10.252 | sed \u0026#39;s/^Export list for //\u0026#39;)\\E[0m\u0026#34; echo -e \u0026#34;-----------------------\u0026#34; echo -e \u0026#34;\\E[1;31m$(showmount -e 10.10.10.243 | sed \u0026#39;s/^Export list for //\u0026#39;)\\E[0m\u0026#34; echo -e \u0026#34;-----------------------\u0026#34; echo -e \u0026#34;\\E[1;31m$(showmount -e 10.10.10.254 | sed \u0026#39;s/^Export list for //\u0026#39;)\\E[0m\u0026#34; echo -e \u0026#34;-----------------------\u0026#34; echo -e \u0026#34;\\E[1;31m$(showmount -e 10.10.10.251 | sed \u0026#39;s/^Export list for //\u0026#39;)\\E[0m\u0026#34; echo -e \u0026#34;-----------------------\u0026#34; echo -e \u0026#34;\\E[1;31m$(showmount -e 10.10.10.245 | sed \u0026#39;s/^Export list for //\u0026#39;)\\E[0m\u0026#34; echo -e \u0026#34;-----------------------\u0026#34; echo -e \u0026#34;\\E[1;31m$(showmount -e 10.10.10.246 | sed \u0026#39;s/^Export list for //\u0026#39;)\\E[0m\u0026#34; echo -e \u0026#34;-----------------------\u0026#34; echo -e \u0026#34;\\E[1;31m$(showmount -e 10.10.10.247 | sed \u0026#39;s/^Export list for //\u0026#39;)\\E[0m\u0026#34; echo -e \u0026#34;-----------------------\u0026#34; EOF chmod +x ./check_nfs_shares.sh \u0026amp;\u0026amp; ./check_nfs_shares.sh ","date":"2025-01-29T17:24:55+08:00","image":"https://file.meimolihan.eu.org/img/pve-03.jpg","permalink":"https://meimolihan.eu.org/p/pve%E9%85%8D%E7%BD%AEnfs%E6%9C%8D%E5%8A%A1/","title":"Pve配置NFS服务"},{"content":" 博客添加友情链接 halo 博客添加友情链接 需要安装【 链接管理 】插件\n源码仓库： https://github.com/halo-sigs/plugin-links 修改halo配置文件：config\\halo2\\themes\\theme-Joe3\\theme.yaml\ndescription: 友链模板\nscreenshot:\nfile: page_links.html 修改为 file: links.html\n修改halo配置文件：config\\halo2\\themes\\theme-Joe3\\templates\\page_links.html\npage_links.html 修改为 links.html\ntypecho 博客添加友情链接 进入typecho后台\u0026ndash;\u0026gt;管理\u0026ndash;\u0026gt;管理独立页面\u0026ndash;\u0026gt;新增\n新建标题为【友情链接】的文章，输入以下内容 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 ## 教程: \u0026lt;ul class=\u0026#34;flinks\u0026#34;\u0026gt; \u0026lt;li\u0026gt;凡凡小站\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;https://meimolihan.github.io\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;https://blog.org:666/mobufan/mobufan.gif\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; ## GitHub \u0026lt;ul class=\u0026#34;flinks\u0026#34;\u0026gt; \u0026lt;li\u0026gt;GitHub\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;https://github.com/meimolihan\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;https://blog.mobufan.eu.org:666/mobufan/mobufan-01.jpg\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; !!! \u0026lt;script\u0026gt;document.querySelectorAll(\u0026#39;ul.flinks\u0026#39;).forEach(function(e){let a=e;if(a){let ns=a.querySelectorAll(\u0026#34;li\u0026#34;);let str=\u0026#39;\u0026lt;div style=\u0026#34;display:inline-block;\u0026#34;\u0026gt;\u0026#39;;let bgid=0;const bgs=[\u0026#34;bg-white\u0026#34;,\u0026#34;bg-grey\u0026#34;,\u0026#34;bg-deepgrey\u0026#34;,\u0026#34;bg-blue\u0026#34;,\u0026#34;bg-purple\u0026#34;,\u0026#34;bg-green\u0026#34;,\u0026#34;bg-yellow\u0026#34;,\u0026#34;bg-red\u0026#34;,\u0026#34;bg-orange\u0026#34;];for(let i=0;i\u0026lt;ns.length;i+=4){str+=(`\u0026lt;div class=\u0026#34;flink-item ${bgs[Math.floor(Math.random() * 9)]}\u0026#34;\u0026gt;\u0026lt;div class=\u0026#34;flink-title\u0026#34;\u0026gt;\u0026lt;a href=\u0026#34;${ns[i+1].innerText}\u0026#34;target=\u0026#34;_blank\u0026#34;rel=\u0026#34;external nofollow ugc\u0026#34;\u0026gt;${ns[i].innerText}\u0026lt;/a\u0026gt;\u0026lt;/div\u0026gt;\u0026lt;div class=\u0026#34;flink-link\u0026#34;\u0026gt;\u0026lt;div class=\u0026#34;flink-link-ico\u0026#34;style=\u0026#34;background: url(${ns[i+2].innerText});background-size: 42px auto;\u0026#34;\u0026gt;\u0026lt;/div\u0026gt;\u0026lt;div class=\u0026#34;flink-link-text\u0026#34;\u0026gt;${ns[i+3].innerText}\u0026lt;/div\u0026gt;\u0026lt;/div\u0026gt;\u0026lt;/div\u0026gt;`)}str+=`\u0026lt;/div\u0026gt;`;let n1=document.createElement(\u0026#34;div\u0026#34;);n1.innerHTML=str;a.parentNode.insertBefore(n1,a);a.style=\u0026#34;display: none;\u0026#34;}else{console.log(\u0026#39;No such id \u0026#34;flinks\u0026#34;\u0026#39;)}});\u0026lt;/script\u0026gt; \u0026lt;style\u0026gt;.flink-item{width:300px;height:100px;position:relative;margin:10px;background-color:#fff;border-radius:3px;float:left}.flink-title{left:25px;top:25px;position:absolute}.flink-title a{font-size:17px;color:#f1f1f1;line-height:17px;word-break:break-all;text-decoration:none;outline:0}.flink-link{right:0;bottom:0;padding:0 15px 15px;position:absolute;text-align:center}.flink-link-text{font-size:12px;color:#f1f1f1}.flink-link-ico{display:inline-block;width:42px;height:42px;border-radius:50%}.bg-white{background-color:#fff!important}.bg-grey{background-color:#f7f7f7!important}.bg-deepgrey{background-color:rgba(0,0,0,.5)!important}.bg-blue{background-color:#6fa3ef!important}.bg-purple{background-color:#bc99c4!important}.bg-green{background-color:#46c47c!important}.bg-yellow{background-color:#f9bb3c!important}.bg-red{background-color:#e8583d!important}.bg-orange{background-color:#f68e5f!important}\u0026lt;/style\u0026gt; !!! Typecho-Butterfly 主题添加友链 进入typecho后台\u0026ndash;\u0026gt;管理\u0026ndash;\u0026gt;管理独立页面\u0026ndash;\u0026gt;新增\n新建标题为【友情链接】的文章，输入以下内容 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 ## \u0026lt;i class=\u0026#34;fas fa-check-double\u0026#34; style=\u0026#34;color:#f66;padding-right:.4rem\u0026#34;\u0026gt;\u0026lt;/i\u0026gt; 这是html友链示例 !!! \u0026lt;div class=\u0026#34;flink-list\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;flink-list-item\u0026#34;\u0026gt; \u0026lt;a href=\u0026#34;修改网址\u0026#34; title=\u0026#34;修改标题\u0026#34; target=\u0026#34;_blank\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;flink-item-icon\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;修改图标\u0026#34; onerror=\u0026#34;this.onerror=null;this.src=\u0026#39;/img/friend_404.gif\u0026#39;\u0026#34; alt=\u0026#34;修改标题\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;flink-item-name\u0026#34;\u0026gt;修改标题\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;flink-item-desc\u0026#34; title=\u0026#34;修改描述\u0026#34;\u0026gt;修改描述\u0026lt;/div\u0026gt;\u0026lt;/a\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;flink-list-item\u0026#34;\u0026gt; \u0026lt;a href=\u0026#34;修改网址\u0026#34; title=\u0026#34;修改标题\u0026#34; target=\u0026#34;_blank\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;flink-item-icon\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;修改图标\u0026#34; onerror=\u0026#34;this.onerror=null;this.src=\u0026#39;/img/friend_404.gif\u0026#39;\u0026#34; alt=\u0026#34;修改标题2\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;flink-item-name\u0026#34;\u0026gt;修改标题2\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;flink-item-desc\u0026#34; title=\u0026#34;修改描述\u0026#34;\u0026gt;修改描述2\u0026lt;/div\u0026gt;\u0026lt;/a\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; !!! ## \u0026lt;i class=\u0026#34;fas fa-fan\u0026#34; style=\u0026#34;color:#0cc;padding-right:.4rem\u0026#34;\u0026gt;\u0026lt;/i\u0026gt; 这是html友链示例第二个分组 !!! \u0026lt;div class=\u0026#34;flink-list\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;flink-list-item\u0026#34;\u0026gt; \u0026lt;a href=\u0026#34;修改网址\u0026#34; title=\u0026#34;修改标题\u0026#34; target=\u0026#34;_blank\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;flink-item-icon\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;修改图标\u0026#34; onerror=\u0026#34;this.onerror=null;this.src=\u0026#39;/img/friend_404.gif\u0026#39;\u0026#34; alt=\u0026#34;修改标题\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;flink-item-name\u0026#34;\u0026gt;修改标题\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;flink-item-desc\u0026#34; title=\u0026#34;修改描述\u0026#34;\u0026gt;修改描述\u0026lt;/div\u0026gt;\u0026lt;/a\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;flink-list-item\u0026#34;\u0026gt; \u0026lt;a href=\u0026#34;修改网址\u0026#34; title=\u0026#34;修改标题\u0026#34; target=\u0026#34;_blank\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;flink-item-icon\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;修改图标\u0026#34; onerror=\u0026#34;this.onerror=null;this.src=\u0026#39;/img/friend_404.gif\u0026#39;\u0026#34; alt=\u0026#34;修改标题分组2\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;flink-item-name\u0026#34;\u0026gt;修改标题2\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;flink-item-desc\u0026#34; title=\u0026#34;修改描述\u0026#34;\u0026gt;修改描述分组2\u0026lt;/div\u0026gt;\u0026lt;/a\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; !!! ## \u0026lt;i class=\u0026#34;fas fa-font-awesome\u0026#34; style=\u0026#34;color:#008000;padding-right:.4rem\u0026#34;\u0026gt;\u0026lt;/i\u0026gt; 友情提示： [note type=\u0026#34;success flat no-icon\u0026#34;]你好啊，想申请友链按如下格式填写 ...网站名称 ...网站链接 ...网站头像 [/note] ## \u0026lt;i class=\u0026quot;fas fa-font-awesome\u0026quot; style=\u0026quot;color:#008000;padding-right:.4rem\u0026quot;\u0026gt;\u0026lt;/i\u0026gt; 友情提示：\n修改图标网站地址： https://fontawesome.com/search?o=r\u0026c=coding hugo 博客添加友情链接 hugo友情链接头像：content\\page\\links目录下 hugo主目录创建content\\page\\links\\index.md文件\n添加以下内容 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 --- hiddenFromSearch: true readingTime: false license: false title: 友链 contentEnd: false toc: false image: \u0026#34;https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/54de3f8d81a4f97fb1ac4dc06eaf3fda335a5937.webp\u0026#34; links: - title: GitHub description: 我的 GitHub website: https://github.com/meimolihan image: mobufan.gif menu: main: weight: -50 params: icon: link comments: false # 评论开关 --- ","date":"2025-01-29T15:51:10+08:00","image":"https://file.meimolihan.eu.org/img/links-01.jpg","permalink":"https://meimolihan.eu.org/p/%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0%E5%8F%8B%E6%83%85%E9%93%BE%E6%8E%A5/","title":"博客添加友情链接"},{"content":" windows 美化 cmd 官网： https://ohmyposh.dev/docs/themes 一 、安装终端 安装 Windows Terminal： https://github.com/microsoft/terminal/releases/tag/v1.21.2701.0 或者安装oh-my-posh（Windows自带终端就可以美化） windows应用商店搜索oh-my-posh安装\n二 、安装 Clink 官网下载： https://chrisant996.github.io/clink/ 发布页下载： https://github.com/chrisant996/clink/tags 三 、美化 CMD 1 、在Clink安装目录新建oh-my-posh.lua文件，下面是内容 我的路径：C:\\Installation directory\\clink\\oh-my-posh.lua 1 load(io.popen(\u0026#39;oh-my-posh init cmd\u0026#39;):read(\u0026#34;*a\u0026#34;))() 2.1 、修改主题 官网查看效果记录一下名字： https://ohmyposh.dev/docs/themes 去oh-my-posh安装目录：C:\\Users\\墨不凡\\AppData\\Local\\Programs\\oh-my-posh\\themes\\目录下有主题文件\n绝对路径：C:\\Users\\墨不凡\\AppData\\Local\\Programs\\oh-my-posh\\themes\\atomic.omp.json\n添加的内容：--config C:\\\\Users\\\\墨不凡\\\\AppData\\\\Local\\\\Programs\\\\oh-my-posh\\\\themes\\\\atomic.omp.json\n2.1 、在Clink安装目录新建oh-my-posh.lua文件，下面是内容 我的路径：C:\\Installation directory\\clink\\oh-my-posh.lua 1 load(io.popen(\u0026#39;oh-my-posh init cmd --config C:\\\\Users\\\\墨不凡\\\\AppData\\\\Local\\\\Programs\\\\oh-my-posh\\\\themes\\\\atomic.omp.json\u0026#39;):read(\u0026#34;*a\u0026#34;))() ","date":"2025-01-29T14:49:31+08:00","image":"https://file.meimolihan.eu.org/img/cmd-06.jpg","permalink":"https://meimolihan.eu.org/p/windows%E7%BE%8E%E5%8C%96cmd/","title":"Windows美化cmd"},{"content":" Windows 隐藏磁盘 一 、 参看磁盘详细信息 1 、Win10参看磁盘详细信息批处理，文本编辑保存为,bat批处理文件 如果不能运行，请手动给予管理员权限运行 1 2 3 4 5 6 7 8 9 10 11 12 @echo off %1 mshta vbscript:CreateObject(\u0026#34;Shell.Application\u0026#34;).ShellExecute(\u0026#34;cmd.exe\u0026#34;,\u0026#34;/c %~s0 ::\u0026#34;,\u0026#34;\u0026#34;,\u0026#34;runas\u0026#34;,1)(window.close)\u0026amp;\u0026amp;exit cd /d \u0026#34;%~dp0\u0026#34; rem 上面是bat批处理以管理员权限运行 rem 下面是参看磁盘详细信息的命令 echo list volume \u0026gt; commands.txt echo exit \u0026gt;\u0026gt; commands.txt diskpart /s commands.txt \u0026gt; output.txt type output.txt del commands.txt del output.txt pause 2 、Win11参看磁盘详细信息批处理，文本编辑保存为,bat批处理文件 如果不能运行，请手动给予管理员权限运行 1 2 3 4 5 6 7 8 9 10 11 12 13 @ echo off %1 %2 ver|find \u0026#34;5.\u0026#34;\u0026gt;nul\u0026amp;\u0026amp;goto :Admin mshta vbscript:createobject(\u0026#34;shell.application\u0026#34;).shellexecute(\u0026#34;%~s0\u0026#34;,\u0026#34;goto :Admin\u0026#34;,\u0026#34;\u0026#34;,\u0026#34;runas\u0026#34;,1)(window.close)\u0026amp;goto :eof :Admin rem 上面是bat批处理以管理员权限运行 rem 下面是参看磁盘详细信息的命令 echo list volume \u0026gt; commands.txt diskpart /s commands.txt \u0026gt; output.txt type output.txt del commands.txt del output.txt pause 二 、 Windows隐藏磁盘（数据不会丢失） 以上面查看到的【卷0】【R盘】为例 1 、Win10隐藏磁盘批处理，文本编辑保存为,bat批处理文件 如果不能运行，请手动给予管理员权限运行 1 2 3 4 5 6 7 8 9 10 11 12 13 @echo off %1 mshta vbscript:CreateObject(\u0026#34;Shell.Application\u0026#34;).ShellExecute(\u0026#34;cmd.exe\u0026#34;,\u0026#34;/c %~s0 ::\u0026#34;,\u0026#34;\u0026#34;,\u0026#34;runas\u0026#34;,1)(window.close)\u0026amp;\u0026amp;exit cd /d \u0026#34;%~dp0\u0026#34; rem 上面是bat批处理以管理员权限运行 rem 下面是隐藏【卷0】【R盘】的命令 echo list volume \u0026gt; script.txt echo select volume=0 \u0026gt;\u0026gt; script.txt echo remove letter=R \u0026gt;\u0026gt; script.txt DiskPart /s script.txt del script.txt rem 添加提示 echo 操作已完成，请按任意键继续... pause \u0026gt;nul 2 、Win11隐藏磁盘批处理，文本编辑保存为,bat批处理文件 如果不能运行，请手动给予管理员权限运行 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 @ echo off %1 %2 ver|find \u0026#34;5.\u0026#34;\u0026gt;nul\u0026amp;\u0026amp;goto :Admin mshta vbscript:createobject(\u0026#34;shell.application\u0026#34;).shellexecute(\u0026#34;%~s0\u0026#34;,\u0026#34;goto :Admin\u0026#34;,\u0026#34;\u0026#34;,\u0026#34;runas\u0026#34;,1)(window.close)\u0026amp;goto :eof :Admin rem 上面是bat批处理以管理员权限运行 rem 下面是隐藏【卷0】【R盘】的命令 echo list volume \u0026gt; script.txt echo select volume=0 \u0026gt;\u0026gt; script.txt echo remove letter=R \u0026gt;\u0026gt; script.txt DiskPart /s script.txt del script.txt rem 添加提示 echo 操作已完成，请按任意键继续... pause \u0026gt;nul 三 、 Windows显示磁盘（数据不会丢失） 1 、Win10显示磁盘批处理，文本编辑保存为,bat批处理文件 如果【R盘】已经被占用，可任意修改一个没占用的驱动器号，如： 1 2 3 4 5 6 7 8 9 10 11 12 13 @echo off %1 mshta vbscript:CreateObject(\u0026#34;Shell.Application\u0026#34;).ShellExecute(\u0026#34;cmd.exe\u0026#34;,\u0026#34;/c %~s0 ::\u0026#34;,\u0026#34;\u0026#34;,\u0026#34;runas\u0026#34;,1)(window.close)\u0026amp;\u0026amp;exit cd /d \u0026#34;%~dp0\u0026#34; rem 上面是bat批处理以管理员权限运行 rem 下面是【卷0】重新挂载到【R盘】 echo list volume \u0026gt; script.txt echo select volume=0 \u0026gt;\u0026gt; script.txt echo assign letter=R \u0026gt;\u0026gt; script.txt DiskPart /s script.txt del script.txt rem 添加提示 echo 操作已完成，请按任意键继续... pause \u0026gt;nul 如果不能运行，请手动给予管理员权限运行 2 、Win11显示磁盘批处理，文本编辑保存为,bat批处理文件 如果【R盘】已经被占用，可任意修改一个没占用的驱动器号，如： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 @ echo off %1 %2 ver|find \u0026#34;5.\u0026#34;\u0026gt;nul\u0026amp;\u0026amp;goto :Admin mshta vbscript:createobject(\u0026#34;shell.application\u0026#34;).shellexecute(\u0026#34;%~s0\u0026#34;,\u0026#34;goto :Admin\u0026#34;,\u0026#34;\u0026#34;,\u0026#34;runas\u0026#34;,1)(window.close)\u0026amp;goto :eof :Admin rem 上面是bat批处理以管理员权限运行 rem 下面是【卷0】重新挂载到【R盘】 echo list volume \u0026gt; script.txt echo select volume=0 \u0026gt;\u0026gt; script.txt echo assign letter=F \u0026gt;\u0026gt; script.txt DiskPart /s script.txt del script.txt echo 操作已完成，请按任意键继续... pause \u0026gt;nul 如果不能运行，请手动给予管理员权限运行 ","date":"2025-01-29T14:44:09+08:00","image":"https://file.meimolihan.eu.org/img/windows-04.jpg","permalink":"https://meimolihan.eu.org/p/windows%E9%9A%90%E8%97%8F%E7%A3%81%E7%9B%98/","title":"Windows隐藏磁盘"},{"content":" Linux 开启 samba-shell脚本 一 、Debian 为samba客户端配置（追加内容） 一键开启SMB脚本(追加内容) 下面是一‮便个‬捷开启Smb‮脚的‬本，并且配置了Debian目‮的录‬共享。默认共享‮号账‬为admin，密码为yifan0719 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 touch ~/smb.sh \u0026amp;\u0026amp; cat \u0026gt; /smb.sh \u0026lt;\u0026lt;\u0026#39;EOF\u0026#39; #!/bin/bash apt update \u0026amp;\u0026amp; apt install samba -y mkdir -pm 755 /mnt \u0026amp;\u0026amp; cat \u0026gt;\u0026gt;/etc/samba/smb.conf \u0026lt;\u0026lt;\u0026#39;MYENDMARK\u0026#39; ######## 我的samba共享设置 ######## [Debian] ## 这是我的共享名称 comment = mysamba ## 共享目录的路径 path = /mnt ## 指定共享是否应该在网络邻居中被浏览到，yes显示共享名称，no隐藏共享名称。 browseable = yes ## 是否允许用户写入此共享，yes为可写入，no为不可写入。 writeable = yes ## 指定共享用户是否可读写，yes为只读，no为读写。 read only = no ## 新建文件的默认权限掩码 create mask = 0777 ## 新建目录的默认权限掩码 directory mask = 0777 ## 允许访客否 guest ok = no ## 强制用户为root force user = root ## 强制组为root force group = root ## 定义管理员用户列表 admin users = admin ## 定义允许访问此共享的有效用户列表，也可以是组名（以 @ 开头） valid users = admin,root ## 要求密码访问 password required = yes ## 共享是否可用， yes为显示共享，no 为隐藏共享 available = yes ## 对于Apple文件进行编码 fruit:encoding = native ## 对于Apple文件元数据 fruit:metadata = stream ## 设置为 no 表示Samba不会拒绝AppleDouble文件 fruit:veto_appledouble = no ## 这些VFS模块可以增强Samba服务器的功能 vfs objects = catia fruit streams_xattr MYENDMARK ## 新建admin用户 \u0026amp;\u0026amp; 为admin用户创建两次密码 useradd admin \u0026amp;\u0026amp; (echo 输入smb密码; echo 输入smb密码) | smbpasswd -a -s admin systemctl restart smbd EOF chmod +x ~/smb.sh \u0026amp;\u0026amp; bash smb.sh 查看samba脚本 1 cat /smb.sh ## 查看脚本 二 、Ubuntu 为samba客户端配置（追加内容） 一键开启SMB脚本(追加内容)\u0026mdash;\u0026mdash;\u0026mdash;20240821测试完美通过\u0026mdash;\u0026mdash;\u0026ndash; 下面是一‮便个‬捷开启Smb‮脚的‬本，并且配置了Ubuntu目‮的录‬共享。默认共享‮号账‬为admin，密码为yifan0719 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 sudo touch ~/smb.sh \u0026amp;\u0026amp; sudo cat \u0026gt; /smb.sh \u0026lt;\u0026lt;\u0026#39;EOF\u0026#39; #!/bin/bash sudo apt update \u0026amp;\u0026amp; sudo apt install samba -y sudo mkdir -pm 755 /mnt \u0026amp;\u0026amp; sudo cat \u0026gt;\u0026gt;/etc/samba/smb.conf \u0026lt;\u0026lt;\u0026#39;MYENDMARK\u0026#39; ######## 我的samba共享设置 ######## [Ubuntu] ## 这是我的共享名称 comment = mysamba ## 共享目录的路径 path = /mnt ## 指定共享是否应该在网络邻居中被浏览到，yes显示共享名称，no隐藏共享名称。 browseable = yes ## 是否允许用户写入此共享，yes为可写入，no为不可写入。 writeable = yes ## 指定共享用户是否可读写，yes为只读，no为读写。 read only = no ## 新建文件的默认权限掩码 create mask = 0777 ## 新建目录的默认权限掩码 directory mask = 0777 ## 允许访客否 guest ok = no ## 强制用户为root force user = root ## 强制组为root force group = root ## 定义管理员用户列表 admin users = admin ## 定义允许访问此共享的有效用户列表，也可以是组名（以 @ 开头） valid users = admin,root ## 要求密码访问 password required = yes ## 共享是否可用， yes为显示共享，no 为隐藏共享 available = yes ## 对于Apple文件进行编码 fruit:encoding = native ## 对于Apple文件元数据 fruit:metadata = stream ## 设置为 no 表示Samba不会拒绝AppleDouble文件 fruit:veto_appledouble = no ## 这些VFS模块可以增强Samba服务器的功能 vfs objects = catia fruit streams_xattr MYENDMARK ## 新建admin用户 \u0026amp;\u0026amp; 为admin用户创建两次密码 useradd admin \u0026amp;\u0026amp; (echo 输入smb密码; echo 输入smb密码) | smbpasswd -a -s admin sudo systemctl restart smbd EOF sudo chmod +x ~/smb.sh \u0026amp;\u0026amp; sudo bash smb.sh 查看samba脚本 1 cat /smb.sh ## 查看脚本 三 、PVE 为samba客户端配置（追加内容） 一键开启SMB脚本(追加内容)\u0026mdash;\u0026mdash;\u0026mdash;20240821测试完美通过\u0026mdash;\u0026mdash;\u0026ndash; 下面是一‮便个‬捷开启Smb‮脚的‬本，并且配置了local和PVE-ntfs目‮的录‬共享。默认共享‮号账‬为admin，密码为yifan0719 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 touch ~/smb.sh \u0026amp;\u0026amp; cat \u0026gt; /smb.sh \u0026lt;\u0026lt;\u0026#39;EOF\u0026#39; #!/bin/bash apt update \u0026amp;\u0026amp; apt install samba -y mkdir -pm 755 /mnt/ntfs \u0026amp;\u0026amp; cat \u0026gt;\u0026gt;/etc/samba/smb.conf \u0026lt;\u0026lt;\u0026#39;MYENDMARK\u0026#39; ######## 我的samba共享设置 ######## [local] ## 这是我的共享名称 comment = mysamba ## 共享目录的路径 path = /var/lib/vz/ ## 指定共享是否应该在网络邻居中被浏览到，yes显示共享名称，no隐藏共享名称。 browseable = yes ## 是否允许用户写入此共享，yes为可写入，no为不可写入。 writeable = yes ## 指定共享用户是否可读写，yes为只读，no为读写。 read only = no ## 新建文件的默认权限掩码 create mask = 0777 ## 新建目录的默认权限掩码 directory mask = 0777 ## 允许访客否 guest ok = no ## 强制用户为root force user = root ## 强制组为root force group = root ## 定义管理员用户列表 admin users = admin ## 定义允许访问此共享的有效用户列表，也可以是组名（以 @ 开头） valid users = admin,root ## 要求密码访问 password required = yes ## 共享是否可用， yes为显示共享，no 为隐藏共享 available = yes ## 对于Apple文件进行编码 fruit:encoding = native ## 对于Apple文件元数据 fruit:metadata = stream ## 设置为 no 表示Samba不会拒绝AppleDouble文件 fruit:veto_appledouble = no [PVE-ntfs] ## 这是我的共享名称 comment = mysamba ## 共享目录的路径 path = /mnt/ntfs ## 指定共享是否应该在网络邻居中被浏览到，yes显示共享名称，no隐藏共享名称。 browseable = yes ## 是否允许用户写入此共享，yes为可写入，no为不可写入。 writeable = yes ## 指定共享用户是否可读写，yes为只读，no为读写。 read only = no ## 新建文件的默认权限掩码 create mask = 0777 ## 新建目录的默认权限掩码 directory mask = 0777 ## 允许访客否 guest ok = no ## 强制用户为root force user = root ## 强制组为root force group = root ## 定义管理员用户列表 admin users = admin ## 定义允许访问此共享的有效用户列表，也可以是组名（以 @ 开头） valid users = admin,root ## 要求密码访问 password required = yes ## 共享是否可用， yes为显示共享，no 为隐藏共享 available = yes ## 对于Apple文件进行编码 fruit:encoding = native ## 对于Apple文件元数据 fruit:metadata = stream ## 设置为 no 表示Samba不会拒绝AppleDouble文件 fruit:veto_appledouble = no MYENDMARK ## 新建admin用户 \u0026amp;\u0026amp; 为admin用户创建两次密码 useradd admin \u0026amp;\u0026amp; (echo 输入smb密码; echo 输入smb密码) | smbpasswd -a -s admin systemctl restart smbd EOF chmod +x ~/smb.sh \u0026amp;\u0026amp; bash smb.sh 查看samba脚本 1 cat /smb.sh ## 查看脚本 四 、CentOS 为samba客户端配置（追加内容） 一键开启SMB脚本(追加内容)\u0026mdash;\u0026mdash;\u0026mdash;20240821测试完美通过\u0026mdash;\u0026mdash;\u0026ndash; 下面是一‮便个‬捷开启Smb‮脚的‬本，并且配置了CentOS目‮的录‬共享。默认共享‮号账‬为admin，密码为yifan0719 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 touch ~/smb.sh \u0026amp;\u0026amp; cat \u0026gt; /smb.sh \u0026lt;\u0026lt;\u0026#39;EOF\u0026#39; #!/bin/bash yum update -y \u0026amp;\u0026amp; yum install samba -y mkdir -pm 755 /mnt \u0026amp;\u0026amp; cat \u0026gt;\u0026gt;/etc/samba/smb.conf \u0026lt;\u0026lt;\u0026#39;MYENDMARK\u0026#39; [CentOS] ## 这是我的共享名称 comment = mysamba ## 共享目录的路径 path = /mnt ## 指定共享是否应该在网络邻居中被浏览到，yes显示共享名称，no隐藏共享名称。 browseable = yes ## 是否允许用户写入此共享，yes为可写入，no为不可写入。 writeable = yes ## 指定共享用户是否可读写，yes为只读，no为读写。 read only = no ## 新建文件的默认权限掩码 create mask = 0777 ## 新建目录的默认权限掩码 directory mask = 0777 ## 允许访客否 guest ok = no ## 强制用户为root force user = root ## 强制组为root force group = root ## 定义管理员用户列表 admin users = admin ## 定义允许访问此共享的有效用户列表，也可以是组名（以 @ 开头） valid users = admin,root ## 要求密码访问 password required = yes ## 共享是否可用， yes为显示共享，no 为隐藏共享 available = yes ## 对于Apple文件进行编码 fruit:encoding = native ## 对于Apple文件元数据 fruit:metadata = stream ## 设置为 no 表示Samba不会拒绝AppleDouble文件 fruit:veto_appledouble = no ## 这些VFS模块可以增强Samba服务器的功能 vfs objects = catia fruit streams_xattr MYENDMARK ## 新建admin用户 \u0026amp;\u0026amp; 为admin用户创建两次密码 useradd admin \u0026amp;\u0026amp; (echo 输入smb密码; echo 输入smb密码) | smbpasswd -a -s admin systemctl restart smb EOF chmod +x ~/smb.sh \u0026amp;\u0026amp; bash smb.sh 查看samba脚本 1 cat /smb.sh ## 查看脚本 五 、Alpine 为samba客户端配置（追加内容） 一键开启SMB脚本(追加内容)\u0026mdash;\u0026mdash;\u0026mdash;20240821测试完美通过\u0026mdash;\u0026mdash;\u0026ndash; 下面是一‮便个‬捷开启Smb‮脚的‬本，并且配置了Alpine目‮的录‬共享。默认共享‮号账‬为admin，密码为yifan0719 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 touch /root/smb.sh \u0026amp;\u0026amp; cat \u0026gt; /root/smb.sh \u0026lt;\u0026lt;\u0026#39;EOF\u0026#39; #!/bin/ash apk update \u0026amp;\u0026amp; apk add samba shadow mkdir -pm 755 /mnt \u0026amp;\u0026amp; cat \u0026gt;\u0026gt;/etc/samba/smb.conf \u0026lt;\u0026lt;\u0026#39;MYENDMARK\u0026#39; ######## 我的samba共享设置 ######## [Alpine] ## 这是我的共享名称 comment = mysamba ## 共享目录的路径 path = /mnt ## 指定共享是否应该在网络邻居中被浏览到，yes显示共享名称，no隐藏共享名称。 browseable = yes ## 是否允许用户写入此共享，yes为可写入，no为不可写入。 writeable = yes ## 指定共享用户是否可读写，yes为只读，no为读写。 read only = no ## 新建文件的默认权限掩码 create mask = 0777 ## 新建目录的默认权限掩码 directory mask = 0777 ## 允许访客否 guest ok = no ## 强制用户为root force user = root ## 强制组为root force group = root ## 定义管理员用户列表 admin users = admin ## 定义允许访问此共享的有效用户列表，也可以是组名（以 @ 开头） valid users = admin,root ## 要求密码访问 password required = yes ## 共享是否可用， yes为显示共享，no 为隐藏共享 available = yes ## 对于Apple文件进行编码 fruit:encoding = native ## 对于Apple文件元数据 fruit:metadata = stream ## 设置为 no 表示Samba不会拒绝AppleDouble文件 fruit:veto_appledouble = no ## 这些VFS模块可以增强Samba服务器的功能 vfs objects = catia fruit streams_xattr MYENDMARK ## 新建admin用户 \u0026amp;\u0026amp; 为admin用户创建两次密码 useradd admin \u0026amp;\u0026amp; (echo 输入smb密码; echo 输入smb密码) | smbpasswd -a -s admin rc-service samba start EOF chmod +x /root/smb.sh \u0026amp;\u0026amp; /root/smb.sh 查看samba脚本 1 cat /smb.sh ## 查看脚本 ","date":"2025-01-29T14:32:36+08:00","image":"https://file.meimolihan.eu.org/img/shell-03.jpg","permalink":"https://meimolihan.eu.org/p/linux-%E9%85%8D%E7%BD%AE-samba-shell-%E8%84%9A%E6%9C%AC/","title":"Linux 配置 samba Shell 脚本"},{"content":" windows 部署 samba 服务 一、windows为客户端 1.1 、挂载10.10.10.251，Linux服务器.bat文件 1 2 3 4 5 6 7 8 9 10 @echo off REM 设置IP地址,用户名和密码 set ip=10.10.10.251\\Media set username=你的用户名 set password=你的密码 net use \\\\%ip% /user:%username% %password% explorer \\\\%ip% exit 1.2 、挂载10.10.10.248，windows服务器.bat文件 1 2 3 4 5 6 7 8 9 10 11 12 13 14 @echo off REM 设置IP地址、用户名和密码 set ip=10.10.10.248\\Win11阿里云盘 REM 查看共享用户命令：WHOAMI set username=墨不凡 REM 密码是win开机密码 set password=241313 net use \\\\%ip% /user:%username% %password% explorer \\\\%ip% exit 2.1 、Windows建立Linux磁盘映射 1 net use Z: \\\\10.10.10.251\\Media 密码 /user:用户名 2.2、Windows建立windows磁盘映射 1 net use Z: \\\\10.10.10.248\\Win11阿里云盘 241313 /user:墨不凡 3 、windows查看samba缓存，CMD命令 1 net use 4 、清除一个历史缓存(提示\u0026ndash;拒绝访问。\u0026ndash;) 1 net use \\\\10.10.10.251\\Media /del 5、清除所有历史缓存 1 net use * /del 6 、windows 开机自动挂载 samba 和 webdav linux 查看samba配置文件命令\n1 cat /etc/samba/smb.conf 在windows创建.bat脚本，放在开机自启动目录 [PVE-mydisk] 为linux配置文件中的网络共享名称\n1 2 3 4 5 net use Z: \\\\10.10.10.254\\PVE-mydisk password /user:root net use Y: \\\\10.10.10.245\\Debian password /user:admin net use X: \\\\10.10.10.254\\PVE-ntfs password /user:root 7 、CMD命令打开开机自动执行脚本文件夹 1 start shell:startup 二、windows为服务端 点击下载：文件共享工具V3.52.1.exe 运行文件共享工具后，需要配置文件权限 我的电脑\u0026raquo;选中磁盘或文件夹\u0026raquo;属性\u0026raquo;共享\u0026raquo;高级共享\u0026raquo;Everyone的权限勾选完全控制\n1、新建一个用户，CMD命令 1 netplwiz 2、查看共享用户.bat文件 1 2 3 4 5 6 @echo off WHOAMI echo 以下是你的共享文件夹用户名： echo ---------------------------------- echo 斜杠后面\\xxx，是你的共享文件夹用户名 pause 3、Windows配置网络共享.bat文件 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 @echo off set /p \u0026#34;folder_path=请输入共享文件夹路径: \u0026#34; set /p \u0026#34;share_name=请输入网络共享名称: \u0026#34; :: Create the folder if it does not exist if not exist \u0026#34;%folder_path%\u0026#34; mkdir \u0026#34;%folder_path%\u0026#34; :: Create the network share net share \u0026#34;%share_name%\u0026#34;=\u0026#34;%folder_path%\u0026#34; /GRANT:Everyone,FULL echo 网络共享名为：\u0026#34;%share_name%\u0026#34; echo 共享文件夹为：\u0026#34;%folder_path%\u0026#34; pause 4、查看windows电脑ip地址.bat文件 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 @echo off setlocal enabledelayedexpansion REM 获取本机IPv4地址 for /f \u0026#34;tokens=2 delims=:\u0026#34; %%a in (\u0026#39;ipconfig ^| find \u0026#34;IPv4\u0026#34;\u0026#39;) do ( set \u0026#34;ipaddress=%%a\u0026#34; set \u0026#34;ipaddress=!ipaddress: =!\u0026#34; echo 本机IPv4地址: !ipaddress! goto :get_gateway ) :get_gateway REM 获取默认网关地址 for /f \u0026#34;tokens=3\u0026#34; %%a in (\u0026#39;route print ^| findstr /r /c:\u0026#34;0.0.0.0.*0.0.0.0\u0026#34;\u0026#39;) do ( set \u0026#34;gateway=%%a\u0026#34; echo 默认网关地址: !gateway! goto :done ) :done pause endlocal ","date":"2025-01-29T14:28:43+08:00","image":"https://file.meimolihan.eu.org/img/samba-02.jpg","permalink":"https://meimolihan.eu.org/p/windows%E9%85%8D%E7%BD%AEsamba%E6%9C%8D%E5%8A%A1/","title":"Windows配置samba服务"},{"content":"一、iStoreOS 为服务端，配置 samba 服务 1、添加名为admin的用户+为用户admin创建admin服务的密码 1 useradd admin \u0026amp;\u0026amp; smbpasswd -a admin 2、创建一个文件夹用于samba共享+使用户admin获得文件夹权限 1 mkdir -pm 755 /mnt/mydisk \u0026amp;\u0026amp; chown -R admin:admin /mnt/mydisk 名称：ARS2，为网络中可见的名称 路径：/mnt/mydisk，为共享文件夹 允许用户：root，为可以访问/mnt/mydisk/media文件夹的用户\n名称：Media，为网络中可见的名称 路径：/mnt/mydisk/media，为共享文件夹 允许用户：admin，为可以访问/mnt/mydisk/media文件夹的用户\n3、编辑samba服务配置文件\u0026ndash;测试命令不可用 备份samba服务配置文件\n1 cp -i /etc/samba/smb.conf /etc/samba/smb.conf.bak \u0026amp;\u0026amp; cd /etc/samba \u0026amp;\u0026amp; ls 方法一、覆盖samba服务配置文件 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 mkdir -pm 755 /mnt \u0026amp;\u0026amp; chmod +x /etc/samba/smb.conf \u0026amp;\u0026amp; cat \u0026gt; /etc/samba/smb.conf \u0026lt;\u0026lt;\u0026#39;EOF\u0026#39; ################################### ######## samba全局配置 ######## [global] netbios name = ARS2 interfaces = br-lan server string = Samba on OpenWRT unix charset = UTF-8 workgroup = WORKGROUP ## 此全局参数允许Samba管理员限制计算机上的哪些接口将为SMB请求提供服务。 bind interfaces only = yes ## 关闭非活动连接的时间（分钟） deadtime = 15 ## 禁用核心转储 enable core files = no ## 设置安全性（自动、用户、域、广告） security = user ## 将未知用户映射到来宾 map to guest = Bad User ## 允许客户端访问密码为空的帐户 null passwords = yes ## 旧的明文passdb后端。如果使用此passdb后端，某些Samba功能将不起作用。（注意：由于尺寸原因而启用） passdb backend = smbpasswd ## LAN（IPTOS_LOWDELAY TCP_NODELAY）WAN（IPTOS_THROUGHPUT）WiFi（SO_KEEPALIVE）缓冲区大小的尝试和错误（SO_RCVBUF=65536 SO_SNDBUF=6553） socket options = IPTOS_LOWDELAY TCP_NODELAY ## 默认情况下禁用加载所有printcap打印机（iprint、cups、lpstat） load printers = No printcap name = /dev/null ## 启用此参数将禁用Samba对MS-RPC的SPOOLSS集的支持。 disable spoolss = yes ## 此参数控制如何在系统上解释打印机状态信息。 printing = bsd ## 允许将通过MDNS播发的服务器名称设置为主机名，而不是Samba NETBIOS名称。 ## 这允许管理员使Samba注册的MDNS记录与主机名的大小写匹配，而不是全部大写。 ##（netbios，mdns） mdns name = mdns ## 这是一个既不可见也不可访问的文件和目录列表。 ## 列表中的每个条目都必须用“/”分隔，这允许条目中包含空格。“*”和可以用于指定多个文件或目录，如在DOS通配符中。 veto files = /Thumbs.db/.DS_Store/._.DS_Store/.apdisk/ ##如果要删除的目录除了否决文件外什么都不包含，则除非您还将“删除否决文件”参数设置为“是”，否则删除操作将失败。 delete veto files = yes ######### 动态写入配置选项 ######### socket options = IPTOS_LOWDELAY TCP_NODELAY SO_KEEPALIVE max xmit = 131072 min receivefile size = 131072 fake oplocks = Yes use sendfile = Yes aio read size = 0 aio write size = 0 server min protocol = NT1 lanman auth = yes ntlm auth = ntlmv1-permitted ######## 我的samba共享设置 ######## [ARS2] path = /mnt/mydisk force user = root force group = root valid users = root create mask = 0777 directory mask = 0777 read only = no guest ok = no fruit:encoding = native fruit:metadata = stream fruit:veto_appledouble = no vfs objects = catia fruit streams_xattr [media] path = /mnt/mydisk/media force user = root force group = root valid users = admin create mask = 0777 directory mask = 0777 read only = no guest ok = no fruit:encoding = native fruit:metadata = stream fruit:veto_appledouble = no vfs objects = catia fruit streams_xattr [TV] path = /mnt/mydisk/TV force user = root force group = root valid users = admin create mask = 0777 directory mask = 0777 read only = no guest ok = no fruit:encoding = native fruit:metadata = stream fruit:veto_appledouble = no fruit:time machine = yes vfs objects = catia fruit streams_xattr EOF /etc/init.d/samba4 restart 方法二、追加samba配置文件+重启samba 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 mkdir -pm 755 /mnt \u0026amp;\u0026amp; chmod +x /etc/samba/smb.conf \u0026amp;\u0026amp; tee -a /etc/samba/smb.conf \u0026lt;\u0026lt;\u0026#39;EOF\u0026#39; ######## 我的samba共享设置 ######## [ARS2] path = /mnt/mydisk force user = root force group = root valid users = root create mask = 0777 directory mask = 0777 read only = no guest ok = no fruit:encoding = native fruit:metadata = stream fruit:veto_appledouble = no vfs objects = catia fruit streams_xattr [media] path = /mnt/mydisk/media force user = root force group = root valid users = admin create mask = 0777 directory mask = 0777 read only = no guest ok = no fruit:encoding = native fruit:metadata = stream fruit:veto_appledouble = no vfs objects = catia fruit streams_xattr [TV] path = /mnt/mydisk/TV force user = root force group = root valid users = admin create mask = 0777 directory mask = 0777 read only = no guest ok = no fruit:encoding = native fruit:metadata = stream fruit:veto_appledouble = no fruit:time machine = yes vfs objects = catia fruit streams_xattr EOF /etc/init.d/samba4 restart 二、iStoreOS为客户端，配置samba服务 服务器ip：10.10.10.245，为samba服务端地址 共享文件夹：Debian，为samba服务端共享名称 挂载路径：/mnt/mydebian，为本地挂载路径 SMB版本：SMB V3 挂载参数：可读/写 字符集：UTF8 用户：admin为samba服务端用户名 密码：yifan0719为samba服务端密码\n","date":"2025-01-29T14:22:47+08:00","image":"https://file.meimolihan.eu.org/img/samba-02.jpg","permalink":"https://meimolihan.eu.org/p/istoreos-%E9%85%8D%E7%BD%AE-samba-%E6%9C%8D%E5%8A%A1/","title":"IStoreOS 配置 samba 服务"},{"content":" Alpine 配置 samba 服务 一 、配置 samba 基础设置 1 、Alpine新建共享文件夹+安装samba 1 mkdir -pm 755 /mnt/mydisk \u0026amp;\u0026amp; apk update \u0026amp;\u0026amp; apk add samba shadow 2 、新建admin用户+设置密码 1 useradd admin \u0026amp;\u0026amp; smbpasswd -a admin 二 、Alpine为服务端samba配置 1 、备份samba配置文件 1 cp -i /etc/samba/smb.conf /etc/samba/smb.conf.bak \u0026amp;\u0026amp; cd /etc/samba \u0026amp;\u0026amp; ls 2 、方法一、覆盖samba配置文件+添加 Samba 到启动项+启动 Samba 服务+查看ip地址 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 mkdir -pm 755 /mnt \u0026amp;\u0026amp; chmod +x /etc/samba/smb.conf \u0026amp;\u0026amp; cat \u0026gt; /etc/samba/smb.conf \u0026lt;\u0026lt;\u0026#39;EOF\u0026#39; ################################### ######## samba全局配置 ######## [global] ## 设置工作组名称 workgroup = WORKGROUP ## 设置非活动连接被关闭的时间（分钟） deadtime = 99 ## 服务器描述字符串 server string = Samba on Alpine ## 设置网络基本输入/输出系统（NetBIOS）名称 netbios name = Alpine ## Unix字符集设置为UTF-8 unix charset = UTF-8 ## 禁用核心转储 enable core files = no ## 设置安全模式为用户级别 security = user ## 将未知用户映射为访客 map to guest = Bad User ## 允许客户端访问具有空密码的账户 null passwords = yes ## 设置socket选项，优化网络传输性能 socket options = IPTOS_LOWDELAY TCP_NODELAY ## 设置最大传输单元大小 max xmit = 131072 ## 设置最小接收文件大小，用于异步I/O操作 min receivefile size = 131072 ## 启用假的机会锁 fake oplocks = Yes ## 启用sendfile系统调用，提高文件传输效率 use sendfile = Yes ## 设置异步I/O读取阈值，0表示禁用 aio read size = 0 ## 设置异步I/O写入阈值，0表示禁用 aio write size = 0 ## 设置服务器支持的最低SMB协议版本 server min protocol = NT1 ## 允许使用LanManager认证方式 lanman auth = yes ## 允许使用NTLMv1认证方式 ntlm auth = ntlmv1-permitted ## 禁用自动加载printcap打印机 load printers = No ## 设置打印服务不使用printcap printcap name = /dev/null ## 禁用SPOOLSS服务 disable spoolss = yes ## 设置打印机状态信息的解释方式 printing = bsd ## 设置通过MDNS广告的服务器名称 mdns name = mdns ## 设置Samba不共享的文件和目录列表 veto files = /Thumbs.db/.DS_Store/._.DS_Store/.apdisk/ ## 允许删除只包含veto文件的目录 delete veto files = yes # 设置无效用户 # invalid users = root ## 指定服务器应该监听 SMB 流量的端口。 ## 139 是 netbios/nmbd # smb ports = 445 139 ######## 我的samba共享设置 ######## [Alpine] ## 这是我的共享名称 comment = mysamba ## 共享目录的路径 path = /mnt ## 指定共享是否应该在网络邻居中被浏览到，yes显示共享名称，no隐藏共享名称。 browseable = yes ## 是否允许用户写入此共享，yes为可写入，no为不可写入。 writeable = yes ## 指定共享用户是否可读写，yes为只读，no为读写。 read only = no ## 新建文件的默认权限掩码 create mask = 0777 ## 新建目录的默认权限掩码 directory mask = 0777 ## 允许访客否 guest ok = no ## 强制用户为root force user = root ## 强制组为root force group = root ## 定义管理员用户列表 admin users = admin ## 定义允许访问此共享的有效用户列表，也可以是组名（以 @ 开头） valid users = admin,root ## 要求密码访问 password required = yes ## 共享是否可用， yes为显示共享，no 为隐藏共享 available = yes ## 对于Apple文件进行编码 fruit:encoding = native ## 对于Apple文件元数据 fruit:metadata = stream ## 设置为 no 表示Samba不会拒绝AppleDouble文件 fruit:veto_appledouble = no ## 这些VFS模块可以增强Samba服务器的功能 vfs objects = catia fruit streams_xattr EOF rc-update add samba \u0026amp;\u0026amp; rc-service samba start \u0026amp;\u0026amp; getent hosts $(hostname) | awk \u0026#39;{print $1}\u0026#39; 3 、方法二、追加samba配置文件+添加 Samba 到启动项+启动 Samba 服务+查看ip地址 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 mkdir -pm 755 /mnt \u0026amp;\u0026amp; chmod +x /etc/samba/smb.conf \u0026amp;\u0026amp; tee -a /etc/samba/smb.conf \u0026lt;\u0026lt;\u0026#39;EOF\u0026#39; ################################### ######## 我的samba共享设置 ######## [Alpine] ## 这是我的共享名称 comment = mysamba ## 共享目录的路径 path = /mnt ## 指定共享是否应该在网络邻居中被浏览到，yes显示共享名称，no隐藏共享名称。 browseable = yes ## 是否允许用户写入此共享，yes为可写入，no为不可写入。 writeable = yes ## 指定共享用户是否可读写，yes为只读，no为读写。 read only = no ## 新建文件的默认权限掩码 create mask = 0777 ## 新建目录的默认权限掩码 directory mask = 0777 ## 允许访客否 guest ok = no ## 强制用户为root force user = root ## 强制组为root force group = root ## 定义管理员用户列表 admin users = admin ## 定义允许访问此共享的有效用户列表，也可以是组名（以 @ 开头） valid users = admin,root ## 要求密码访问 password required = yes ## 共享是否可用， yes为显示共享，no 为隐藏共享 available = yes ## 对于Apple文件进行编码 fruit:encoding = native ## 对于Apple文件元数据 fruit:metadata = stream ## 设置为 no 表示Samba不会拒绝AppleDouble文件 fruit:veto_appledouble = no ## 这些VFS模块可以增强Samba服务器的功能 vfs objects = catia fruit streams_xattr EOF rc-update add samba \u0026amp;\u0026amp; rc-service samba start \u0026amp;\u0026amp; getent hosts $(hostname) | awk \u0026#39;{print $1}\u0026#39; 4 、方法三、一键开启SMB脚本(追加内容) 下面是一‮便个‬捷开启Smb‮脚的‬本，并且配置了Alpine目‮的录‬共享。默认共享‮号账‬为admin，密码为mobufan\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 touch /root/smb.sh \u0026amp;\u0026amp; cat \u0026gt; /root/smb.sh \u0026lt;\u0026lt;\u0026#39;EOF\u0026#39; #!/bin/ash apk update \u0026amp;\u0026amp; apk add samba shadow mkdir -pm 755 /mnt \u0026amp;\u0026amp; cat \u0026gt;\u0026gt;/etc/samba/smb.conf \u0026lt;\u0026lt;MYENDMARK ######## 我的samba共享设置 ######## [Alpine] ## 这是我的共享名称 comment = mysamba ## 共享目录的路径 path = /mnt ## 指定共享是否应该在网络邻居中被浏览到，yes显示共享名称，no隐藏共享名称。 browseable = yes ## 是否允许用户写入此共享，yes为可写入，no为不可写入。 writeable = yes ## 指定共享用户是否可读写，yes为只读，no为读写。 read only = no ## 新建文件的默认权限掩码 create mask = 0777 ## 新建目录的默认权限掩码 directory mask = 0777 ## 允许访客否 guest ok = no ## 强制用户为root force user = root ## 强制组为root force group = root ## 定义管理员用户列表 admin users = admin ## 定义允许访问此共享的有效用户列表，也可以是组名（以 @ 开头） valid users = admin,root ## 要求密码访问 password required = yes ## 共享是否可用， yes为显示共享，no 为隐藏共享 available = yes ## 对于Apple文件进行编码 fruit:encoding = native ## 对于Apple文件元数据 fruit:metadata = stream ## 设置为 no 表示Samba不会拒绝AppleDouble文件 fruit:veto_appledouble = no ## 这些VFS模块可以增强Samba服务器的功能 vfs objects = catia fruit streams_xattr MYENDMARK ## 新建admin用户 \u0026amp;\u0026amp; 为admin用户创建两次密码 useradd admin \u0026amp;\u0026amp; (echo mobufan; echo mobufan) | smbpasswd -a -s admin rc-service samba start EOF chmod +x /root/smb.sh \u0026amp;\u0026amp; /root/smb.sh 1 cat /smb.sh ## 查看脚本 三 、Alpine为客户端samba配置（追加内容） 1 、Alpine为客户端samba配置（追加内容） 1 2 3 4 5 6 7 8 apk update \u0026amp;\u0026amp; apk add samba shadow \u0026amp;\u0026amp; mkdir -pm 755 /mnt/ARS2-SMB \u0026amp;\u0026amp; tee -a /etc/fstab \u0026lt;\u0026lt;\u0026#39;EOF\u0026#39; ## Alpine为客户端samba配置（追加内容） ## 服务器地址和共享名：10.10.10.251/ARS2，挂载到本地路径： /mnt/ARS2-SMB，账户：root，密码：mobufan //10.10.10.251/ARS2 /mnt/ARS2-SMB cifs username=root,password=mobufan 0 0 EOF reboot 2 、查看samba用户 1 pdbedit -L 3 、添加root用户到samba\u0026mdash;可以忽略 1 smbpasswd -a root ","date":"2025-01-29T14:17:51+08:00","image":"https://file.meimolihan.eu.org/img/samba-02.jpg","permalink":"https://meimolihan.eu.org/p/alpine-%E9%85%8D%E7%BD%AE-samba-%E6%9C%8D%E5%8A%A1/","title":"Alpine 配置 samba 服务"},{"content":" Ubuntu配置samba共享 一 、Ubuntu_samba共享 基本设置 1 、更新软件包+安装 samba+新建共享文件夹并添加权限 1 sudo apt update \u0026amp;\u0026amp; sudo apt install samba -y \u0026amp;\u0026amp; sudo mkdir -p -m 777 /mnt/mydisk 2 、创建Samba账户+添加用户admin到smb共享组+设置共享密码 创建Samba账户\n1 sudo adduser admin \u0026amp;\u0026amp; sudo gpasswd sambashare -a admin \u0026amp;\u0026amp; sudo smbpasswd -a admin 3 、启动smba共享服务 1 sudo systemctl restart smbd.service nmbd.service 二 、Ubuntu为服务端samba配置 1 、备份samba配置文件 1 sudo cp -i /etc/samba/smb.conf /etc/samba/smb.conf.bak \u0026amp;\u0026amp; ls /etc/samba 2 、方法一 、覆盖samba服务配置文件+重启Samba服务以应用配置更改+查看IP地址 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 sudo mkdir -pm 755 /mnt \u0026amp;\u0026amp; sudo chmod +x /etc/samba/smb.conf \u0026amp;\u0026amp; sudo cat \u0026gt; /etc/samba/smb.conf \u0026lt;\u0026lt;\u0026#39;EOF\u0026#39; ################################### ######## samba全局配置 ######## [global] ## 设置工作组名称 workgroup = WORKGROUP ## 设置非活动连接被关闭的时间（分钟） deadtime = 99 ## 服务器描述字符串 server string = Samba on Ubuntu ## 设置网络基本输入/输出系统（NetBIOS）名称 netbios name = Ubuntu ## Unix字符集设置为UTF-8 unix charset = UTF-8 ## 禁用核心转储 enable core files = no ## 设置安全模式为用户级别 security = user ## 将未知用户映射为访客 map to guest = Bad User ## 设置socket选项，优化网络传输性能 socket options = IPTOS_LOWDELAY TCP_NODELAY ## 设置最大传输单元大小 max xmit = 131072 ## 设置最小接收文件大小，用于异步I/O操作 min receivefile size = 131072 ## 启用假的机会锁 fake oplocks = Yes ## 启用sendfile系统调用，提高文件传输效率 use sendfile = Yes ## 设置异步I/O读取阈值，0表示禁用 aio read size = 0 ## 设置异步I/O写入阈值，0表示禁用 aio write size = 0 ## 设置服务器支持的最低SMB协议版本 server min protocol = NT1 ## 允许使用NTLMv1认证方式 ntlm auth = ntlmv1-permitted ## 禁用自动加载printcap打印机 load printers = No ## 设置打印服务不使用printcap printcap name = /dev/null ## 禁用SPOOLSS服务 disable spoolss = yes ## 设置打印机状态信息的解释方式 printing = bsd ## 设置通过MDNS广告的服务器名称 mdns name = mdns ## 设置Samba不共享的文件和目录列表 veto files = /Thumbs.db/.DS_Store/._.DS_Store/.apdisk/ ## 允许删除只包含veto文件的目录 delete veto files = yes # 设置无效用户 # invalid users = root ## 指定服务器应该监听 SMB 流量的端口。 ## 139 是 netbios/nmbd # smb ports = 445 139 ######## 我的samba共享设置 ######## [Ubuntu] ## 这是我的共享名称 comment = mysamba ## 共享目录的路径 path = /mnt ## 指定共享是否应该在网络邻居中被浏览到，yes显示共享名称，no隐藏共享名称。 browseable = yes ## 是否允许用户写入此共享，yes为可写入，no为不可写入。 writeable = yes ## 指定共享用户是否可读写，yes为只读，no为读写。 read only = no ## 新建文件的默认权限掩码 create mask = 0777 ## 新建目录的默认权限掩码 directory mask = 0777 ## 允许访客否 guest ok = no ## 强制用户为root force user = root ## 强制组为root force group = root ## 定义管理员用户列表 admin users = admin ## 定义允许访问此共享的有效用户列表，也可以是组名（以 @ 开头） valid users = admin,root ## 要求密码访问 password required = yes ## 共享是否可用， yes为显示共享，no 为隐藏共享 available = yes ## 对于Apple文件进行编码 fruit:encoding = native ## 对于Apple文件元数据 fruit:metadata = stream ## 设置为 no 表示Samba不会拒绝AppleDouble文件 fruit:veto_appledouble = no ## 这些VFS模块可以增强Samba服务器的功能 vfs objects = catia fruit streams_xattr EOF sudo systemctl restart smbd \u0026amp;\u0026amp; sudo hostname -I 3 、方法二 、追加samba服务配置文件+重启Samba服务以应用配置更改+查看IP地址 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 sudo mkdir -pm 755 /mnt \u0026amp;\u0026amp; sudo chmod +x /etc/samba/smb.conf \u0026amp;\u0026amp; sudo tee -a /etc/samba/smb.conf \u0026lt;\u0026lt;\u0026#39;EOF\u0026#39; ################################### ######## 我的samba共享设置 ######## [Ubuntu] ## 这是我的共享名称 comment = mysamba ## 共享目录的路径 path = /mnt ## 指定共享是否应该在网络邻居中被浏览到，yes显示共享名称，no隐藏共享名称。 browseable = yes ## 是否允许用户写入此共享，yes为可写入，no为不可写入。 writeable = yes ## 指定共享用户是否可读写，yes为只读，no为读写。 read only = no ## 新建文件的默认权限掩码 create mask = 0777 ## 新建目录的默认权限掩码 directory mask = 0777 ## 允许访客否 guest ok = no ## 强制用户为root force user = root ## 强制组为root force group = root ## 定义管理员用户列表 admin users = admin ## 定义允许访问此共享的有效用户列表，也可以是组名（以 @ 开头） valid users = admin,root ## 要求密码访问 password required = yes ## 共享是否可用， yes为显示共享，no 为隐藏共享 available = yes ## 对于Apple文件进行编码 fruit:encoding = native ## 对于Apple文件元数据 fruit:metadata = stream ## 设置为 no 表示Samba不会拒绝AppleDouble文件 fruit:veto_appledouble = no ## 这些VFS模块可以增强Samba服务器的功能 vfs objects = catia fruit streams_xattr EOF sudo systemctl restart smbd \u0026amp;\u0026amp; sudo hostname -I 4 、方法三 、一键开启SMB脚本(追加内容) 下面是一‮便个‬捷开启Smb‮脚的‬本，并且配置了Ubuntu目‮的录‬共享。默认共享‮号账‬为admin密码为mobufan\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 sudo touch ~/smb.sh \u0026amp;\u0026amp; sudo cat \u0026gt; /smb.sh \u0026lt;\u0026lt;\u0026#39;EOF\u0026#39; #!/bin/bash sudo apt update \u0026amp;\u0026amp; sudo apt install samba -y sudo mkdir -pm 755 /mnt \u0026amp;\u0026amp; sudo cat \u0026gt;\u0026gt;/etc/samba/smb.conf \u0026lt;\u0026lt;\u0026#39;MYENDMARK\u0026#39; ######## 我的samba共享设置 ######## [Ubuntu] ## 这是我的共享名称 comment = mysamba ## 共享目录的路径 path = /mnt ## 指定共享是否应该在网络邻居中被浏览到，yes显示共享名称，no隐藏共享名称。 browseable = yes ## 是否允许用户写入此共享，yes为可写入，no为不可写入。 writeable = yes ## 指定共享用户是否可读写，yes为只读，no为读写。 read only = no ## 新建文件的默认权限掩码 create mask = 0777 ## 新建目录的默认权限掩码 directory mask = 0777 ## 允许访客否 guest ok = no ## 强制用户为root force user = root ## 强制组为root force group = root ## 定义管理员用户列表 admin users = admin ## 定义允许访问此共享的有效用户列表，也可以是组名（以 @ 开头） valid users = admin,root ## 要求密码访问 password required = yes ## 共享是否可用， yes为显示共享，no 为隐藏共享 available = yes ## 对于Apple文件进行编码 fruit:encoding = native ## 对于Apple文件元数据 fruit:metadata = stream ## 设置为 no 表示Samba不会拒绝AppleDouble文件 fruit:veto_appledouble = no ## 这些VFS模块可以增强Samba服务器的功能 vfs objects = catia fruit streams_xattr MYENDMARK ## 新建admin用户 \u0026amp;\u0026amp; 为admin用户创建两次密码 useradd admin \u0026amp;\u0026amp; (echo mobufan; echo mobufan) | smbpasswd -a -s admin \u0026amp;\u0026amp; sudo systemctl restart smbd EOF sudo chmod +x ~/smb.sh \u0026amp;\u0026amp; sudo bash smb.sh 1 cat /smb.sh ## 查看脚本 三 、Ubuntu为samba客户端配置（追加内容） 1 、Ubuntu为samba客户端配置（追加内容） 1 2 3 4 5 6 7 sudo apt update \u0026amp;\u0026amp; sudo apt install samba -y \u0026amp;\u0026amp; mkdir -pm 755 /mnt/ARS2-SMB \u0026amp;\u0026amp; tee -a /etc/fstab \u0026lt;\u0026lt;\u0026#39;EOF\u0026#39; ## Ubuntu为samba客户端配置（追加内容） ## 服务器地址和共享名：10.10.10.251/ARS2，挂载到本地路径： /mnt/ARS2-SMB，账户：root，密码：mobufan //10.10.10.251/ARS2 /mnt/ARS2-SMB cifs username=root,password=mobufan 0 0 EOF reboot 2 、查看samba用户 1 sudo pdbedit -L 3 、添加root用户到samba\u0026mdash;可以忽略 1 sudo smbpasswd -a root 四 、其他非必要的命令 1 、如果您有UFW防火墙运行，允许Samba通过： 1 sudo ufw allow samba 2 、关闭 samba 服务命令： 1 sudo service smbd stop 3 、启动 samba 服务命令： 1 sudo service smbd start 4 、重启 samba 服务命令： 1 sudo service smbd restart ","date":"2025-01-29T14:13:35+08:00","image":"https://file.meimolihan.eu.org/img/samba-02.jpg","permalink":"https://meimolihan.eu.org/p/ubuntu%E9%85%8D%E7%BD%AEsamba%E6%9C%8D%E5%8A%A1/","title":"Ubuntu配置samba服务"},{"content":" CentOS 配置 samba 服务 一 、samba 基础设置 1 、更新软件包+安装samba+samba服务开机自启+重启samba服务 1 yum update \u0026amp;\u0026amp; yum install samba \u0026amp;\u0026amp; sudo systemctl enable smb \u0026amp;\u0026amp; sudo systemctl restart smb 2 、创建admin用户+设置admin用户密码 1 useradd admin \u0026amp;\u0026amp; smbpasswd -a admin 二 、CentOS为服务端samba配置 1 、备份samba配置文件 1 cp -i /etc/samba/smb.conf /etc/samba/smb.conf.bak \u0026amp;\u0026amp; cd /etc/samba \u0026amp;\u0026amp; ls 2 、方法一、覆盖samba服务配置文件+修改/mnt目录的权限+重启samba服务+查看IP地址 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 mkdir -pm 755 /mnt \u0026amp;\u0026amp; chmod +x /etc/samba/smb.conf \u0026amp;\u0026amp; cat \u0026gt; /etc/samba/smb.conf \u0026lt;\u0026lt;\u0026#39;EOF\u0026#39; ################################### ######## samba全局配置 ######## [global] ## 设置工作组名称 workgroup = WORKGROUP ## 设置非活动连接被关闭的时间（分钟） deadtime = 99 ## 服务器描述字符串 server string = Samba on CentOS ## 设置网络基本输入/输出系统（NetBIOS）名称 netbios name = CentOS ## Unix字符集设置为UTF-8 unix charset = UTF-8 ## 禁用核心转储 enable core files = no ## 设置安全模式为用户级别 security = user ## 将未知用户映射为访客 map to guest = Bad User ## 设置socket选项，优化网络传输性能 socket options = IPTOS_LOWDELAY TCP_NODELAY ## 设置最大传输单元大小 max xmit = 131072 ## 设置最小接收文件大小，用于异步I/O操作 min receivefile size = 131072 ## 启用假的机会锁 fake oplocks = Yes ## 启用sendfile系统调用，提高文件传输效率 use sendfile = Yes ## 设置异步I/O读取阈值，0表示禁用 aio read size = 0 ## 设置异步I/O写入阈值，0表示禁用 aio write size = 0 ## 设置服务器支持的最低SMB协议版本 server min protocol = NT1 ## 允许使用NTLMv1认证方式 ntlm auth = ntlmv1-permitted ## 禁用自动加载printcap打印机 load printers = No ## 设置打印服务不使用printcap printcap name = /dev/null ## 禁用SPOOLSS服务 disable spoolss = yes ## 设置打印机状态信息的解释方式 printing = bsd ## 设置通过MDNS广告的服务器名称 mdns name = mdns ## 设置Samba不共享的文件和目录列表 veto files = /Thumbs.db/.DS_Store/._.DS_Store/.apdisk/ ## 允许删除只包含veto文件的目录 delete veto files = yes # 设置无效用户 # invalid users = root ## 指定服务器应该监听 SMB 流量的端口。 ## 139 是 netbios/nmbd # smb ports = 445 139 ######## 我的samba共享设置 ######## [CentOS] ## 这是我的共享名称 comment = mysamba ## 共享目录的路径 path = /mnt ## 指定共享是否应该在网络邻居中被浏览到，yes显示共享名称，no隐藏共享名称。 browseable = yes ## 是否允许用户写入此共享，yes为可写入，no为不可写入。 writeable = yes ## 指定共享用户是否可读写，yes为只读，no为读写。 read only = no ## 新建文件的默认权限掩码 create mask = 0777 ## 新建目录的默认权限掩码 directory mask = 0777 ## 允许访客否 guest ok = no ## 强制用户为root force user = root ## 强制组为root force group = root ## 定义管理员用户列表 admin users = admin ## 定义允许访问此共享的有效用户列表，也可以是组名（以 @ 开头） valid users = admin,root ## 要求密码访问 password required = yes ## 共享是否可用， yes为显示共享，no 为隐藏共享 available = yes ## 对于Apple文件进行编码 fruit:encoding = native ## 对于Apple文件元数据 fruit:metadata = stream ## 设置为 no 表示Samba不会拒绝AppleDouble文件 fruit:veto_appledouble = no ## 这些VFS模块可以增强Samba服务器的功能 vfs objects = catia fruit streams_xattr EOF chown admin /mnt/ \u0026amp;\u0026amp; systemctl restart smb \u0026amp;\u0026amp; hostname -i 3 、方法二、追加samba服务配置文件+修改/mnt目录的权限+重启samba服务+查看IP地址 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 mkdir -pm 755 /mnt \u0026amp;\u0026amp; chmod +x /etc/samba/smb.conf \u0026amp;\u0026amp; tee -a /etc/samba/smb.conf \u0026lt;\u0026lt;\u0026#39;EOF\u0026#39; ################################### ######## 我的samba共享设置 ######## [CentOS] ## 这是我的共享名称 comment = mysamba ## 共享目录的路径 path = /mnt ## 指定共享是否应该在网络邻居中被浏览到，yes显示共享名称，no隐藏共享名称。 browseable = yes ## 是否允许用户写入此共享，yes为可写入，no为不可写入。 writeable = yes ## 指定共享用户是否可读写，yes为只读，no为读写。 read only = no ## 新建文件的默认权限掩码 create mask = 0777 ## 新建目录的默认权限掩码 directory mask = 0777 ## 允许访客否 guest ok = no ## 强制用户为root force user = root ## 强制组为root force group = root ## 定义管理员用户列表 admin users = admin ## 定义允许访问此共享的有效用户列表，也可以是组名（以 @ 开头） valid users = admin,root ## 要求密码访问 password required = yes ## 共享是否可用， yes为显示共享，no 为隐藏共享 available = yes ## 对于Apple文件进行编码 fruit:encoding = native ## 对于Apple文件元数据 fruit:metadata = stream ## 设置为 no 表示Samba不会拒绝AppleDouble文件 fruit:veto_appledouble = no ## 这些VFS模块可以增强Samba服务器的功能 vfs objects = catia fruit streams_xattr EOF chown admin /mnt/mydisk \u0026amp;\u0026amp; systemctl restart smb \u0026amp;\u0026amp; hostname -i 4 、方法三、一键开启SMB脚本(追加内容) 下面是一‮便个‬捷开启Smb‮脚的‬本，并且配置了CentOS目‮的录‬共享。默认共享‮号账‬为admin，密码为mobufan\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 touch ~/smb.sh \u0026amp;\u0026amp; cat \u0026gt; /smb.sh \u0026lt;\u0026lt;\u0026#39;EOF\u0026#39; #!/bin/bash yum update -y \u0026amp;\u0026amp; yum install samba -y mkdir -pm 755 /mnt \u0026amp;\u0026amp; cat \u0026gt;\u0026gt;/etc/samba/smb.conf \u0026lt;\u0026lt;\u0026#39;MYENDMARK\u0026#39; [CentOS] ## 这是我的共享名称 comment = mysamba ## 共享目录的路径 path = /mnt ## 指定共享是否应该在网络邻居中被浏览到，yes显示共享名称，no隐藏共享名称。 browseable = yes ## 是否允许用户写入此共享，yes为可写入，no为不可写入。 writeable = yes ## 指定共享用户是否可读写，yes为只读，no为读写。 read only = no ## 新建文件的默认权限掩码 create mask = 0777 ## 新建目录的默认权限掩码 directory mask = 0777 ## 允许访客否 guest ok = no ## 强制用户为root force user = root ## 强制组为root force group = root ## 定义管理员用户列表 admin users = admin ## 定义允许访问此共享的有效用户列表，也可以是组名（以 @ 开头） valid users = admin,root ## 要求密码访问 password required = yes ## 共享是否可用， yes为显示共享，no 为隐藏共享 available = yes ## 对于Apple文件进行编码 fruit:encoding = native ## 对于Apple文件元数据 fruit:metadata = stream ## 设置为 no 表示Samba不会拒绝AppleDouble文件 fruit:veto_appledouble = no ## 这些VFS模块可以增强Samba服务器的功能 vfs objects = catia fruit streams_xattr MYENDMARK ## 新建admin用户 \u0026amp;\u0026amp; 为admin用户创建两次`mobufan`密码 useradd admin \u0026amp;\u0026amp; (echo mobufan; echo mobufan) | smbpasswd -a -s admin systemctl restart smb EOF chmod +x ~/smb.sh \u0026amp;\u0026amp; bash smb.sh 1 cat /smb.sh ## 查看脚本 三 、CentOS 8为samba客户端配置（追加内容） 1 2 3 4 5 6 7 8 yum update \u0026amp;\u0026amp; yum install samba \u0026amp;\u0026amp; sudo systemctl enable smb \u0026amp;\u0026amp; sudo systemctl restart smb \u0026amp;\u0026amp; mkdir -pm 755 /mnt/ARS2-SMB \u0026amp;\u0026amp; tee -a /etc/fstab \u0026lt;\u0026lt;\u0026#39;EOF\u0026#39; ## CentOS 8为samba客户端配置（追加内容） ## 服务器地址和共享名：10.10.10.251/ARS2，挂载到本地路径： /mnt/ARS2-SMB，账户：root，密码：mobufan //10.10.10.251/ARS2 /mnt/ARS2-SMB cifs username=root,password=mobufan 0 0 EOF reboot 四 、验证samba服务 1 、安装smbclient 1 yum update \u0026amp;\u0026amp; yum install samba-client 2 、验证samba服务 1 smbclient //10.10.10.246/ContOS -U admin ## 输入密码后，ls看一下，ctrl+c退出 3 、查询有没有安装samba，查询命令如下： 1 rpm -qa|grep samba 4 、查看samba服务状态 1 systemctl status smb 5 、查看samba用户 1 pdbedit -L 6 、添加root用户到samba\u0026mdash;可以忽略 1 smbpasswd -a root ","date":"2025-01-29T14:09:16+08:00","image":"https://file.meimolihan.eu.org/img/samba-02.jpg","permalink":"https://meimolihan.eu.org/p/centos-%E9%85%8D%E7%BD%AE-samba-%E6%9C%8D%E5%8A%A1/","title":"CentOS 配置 samba 服务"},{"content":" Debian12 配置 samba 服务 一 、samba共享 基本设置 1、安装samba+samba自启动+重启samba 1 apt-get update \u0026amp;\u0026amp; apt install samba \u0026amp;\u0026amp; systemctl enable smb \u0026amp;\u0026amp; service smbd restart 2、新建samba用户+设置密码 1 useradd admin \u0026amp;\u0026amp; smbpasswd -a admin 二 、Debian为samba服务端配置 1 、备份samba配置文件 1 cp -i /etc/samba/smb.conf /etc/samba/smb.conf.bak \u0026amp;\u0026amp; ls /etc/samba 2 、方法一、覆盖samba配置文件+重启samba+开机自启动samba 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 mkdir -pm 755 /mnt \u0026amp;\u0026amp; chmod +x /etc/samba/smb.conf \u0026amp;\u0026amp; cat \u0026gt; /etc/samba/smb.conf \u0026lt;\u0026lt;\u0026#39;EOF\u0026#39; ################################### ######## samba全局配置 ######## [global] ## 设置工作组名称 workgroup = WORKGROUP ## 设置非活动连接被关闭的时间（分钟） deadtime = 99 ## 服务器描述字符串 server string = Samba on Debian ## 设置网络基本输入/输出系统（NetBIOS）名称 netbios name = Debian ## Unix字符集设置为UTF-8 unix charset = UTF-8 ## 禁用核心转储 enable core files = no ## 设置安全模式为用户级别 security = user ## 将未知用户映射为访客 map to guest = Bad User ## 设置socket选项，优化网络传输性能 socket options = IPTOS_LOWDELAY TCP_NODELAY ## 设置最大传输单元大小 max xmit = 131072 ## 设置最小接收文件大小，用于异步I/O操作 min receivefile size = 131072 ## 启用假的机会锁 fake oplocks = Yes ## 启用sendfile系统调用，提高文件传输效率 use sendfile = Yes ## 设置异步I/O读取阈值，0表示禁用 aio read size = 0 ## 设置异步I/O写入阈值，0表示禁用 aio write size = 0 ## 设置服务器支持的最低SMB协议版本 server min protocol = NT1 ## 允许使用NTLMv1认证方式 ntlm auth = ntlmv1-permitted ## 禁用自动加载printcap打印机 load printers = No ## 设置打印服务不使用printcap printcap name = /dev/null ## 禁用SPOOLSS服务 disable spoolss = yes ## 设置打印机状态信息的解释方式 printing = bsd ## 设置通过MDNS广告的服务器名称 mdns name = mdns ## 设置Samba不共享的文件和目录列表 veto files = /Thumbs.db/.DS_Store/._.DS_Store/.apdisk/ ## 允许删除只包含veto文件的目录 delete veto files = yes # 设置无效用户 # invalid users = root ## 指定服务器应该监听 SMB 流量的端口。 ## 139 是 netbios/nmbd # smb ports = 445 139 ######## 我的samba共享设置 ######## [Debian] ## 这是我的共享名称 comment = mysamba ## 共享目录的路径 path = /mnt ## 指定共享是否应该在网络邻居中被浏览到，yes显示共享名称，no隐藏共享名称。 browseable = yes ## 是否允许用户写入此共享，yes为可写入，no为不可写入。 writeable = yes ## 指定共享用户是否可读写，yes为只读，no为读写。 read only = no ## 新建文件的默认权限掩码 create mask = 0777 ## 新建目录的默认权限掩码 directory mask = 0777 ## 允许访客否 guest ok = no ## 强制用户为root force user = root ## 强制组为root force group = root ## 定义管理员用户列表 admin users = admin ## 定义允许访问此共享的有效用户列表，也可以是组名（以 @ 开头） valid users = admin,root ## 要求密码访问 password required = yes ## 共享是否可用， yes为显示共享，no 为隐藏共享 available = yes ## 对于Apple文件进行编码 fruit:encoding = native ## 对于Apple文件元数据 fruit:metadata = stream ## 设置为 no 表示Samba不会拒绝AppleDouble文件 fruit:veto_appledouble = no ## 这些VFS模块可以增强Samba服务器的功能 vfs objects = catia fruit streams_xattr EOF service smbd restart \u0026amp;\u0026amp; systemctl enable smb \u0026amp;\u0026amp; hostname -i 3 、方法二、追加samba配置文件+添加宿主+重启samba服务+查看ip地址 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 mkdir -pm 755 /mnt \u0026amp;\u0026amp; chmod +x /etc/samba/smb.conf \u0026amp;\u0026amp; tee -a /etc/samba/smb.conf \u0026lt;\u0026lt;\u0026#39;EOF\u0026#39; ################################### ######## 我的samba共享设置 ######## [Debian] ## 这是我的共享名称 comment = mysamba ## 共享目录的路径 path = /mnt ## 指定共享是否应该在网络邻居中被浏览到，yes显示共享名称，no隐藏共享名称。 browseable = yes ## 是否允许用户写入此共享，yes为可写入，no为不可写入。 writeable = yes ## 指定共享用户是否可读写，yes为只读，no为读写。 read only = no ## 新建文件的默认权限掩码 create mask = 0777 ## 新建目录的默认权限掩码 directory mask = 0777 ## 允许访客否 guest ok = no ## 强制用户为root force user = root ## 强制组为root force group = root ## 定义管理员用户列表 admin users = admin ## 定义允许访问此共享的有效用户列表，也可以是组名（以 @ 开头） valid users = admin,root ## 要求密码访问 password required = yes ## 共享是否可用， yes为显示共享，no 为隐藏共享 available = yes ## 对于Apple文件进行编码 fruit:encoding = native ## 对于Apple文件元数据 fruit:metadata = stream ## 设置为 no 表示Samba不会拒绝AppleDouble文件 fruit:veto_appledouble = no ## 这些VFS模块可以增强Samba服务器的功能 vfs objects = catia fruit streams_xattr EOF chown admin:admin /mnt/ \u0026amp;\u0026amp; service smbd restart \u0026amp;\u0026amp; hostname -i 4 、方法三、一键开启SMB脚本(追加内容) 下面是一‮便个‬捷开启Smb‮脚的‬本，并且配置了Debian目‮的录‬共享。默认共享‮号账‬为admin密码为mobufan\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 touch ~/smb.sh \u0026amp;\u0026amp; cat \u0026gt; /smb.sh \u0026lt;\u0026lt;\u0026#39;EOF\u0026#39; #!/bin/bash apt update \u0026amp;\u0026amp; apt install samba -y mkdir -pm 755 /mnt \u0026amp;\u0026amp; cat \u0026gt;\u0026gt;/etc/samba/smb.conf \u0026lt;\u0026lt;\u0026#39;MYENDMARK\u0026#39; ######## 我的samba共享设置 ######## [Debian] ## 这是我的共享名称 comment = mysamba ## 共享目录的路径 path = /mnt ## 指定共享是否应该在网络邻居中被浏览到，yes显示共享名称，no隐藏共享名称。 browseable = yes ## 是否允许用户写入此共享，yes为可写入，no为不可写入。 writeable = yes ## 指定共享用户是否可读写，yes为只读，no为读写。 read only = no ## 新建文件的默认权限掩码 create mask = 0777 ## 新建目录的默认权限掩码 directory mask = 0777 ## 允许访客否 guest ok = no ## 强制用户为root force user = root ## 强制组为root force group = root ## 定义管理员用户列表 admin users = admin ## 定义允许访问此共享的有效用户列表，也可以是组名（以 @ 开头） valid users = admin,root ## 要求密码访问 password required = yes ## 共享是否可用， yes为显示共享，no 为隐藏共享 available = yes ## 对于Apple文件进行编码 fruit:encoding = native ## 对于Apple文件元数据 fruit:metadata = stream ## 设置为 no 表示Samba不会拒绝AppleDouble文件 fruit:veto_appledouble = no ## 这些VFS模块可以增强Samba服务器的功能 vfs objects = catia fruit streams_xattr MYENDMARK ## 新建admin用户 \u0026amp;\u0026amp; 为admin用户创建两次`mobufan`密码 useradd admin \u0026amp;\u0026amp; (echo mobufan; echo mobufan) | smbpasswd -a -s admin systemctl restart smbd EOF chmod +x ~/smb.sh \u0026amp;\u0026amp; bash smb.sh 1 cat /smb.sh ## 查看脚本 二 、Debian为samba客户端配置（追加内容） 1 2 3 4 5 6 7 8 apt-get update \u0026amp;\u0026amp; apt install samba \u0026amp;\u0026amp; systemctl enable smb \u0026amp;\u0026amp; service smbd restart \u0026amp;\u0026amp; mkdir -pm 755 /mnt/ARS2-SMB \u0026amp;\u0026amp; tee -a /etc/fstab \u0026lt;\u0026lt;\u0026#39;EOF\u0026#39; ## Debian为samba客户端配置（追加内容） ## 服务器地址和共享名：10.10.10.251/ARS2，挂载到本地路径：/mnt/ARS2-SMB，账户：root，密码：mobufan //10.10.10.251/ARS2 /mnt/ARS2-SMB cifs username=root,password=mobufan 0 0 EOF reboot 三 、验证samba服务 1 、安装smbclient 1 apt-get update \u0026amp;\u0026amp; apt install smbclient 2 、验证samba服务 1 smbclient //10.10.10.245/Debian -U admin ## 输入密码后，ls看一下，ctrl+c退出 3 、查看samba用户 1 pdbedit -L 4 、添加root用户到samba\u0026mdash;可以忽略 1 smbpasswd -a root ","date":"2025-01-29T14:05:31+08:00","image":"https://file.meimolihan.eu.org/img/samba-02.jpg","permalink":"https://meimolihan.eu.org/p/debian-%E9%85%8D%E7%BD%AEsamba%E6%9C%8D%E5%8A%A1/","title":"Debian 配置samba服务"},{"content":" pve LXC容器磁盘挂载+samba共享 LXC 容器磁盘挂载+samba共享\nPVE节点执行下方命令\n其中243表示LXC容器虚拟机编号 mp0表示第一个挂载点 /mnt/mydisk为LXC内部的挂载点\n一、PVE-Shell LXC容器磁盘挂载 1、在PVE创建挂载路径+磁盘挂载到容器内部+重启243容器 1 mkdir -p /mnt/mydisk \u0026amp;\u0026amp; pct set 243 -mp0 /mnt/mydisk,mp=/mnt/mydisk \u0026amp;\u0026amp; lxc-stop -n 243 \u0026amp;\u0026amp; lxc-start -n 243 -d 2、PVE-Shell 取消挂载命令 2.1 、查看挂载信息 1 df -h 我的磁盘信息是 /dev/mapper/pve-root\n2.2、 取消挂载，在客户端执行命令 1 umount /dev/mapper/pve-root 二、iStoreOS配置samba共享 1、添加名为admin的用户+为用户admin创建admin服务的密码 1 useradd admin \u0026amp;\u0026amp; smbpasswd -a admin 2、创建一个文件夹用于samba共享+使用户admin获得文件夹权限 1 mkdir -p -m 777 /mnt/mydisk \u0026amp;\u0026amp; chown -R admin:admin /mnt/mydisk 3、iStoreOS后台配置samba共享 ","date":"2025-01-29T14:00:00+08:00","image":"https://file.meimolihan.eu.org/img/samba-02.jpg","permalink":"https://meimolihan.eu.org/p/pve-lxc%E5%AE%B9%E5%99%A8%E7%A3%81%E7%9B%98%E6%8C%82%E8%BD%BD-samba%E5%85%B1%E4%BA%AB/","title":"Pve LXC容器磁盘挂载+samba共享"},{"content":" Alpine 配置 SSH 服务 1、Alpine安装SSH 1 apk add --no-cache openssh-server 2、查看SSH配置文件 1 cat /etc/ssh/sshd_config 3、修改sshd_config配置文件+重启sshd 1 2 3 4 5 6 7 8 sudo sed -i.bak \\ -e \u0026#39;/Port 22/ a Port 22\u0026#39; \\ -e \u0026#39;/PermitRootLogin/ a PermitRootLogin yes\u0026#39; \\ -e \u0026#39;/ClientAliveInterval/ a ClientAliveInterval 10\u0026#39; \\ -e \u0026#39;/ClientAliveCountMax/ a ClientAliveCountMax 999\u0026#39; \\ /etc/ssh/sshd_config service sshd restart \u0026amp;\u0026amp; ip addr show eth0 | grep eth0 解释如下：\n1 2 3 4 5 6 7 8 9 10 11 12 -i.bak备份为sshd_config.bak #PasswordAuthentication yes #PermitRootLogin yes SSH保持连接 #ClientAliveInterval 0 #ClientAliveCountMax 3 修改为： PasswordAuthentication yes PermitRootLogin yes SSH保持连接 ClientAliveInterval 10 ClientAliveCountMax 999 ","date":"2025-01-29T13:55:44+08:00","image":"https://file.meimolihan.eu.org/img/alpine-02.jpg","permalink":"https://meimolihan.eu.org/p/alpine-%E9%85%8D%E7%BD%AE-ssh-%E6%9C%8D%E5%8A%A1/","title":"Alpine 配置 SSH 服务"},{"content":" Ubuntu 配置SSH服务 1 、安装SSH服务器 更新软件索引+安装SSH服务器\n1 sudo apt update \u0026amp;\u0026amp; sudo apt install openssh-server 2 、检查SSH服务的状态 1 sudo systemctl status ssh 如果服务正在运行，你将看到“active (running)”的状态信息。\n3 、查看SSH配置文件 1 cat /etc/ssh/sshd_config 4 、修改配置文件+保持连接+重启ssh服务，使配置生效+查看IP地址 1 2 3 4 5 6 7 8 9 10 sudo sed -i.bak \\ -e \u0026#39;/Port 22/ a Port 22\u0026#39; \\ -e \u0026#39;/PermitRootLogin/ a PermitRootLogin yes\u0026#39; \\ -e \u0026#39;/GSSAPIAuthentication/ a GSSAPIAuthentication no\u0026#39; \\ -e \u0026#39;/UseDNS/ a UseDNS no\u0026#39; \\ -e \u0026#39;/ClientAliveInterval/ a ClientAliveInterval 10\u0026#39; \\ -e \u0026#39;/ClientAliveCountMax/ a ClientAliveCountMax 999\u0026#39; \\ /etc/ssh/sshd_config systemctl restart ssh \u0026amp;\u0026amp; hostname -I 解释如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 -i.bak备份为sshd_config.bak #Port 22 #PermitRootLogin prohibit-password # GSSAPIAuthentication no #UseDNS no SSH保持连接 # ClientAliveInterval 0 # ClientAliveCountMax 3 修改为： Port 22 PermitRootLogin yes GSSAPIAuthentication no UseDNS no SSH保持连接 ClientAliveInterval 10 ClientAliveCountMax 999 5 、SSH服务开启、设置、检查 1 sudo systemctl start ssh # 启动 SSH 服务 1 sudo systemctl enable ssh # 设置 SSH 服务在开机时自动启动 1 sudo systemctl status ssh # 检查 SSH 服务状态 没有报错说明SSH服务开启成功，按Ctrl+Z退出\n6 、检查防火墙设置 使用以下命令允许22号端口通过Ubuntu防火墙：\n1 sudo ufw allow ssh 7 、查看IP地址 1 hostname -I ","date":"2025-01-29T07:20:58+08:00","image":"https://file.meimolihan.eu.org/img/ubuntu-03.jpg","permalink":"https://meimolihan.eu.org/p/ubuntu%E9%85%8D%E7%BD%AEssh%E6%9C%8D%E5%8A%A1/","title":"Ubuntu配置SSH服务"},{"content":" CentOS 配置SSH 服务 1、更新软件包+安装 openssh-server 1 yum -y update \u0026amp;\u0026amp; yum install -y openssl openssh-server 2、查看SSH配置文件 1 cat /etc/ssh/sshd_config 3、修改‮置配‬文件+重新启动 SSH 服务，使更改生效 1 2 3 4 5 6 7 8 sed -i.bak \\ -e \u0026#39;/Port 22/ a Port 22\u0026#39; \\ -e \u0026#39;/PermitRootLogin/ a PermitRootLogin yes\u0026#39; \\ -e \u0026#39;/ClientAliveInterval/ a ClientAliveInterval 10\u0026#39; \\ -e \u0026#39;/ClientAliveCountMax/ a ClientAliveCountMax 999\u0026#39; \\ /etc/ssh/sshd_config systemctl restart sshd \u0026amp;\u0026amp; hostname -I 解释如下：\n1 2 3 4 5 6 7 8 9 10 11 12 -i.bak备份为sshd_config.bak #Port 22 #PermitRootLogin prohibit-password SSH保持连接 # ClientAliveInterval 0 # ClientAliveCountMax 3 修改为： Port 22 PermitRootLogin yes SSH保持连接 ClientAliveInterval 10 ClientAliveCountMax 999 ","date":"2025-01-29T06:56:14+08:00","image":"https://file.meimolihan.eu.org/img/centos-03.jpg","permalink":"https://meimolihan.eu.org/p/centos-%E9%85%8D%E7%BD%AE-ssh-%E6%9C%8D%E5%8A%A1/","title":"CentOS 配置 SSH 服务"},{"content":" Debian12 配置 SSH 服务 1、 安装SSH服务器软件包 更新软件索引+安装SSH+SSH开机自启\n1 sudo apt-get update \u0026amp;\u0026amp; sudo apt-get install openssh-server \u0026amp;\u0026amp; sudo systemctl start ssh \u0026amp;\u0026amp; sudo systemctl enable ssh 2、查看SSH配置文件 1 cat /etc/ssh/sshd_config 3、修改配置文件+重启ssh服务，使配置生效+查看IP地址 1 2 3 4 5 6 7 8 9 10 sudo sed -i.bak \\ -e \u0026#39;/Port 22/ a Port 22\u0026#39; \\ -e \u0026#39;/PermitRootLogin/ a PermitRootLogin yes\u0026#39; \\ -e \u0026#39;/GSSAPIAuthentication/ a GSSAPIAuthentication no\u0026#39; \\ -e \u0026#39;/UseDNS/ a UseDNS no\u0026#39; \\ -e \u0026#39;/ClientAliveInterval/ a ClientAliveInterval 10\u0026#39; \\ -e \u0026#39;/ClientAliveCountMax/ a ClientAliveCountMax 999\u0026#39; \\ /etc/ssh/sshd_config systemctl restart ssh \u0026amp;\u0026amp; hostname -i 解释如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 -i.bak备份为sshd_config.bak #Port 22 #PermitRootLogin prohibit-password #GSSAPIAuthentication no #UseDNS no SSH保持连接 #ClientAliveInterval 0 #ClientAliveCountMax 3 修改为： Port 22 PermitRootLogin yes GSSAPIAuthentication no UseDNS no SSH保持连接 ClientAliveInterval 10 ClientAliveCountMax 999 ","date":"2025-01-29T06:50:43+08:00","image":"https://file.meimolihan.eu.org/img/debian-05.jpg","permalink":"https://meimolihan.eu.org/p/debian-%E9%85%8D%E7%BD%AE-ssh-%E6%9C%8D%E5%8A%A1/","title":"Debian 配置 SSH 服务"},{"content":" PVE 配置 SSH 服务 1、 安装SSH服务器软件包 更新软件索引+安装SSH+SSH开机自启\n1 sudo apt-get update \u0026amp;\u0026amp; sudo apt-get install openssh-server \u0026amp;\u0026amp; sudo systemctl start ssh \u0026amp;\u0026amp; sudo systemctl enable ssh 2、查看SSH配置文件 1 cat /etc/ssh/sshd_config 3、修改配置文件+重启ssh服务，使配置生效+查看IP地址 1 2 3 4 5 6 7 8 9 10 sudo sed -i.bak \\ -e \u0026#39;/Port 22/ a Port 22\u0026#39; \\ -e \u0026#39;/PermitRootLogin/ a PermitRootLogin yes\u0026#39; \\ -e \u0026#39;/GSSAPIAuthentication/ a GSSAPIAuthentication no\u0026#39; \\ -e \u0026#39;/UseDNS/ a UseDNS no\u0026#39; \\ -e \u0026#39;/ClientAliveInterval/ a ClientAliveInterval 10\u0026#39; \\ -e \u0026#39;/ClientAliveCountMax/ a ClientAliveCountMax 999\u0026#39; \\ /etc/ssh/sshd_config systemctl restart ssh \u0026amp;\u0026amp; hostname -i 解释如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 -i.bak备份为sshd_config.bak #Port 22 #PermitRootLogin prohibit-password #GSSAPIAuthentication no #UseDNS no SSH保持连接 #ClientAliveInterval 0 #ClientAliveCountMax 3 \u0026gt;\u0026gt; 修改为： Port 22 PermitRootLogin yes GSSAPIAuthentication no UseDNS no SSH保持连接 ClientAliveInterval 10 ClientAliveCountMax 999 ","date":"2025-01-28T18:26:40+08:00","image":"https://file.meimolihan.eu.org/img/pve-03.jpg","permalink":"https://meimolihan.eu.org/p/pve%E9%85%8D%E7%BD%AEssh%E6%9C%8D%E5%8A%A1/","title":"PVE配置SSH服务"},{"content":" 十六进制颜色代码 一 、红色 预览 颜色名称 十六进制颜色代码 浅三文鱼 (Light Salmon) #FFA07A 三文鱼 (Salmon) #FA8072 黑鲑 (Dark Salmon) #E9967A 轻珊瑚(Light Coral) #F08080 印第安红 (Indian Red) #CD5C5C 赤红 (Crimson) #DC143C 耐火砖 (Firebrick) #B22222 红色(Red ) #FF0000 深红 (Dark Red) #8B0000 二 、橘色 预览 颜色名称 十六进制颜色代码 珊瑚 (Coral) #FF7F50 番茄 (Tomato) #FF6347 橙红色 (Orange Red) #FF4500 金 (Gold) #FFD700 橙子 (Orange) #FFA500 深橙色 (Dark Orange) #FF8C00 三 、黄色 预览 颜色名称 十六进制颜色代码 浅黄色 (Light Yellow) #FFFFE0 柠檬雪纺 (Lemon Chiffon) #FFFACD 浅金黄色 (Light Goldenrod Yellow) #FAFAD2 木瓜鞭 (Papaya Whip) #FFEFD5 莫卡辛 (Moccasin) #FFE4B5 桃扑 (Peach Puff) #FFDAB9 淡金黄色 (Pale Goldenrod) #EEE8AA 黄褐色 (Khaki) #F0E68C 黑色卡其色 (Dark Khaki) #BDB76B 黄色 (Yellow) #FFFF00 四 、绿色 预览 颜色名称 十六进制颜色代码 草坪绿 (Lawn Green) #7CFC00 黄绿色 (Chartreuse) #7FFF00 柠檬绿 (Lime Green) #32CD32 酸橙 (Lime) #00FF00 森林绿 (Forest Green) #228B22 绿色 (Green) #008000 深绿色 (Dark Green) #006400 黄绿色 (Green Yellow) #ADFF2F 黄绿色 (Yellow Green) #9ACD32 春绿色 (Spring Green) #00FF7F 中春绿色 (Medium Spring Green) #00FA9A 浅绿色 (Light Green) #90EE90 淡绿色 (Pale Green) #98FB98 深海绿色 (Dark Sea Green) #8FBC8F 中海绿色 (Medium Sea Green) #3CB371 海绿色 (Sea Green) #2E8B57 橄榄 (Olive) #808000 深橄榄绿色 (Dark Olive Green) #556B2F 橄榄灰 (Olive Drab) #6B8E23 五 、青色 预览 颜色名称 十六进制颜色代码 浅蓝 (Light Blue) #E0FFFF 青色 (Cyan) #00FFFF 水色 (Aqua) #00FFFF 蓝晶 (Aquamarine) #7FFFD4 海蓝宝石 (Medium Turquoise) #66CDAA 浅绿色 (Pale Turquoise) #AFEEEE 绿松石 (Turquoise) #40E0D0 绿松石色 (Medium Turquoise) #48D1CC 深蓝绿色 (Dark Turquoise) #00CED1 浅海绿色 (Light Sea Green) #20B2AA 军校蓝 (Cadet Blue) #5F9EA0 深蓝 (Dark Cyan) #008B8B 蓝绿色 (Teal) #008080 六 、蓝色 预览 颜色名称 十六进制颜色代码 粉蓝色 (Powder Blue) #B0E0E6 浅蓝 (Light Blue) #ADD8E6 天蓝色 (Sky Blue) #87CEFA 天蓝色 (Sky Blue) #87CEEB 深蓝 (Deep Sky Blue) #00BFFF 浅蓝色 (Light Steel Blue) #B0C4DE 道奇蓝 (Dodger Blue) #1E90FF 矢车菊蓝 (Cornflower Blue) #6495ED 钢蓝 (Steel Blue) #4682B4 宝蓝色 (Royal Blue) #4169E1 蓝色 (Blue) #0000FF 中蓝 (Medium Blue) #0000CD 深蓝 (Dark Blue) #00008B 海军蓝 (Navy) #000080 午夜蓝 (Midnight Blue) #191970 深蓝色 (Medium Slate Blue) #7B68EE 石板蓝 (Slate Blue) #6A5ACD 深蓝色 (Dark Slate Blue) #483D8B 七 、紫色 预览 颜色名称 十六进制颜色代码 薰衣草 (Lavender) #E6E6FA 蓟 (Thistle) #D8BFD8 李子 (Plum) #DDA0DD 紫色 (Violet) #EE82EE 兰花 (Orchid) #DA70D6 紫红色 (Magenta) #FF00FF 品红 (Fuchsia) #FF00FF 兰花 (Medium Orchid) #BA55D3 中紫色 (Medium Purple) #9370DB 紫罗兰色 (Blue Violet) #8A2BE2 暗紫 (Dark Violet) #9400D3 兰花 (Dark Orchid) #9932CC 深洋红色 (Dark Magenta) #8B008B 紫色 (Purple) #800080 靛青 (Indigo) #4B0082 八 、粉红色 预览 颜色名称 十六进制颜色代码 粉色 (Pink) #FFC0CB 浅粉红色 (Light Pink) #FFB6C1 亮粉色 (Hot Pink) #FF69B4 深粉红色 (Deep Pink) #FF1493 泛紫 (Pale Violet Red) #DB7093 中紫色 (Medium Violet Red) #C71585 九 、白色 预览 颜色名称 十六进制颜色代码 白色 (White) #FFFFFF 雪 (Snow) #FFFAFA 甘露 (Honeydew) #F0FFF0 薄荷 (Mint Cream) #F5FFFA 天蓝色 (Azure) #F0FFFF 爱丽丝蓝 (Alice Blue) #F0F8FF 幽灵般的白色 (Ghost White) #F8F8FF 白色的烟 (White Smoke) #F5F5F5 贝壳 (Seashell) #FFF5EE 米色 (Beige) #F5F5DC 老花边 (Old Lace) #FDF5E6 花白色 (Floral White) #FFFAF0 象牙 (Ivory) #FFFFF0 古董白 (Antique White) #FAEBD7 麻布 (Linen) #FAF0E6 薰衣草腮红 (Lavender Blush) #FFF0F5 迷雾玫瑰 (Misty Rose) #FFE4E1 十 、灰色 预览 颜色名称 十六进制颜色代码 恩斯伯勒 (Gainsboro) #DCDCDC 浅灰 (Light Gray) #D3D3D3 银 (Silver) #C0C0C0 深灰色 (Dark Gray) #A9A9A9 灰色 (Gray) #808080 暗灰色 (Dim Gray) #696969 光一体化 (Light Slate Gray) #778899 滑脱 (Slate Gray) #708090 黑暗崩解 (Dark Slate Gray) #2F4F4F 黑色 (Black) #000000 十一 、棕色 预览 颜色名称 十六进制颜色代码 玉米丝 (Cornsilk) #FFF8DC 布兰查德蒙德 (Blanched Almond) #FFEBCD 浓汤 (Papaya Whip) #FFE4C4 纳瓦霍怀特 (Navajo White) #FFDEAD 小麦 (Wheat) #F5DEB3 淡棕色 (Burlywood) #DEB887 棕褐色 (Tan) #D2B48C 红褐色 (Rosy Brown) #BC8F8F 沙棕 (Sandy Brown) #F4A460 金毛 (Goldenrod) #DAA520 秘鲁 (Peru) #CD853F 巧克力 (Chocolate) #D2691E 马鞍棕色 (Saddle Brown) #8B4513 赭色 (Sienna) #A0522D 棕色 (Brown) #A52A2A 栗色 (Maroon) #800000 ","date":"2025-01-28T18:15:20+08:00","image":"https://file.meimolihan.eu.org/img/rgb-01.jpg","permalink":"https://meimolihan.eu.org/p/%E5%8D%81%E5%85%AD%E8%BF%9B%E5%88%B6%E9%A2%9C%E8%89%B2%E4%BB%A3%E7%A0%81/","title":"十六进制颜色代码"},{"content":" Markdown 内容折叠 Markdown教程： https://md.xalaok.top 方法一 1 2 3 4 5 \u0026lt;details\u0026gt; \u0026lt;summary\u0026gt; \u0026lt;font color=#FF4500 size=4\u0026gt; 内容已折叠 \u0026lt;/font\u0026gt; \u0026lt;/summary\u0026gt; 静夜思\u0026lt;br\u0026gt; 床前看月光，疑是地上霜。\u0026lt;br\u0026gt; 举头望山月，低头思故乡。 \u0026lt;/details\u0026gt; 内容已折叠 静夜思\n床前看月光，疑是地上霜。\n举头望山月，低头思故乡。 方法二 1 2 3 4 5 6 7 \u0026lt;details\u0026gt; \u0026lt;summary\u0026gt; \u0026lt;font color=#FF4500 size=4\u0026gt; 内容已折叠 \u0026lt;/font\u0026gt; \u0026lt;/summary\u0026gt; 静夜思 床前看月光，疑是地上霜。 举头望山月，低头思故乡。 \u0026lt;/details\u0026gt; 内容已折叠 静夜思 床前看月光，疑是地上霜。 举头望山月，低头思故乡。 ","date":"2025-01-28T18:11:27+08:00","image":"https://file.meimolihan.eu.org/img/markdown-02.jpg","permalink":"https://meimolihan.eu.org/p/markdown-%E5%86%85%E5%AE%B9%E6%8A%98%E5%8F%A0/","title":"Markdown 内容折叠"},{"content":"Markdown教程： https://md.xalaok.top Markdown 下划线 下划虚线 1 \u0026lt;span style=\u0026#34;border-bottom: 2px dashed red;\u0026#34;\u0026gt;下划虚线\u0026lt;/span\u0026gt; 下划虚线示例\n单下划线 1 \u0026lt;span style=\u0026#34;border-bottom: 1px solid red;\u0026#34;\u0026gt;单下划线\u0026lt;/span\u0026gt; 单下划线示例\n双下划线 1 \u0026lt;span style=\u0026#34;border-bottom: thick double #32a1ce;\u0026#34;\u0026gt;双下划线\u0026lt;/span\u0026gt; 双下划线示例\n下划虚线 1 \u0026lt;span style=\u0026#34;border-bottom: 2px dotted red;\u0026#34;\u0026gt;下划虚线\u0026lt;/span\u0026gt; 下划虚线示例\n假冒着重号 1 \u0026lt;span style=\u0026#34;border-bottom: 8px dotted red;\u0026#34;\u0026gt;假冒着重号\u0026lt;/span\u0026gt; 假冒着重号示例\n","date":"2025-01-28T18:08:50+08:00","image":"https://file.meimolihan.eu.org/img/markdown-02.jpg","permalink":"https://meimolihan.eu.org/p/markdown-%E4%B8%8B%E5%88%92%E7%BA%BF/","title":"Markdown 下划线"},{"content":"Markdown教程： https://md.xalaok.top Markdown 网址链接 链接鼠标悬浮提示 1 [百度](https://www.baidu.com \u0026#34;这是百度链接\u0026#34;) 链接鼠标悬浮提示示例 百度 链接加粗 1 **\u0026lt;https://mp.weixin.qq.com\u0026gt;** 链接加粗示例 https://mp.weixin.qq.com 链接引用 1 2 3 4 5 6 早饭后，我打开 [每日英语听力][1] 学习英语。遇到不懂的英语单词，我借助 [欧路在线词典][2] 查看释义并加入生词本，方便使用 [客户端][3] 随时记忆单词。 [1]: https://dict.eudic.net/ting \u0026#34;每日英语听力\u0026#34; [2]: https://dict.eudic.net/ \u0026#34;《欧路词典》在线版\u0026#34; [3]: https://www.eudic.net/v4/en/app/eudic \u0026#34;《欧路词典》英语翻译软件\u0026#34; 链接引用示例 早饭后，我打开 每日英语听力 学习英语。遇到不懂的英语单词，我借助 欧路在线词典 查看释义并加入生词本，方便使用 客户端 随时记忆单词。\n图标链接 徽章网站： https://shields.io Github 图标链接 1 Github 图标链接 2 图标链接 3 图标链接 4\n","date":"2025-01-28T18:05:19+08:00","image":"https://file.meimolihan.eu.org/img/markdown-02.jpg","permalink":"https://meimolihan.eu.org/p/markdown-%E7%BD%91%E5%9D%80%E9%93%BE%E6%8E%A5/","title":"Markdown 网址链接"},{"content":"Markdown教程： https://md.xalaok.top Markdown 粗体和斜体 粗体 1 **粗体** 斜体 1 *斜体* 粗斜体 1 ***粗斜体*** ","date":"2025-01-28T18:00:32+08:00","image":"https://file.meimolihan.eu.org/img/markdown-02.jpg","permalink":"https://meimolihan.eu.org/p/markdown-%E7%B2%97%E4%BD%93%E5%92%8C%E6%96%9C%E4%BD%93/","title":"Markdown 粗体和斜体"},{"content":" Markdown 内容脚注 脚注可以为内容添加注释和参考脚注使用 [^1]: 注释一内容的形式定义，[^1]为脚注标识，^后可跟数字或单词(这里为数字1)，脚注内容与标识之间用冒号加空格隔开引用脚注只需在内容后加脚注标识即可\n1 2 3 4 5 危楼[^1]高百尺[^2]，手可摘星辰[^3]。 [^1]: 高楼，这里指山顶的寺庙 [^2]: 虚指，不是实数，这里形容楼很高 [^3]: 天上的星星统称 下面是脚注示例\n危楼1高百尺2，手可摘星辰3。\n高楼，这里指山顶的寺庙\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n虚指，不是实数，这里形容楼很高\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n天上的星星统称\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":"2025-01-28T17:56:46+08:00","image":"https://file.meimolihan.eu.org/img/markdown-02.jpg","permalink":"https://meimolihan.eu.org/p/markdown-%E5%86%85%E5%AE%B9%E8%84%9A%E6%B3%A8/","title":"Markdown 内容脚注"},{"content":" Markdown 表格语法 1 、表格语法,内容居中 1 2 3 4 |年龄|班级|名字| | :---: | :---: | :---: | |18|二班|小凡凡| |18|三班|涵涵| 我是《表格语法,内容居中》示例：\n年龄 班级 名字 18 二班 小凡凡 18 三班 涵涵 2 、表格语法,内容左对齐 1 2 3 4 |年龄|班级|名字| | :---| :--- | :--- | |18|二班|小凡凡| |18|三班|涵涵| 我是《表格语法,内容左对齐》示例：\n年龄 班级 名字 18 二班 小凡凡 18 三班 涵涵 ","date":"2025-01-28T17:51:09+08:00","image":"https://file.meimolihan.eu.org/img/markdown-02.jpg","permalink":"https://meimolihan.eu.org/p/markdown-%E8%A1%A8%E6%A0%BC%E8%AF%AD%E6%B3%95/","title":"Markdown 表格语法"},{"content":" Markdown 文本高亮 1 、局部文字加粗高亮 1 \u0026lt;mark\u0026gt;**文本高亮**\u0026lt;/mark\u0026gt;测试 我是《局部文字加粗高亮》示例：\n文本高亮测试\n2 、整行文字加粗高亮 1 \u0026lt;mark\u0026gt;**文本高亮测试** 我是《整行文字加粗高亮》示例：\n文本高亮测试\n说明：高亮开始，高亮结束。 ","date":"2025-01-28T17:48:07+08:00","image":"https://file.meimolihan.eu.org/img/markdown-02.jpg","permalink":"https://meimolihan.eu.org/p/markdown-%E6%96%87%E6%9C%AC%E9%AB%98%E4%BA%AE/","title":"Markdown 文本高亮"},{"content":" Markdown 字体大小添加颜色 color：规定十六进制字体颜色。 Size：规定字体大小，取值从 1 到 7 ，浏览器默认值是 3。 face：规定字体。\n黑体 1 \u0026lt;font color=#00ffff size=4 face=\u0026#34;黑体\u0026#34;\u0026gt;我是黑体字\u0026lt;/font\u0026gt; 我是黑体字\n微软雅黑 1 \u0026lt;font color=#00ffff size=4 face=\u0026#34;微软雅黑\u0026#34;\u0026gt;我是微软雅黑\u0026lt;/font\u0026gt; 我是微软雅黑\n华文彩云 1 \u0026lt;font color=#00ffff size=4 face=\u0026#34;STCAIYUN\u0026#34;\u0026gt;我是华文彩云\u0026lt;/font\u0026gt; 我是华文彩云\n华文行楷 1 \u0026lt;font color=#00ffff size=4 face=\u0026#34;华文行楷\u0026#34;\u0026gt;我是华文行楷\u0026lt;/font\u0026gt; 我是华文行楷\n宋体 1 \u0026lt;font color=#00ffff size=4 face=\u0026#34;宋体\u0026#34;\u0026gt;我是宋体\u0026lt;/font\u0026gt; 我是宋体\n仿宋体 1 \u0026lt;font color=#00ffff size=4 face=\u0026#34;仿宋\u0026#34;\u0026gt;我是仿宋体\u0026lt;/font\u0026gt; 我是仿宋体\n幼圆 1 \u0026lt;font color=#00ffff size=4 face=\u0026#34;幼圆\u0026#34;\u0026gt;我是幼圆\u0026lt;/font\u0026gt; 我是幼圆\n十六进制颜色代码 一 、红色 预览 颜色名称 十六进制颜色代码 浅三文鱼 (Light Salmon) #FFA07A 三文鱼 (Salmon) #FA8072 黑鲑 (Dark Salmon) #E9967A 轻珊瑚(Light Coral) #F08080 印第安红 (Indian Red) #CD5C5C 赤红 (Crimson) #DC143C 耐火砖 (Firebrick) #B22222 红色(Red ) #FF0000 深红 (Dark Red) #8B0000 二 、橘色 预览 颜色名称 十六进制颜色代码 珊瑚 (Coral) #FF7F50 番茄 (Tomato) #FF6347 橙红色 (Orange Red) #FF4500 金 (Gold) #FFD700 橙子 (Orange) #FFA500 深橙色 (Dark Orange) #FF8C00 三 、黄色 预览 颜色名称 十六进制颜色代码 浅黄色 (Light Yellow) #FFFFE0 柠檬雪纺 (Lemon Chiffon) #FFFACD 浅金黄色 (Light Goldenrod Yellow) #FAFAD2 木瓜鞭 (Papaya Whip) #FFEFD5 莫卡辛 (Moccasin) #FFE4B5 桃扑 (Peach Puff) #FFDAB9 淡金黄色 (Pale Goldenrod) #EEE8AA 黄褐色 (Khaki) #F0E68C 黑色卡其色 (Dark Khaki) #BDB76B 黄色 (Yellow) #FFFF00 四 、绿色 预览 颜色名称 十六进制颜色代码 草坪绿 (Lawn Green) #7CFC00 黄绿色 (Chartreuse) #7FFF00 柠檬绿 (Lime Green) #32CD32 酸橙 (Lime) #00FF00 森林绿 (Forest Green) #228B22 绿色 (Green) #008000 深绿色 (Dark Green) #006400 黄绿色 (Green Yellow) #ADFF2F 黄绿色 (Yellow Green) #9ACD32 春绿色 (Spring Green) #00FF7F 中春绿色 (Medium Spring Green) #00FA9A 浅绿色 (Light Green) #90EE90 淡绿色 (Pale Green) #98FB98 深海绿色 (Dark Sea Green) #8FBC8F 中海绿色 (Medium Sea Green) #3CB371 海绿色 (Sea Green) #2E8B57 橄榄 (Olive) #808000 深橄榄绿色 (Dark Olive Green) #556B2F 橄榄灰 (Olive Drab) #6B8E23 五 、青色 预览 颜色名称 十六进制颜色代码 浅蓝 (Light Blue) #E0FFFF 青色 (Cyan) #00FFFF 水色 (Aqua) #00FFFF 蓝晶 (Aquamarine) #7FFFD4 海蓝宝石 (Medium Turquoise) #66CDAA 浅绿色 (Pale Turquoise) #AFEEEE 绿松石 (Turquoise) #40E0D0 绿松石色 (Medium Turquoise) #48D1CC 深蓝绿色 (Dark Turquoise) #00CED1 浅海绿色 (Light Sea Green) #20B2AA 军校蓝 (Cadet Blue) #5F9EA0 深蓝 (Dark Cyan) #008B8B 蓝绿色 (Teal) #008080 六 、蓝色 预览 颜色名称 十六进制颜色代码 粉蓝色 (Powder Blue) #B0E0E6 浅蓝 (Light Blue) #ADD8E6 天蓝色 (Sky Blue) #87CEFA 天蓝色 (Sky Blue) #87CEEB 深蓝 (Deep Sky Blue) #00BFFF 浅蓝色 (Light Steel Blue) #B0C4DE 道奇蓝 (Dodger Blue) #1E90FF 矢车菊蓝 (Cornflower Blue) #6495ED 钢蓝 (Steel Blue) #4682B4 宝蓝色 (Royal Blue) #4169E1 蓝色 (Blue) #0000FF 中蓝 (Medium Blue) #0000CD 深蓝 (Dark Blue) #00008B 海军蓝 (Navy) #000080 午夜蓝 (Midnight Blue) #191970 深蓝色 (Medium Slate Blue) #7B68EE 石板蓝 (Slate Blue) #6A5ACD 深蓝色 (Dark Slate Blue) #483D8B 七 、紫色 预览 颜色名称 十六进制颜色代码 薰衣草 (Lavender) #E6E6FA 蓟 (Thistle) #D8BFD8 李子 (Plum) #DDA0DD 紫色 (Violet) #EE82EE 兰花 (Orchid) #DA70D6 紫红色 (Magenta) #FF00FF 品红 (Fuchsia) #FF00FF 兰花 (Medium Orchid) #BA55D3 中紫色 (Medium Purple) #9370DB 紫罗兰色 (Blue Violet) #8A2BE2 暗紫 (Dark Violet) #9400D3 兰花 (Dark Orchid) #9932CC 深洋红色 (Dark Magenta) #8B008B 紫色 (Purple) #800080 靛青 (Indigo) #4B0082 八 、粉红色 预览 颜色名称 十六进制颜色代码 粉色 (Pink) #FFC0CB 浅粉红色 (Light Pink) #FFB6C1 亮粉色 (Hot Pink) #FF69B4 深粉红色 (Deep Pink) #FF1493 泛紫 (Pale Violet Red) #DB7093 中紫色 (Medium Violet Red) #C71585 九 、白色 预览 颜色名称 十六进制颜色代码 白色 (White) #FFFFFF 雪 (Snow) #FFFAFA 甘露 (Honeydew) #F0FFF0 薄荷 (Mint Cream) #F5FFFA 天蓝色 (Azure) #F0FFFF 爱丽丝蓝 (Alice Blue) #F0F8FF 幽灵般的白色 (Ghost White) #F8F8FF 白色的烟 (White Smoke) #F5F5F5 贝壳 (Seashell) #FFF5EE 米色 (Beige) #F5F5DC 老花边 (Old Lace) #FDF5E6 花白色 (Floral White) #FFFAF0 象牙 (Ivory) #FFFFF0 古董白 (Antique White) #FAEBD7 麻布 (Linen) #FAF0E6 薰衣草腮红 (Lavender Blush) #FFF0F5 迷雾玫瑰 (Misty Rose) #FFE4E1 十 、灰色 预览 颜色名称 十六进制颜色代码 恩斯伯勒 (Gainsboro) #DCDCDC 浅灰 (Light Gray) #D3D3D3 银 (Silver) #C0C0C0 深灰色 (Dark Gray) #A9A9A9 灰色 (Gray) #808080 暗灰色 (Dim Gray) #696969 光一体化 (Light Slate Gray) #778899 滑脱 (Slate Gray) #708090 黑暗崩解 (Dark Slate Gray) #2F4F4F 黑色 (Black) #000000 十一 、棕色 预览 颜色名称 十六进制颜色代码 玉米丝 (Cornsilk) #FFF8DC 布兰查德蒙德 (Blanched Almond) #FFEBCD 浓汤 (Papaya Whip) #FFE4C4 纳瓦霍怀特 (Navajo White) #FFDEAD 小麦 (Wheat) #F5DEB3 淡棕色 (Burlywood) #DEB887 棕褐色 (Tan) #D2B48C 红褐色 (Rosy Brown) #BC8F8F 沙棕 (Sandy Brown) #F4A460 金毛 (Goldenrod) #DAA520 秘鲁 (Peru) #CD853F 巧克力 (Chocolate) #D2691E 马鞍棕色 (Saddle Brown) #8B4513 赭色 (Sienna) #A0522D 棕色 (Brown) #A52A2A 栗色 (Maroon) #800000 ","date":"2025-01-28T17:41:34+08:00","image":"https://file.meimolihan.eu.org/img/markdown-02.jpg","permalink":"https://meimolihan.eu.org/p/markdown%E5%AD%97%E4%BD%93%E5%A4%A7%E5%B0%8F%E6%B7%BB%E5%8A%A0%E9%A2%9C%E8%89%B2/","title":"Markdown字体大小添加颜色"},{"content":" Markdown 嵌入图片 1 、 基础图‮语片‬法 1 ![我的图‮名片‬称](https://pic3.zhimg.com/v2-52e3d25b08972370aeefe92a202e5ba3_r.jpg) 以下是《基础图‮语片‬法》示例：\n2、带链接的图片语法（）内为图片链接 1 ![https://pic3.zhimg.com/v2-52e3d25b08972370aeefe92a202e5ba3_r.jpg](https://pic3.zhimg.com/v2-52e3d25b08972370aeefe92a202e5ba3_r.jpg) 以下是《带链接的图片语法》示例：\n3 、链接图像并调整图像大小的语法 设置宽度为300像素，width=\u0026ldquo;300\u0026rdquo; 高度为200像素，height=\u0026ldquo;200\u0026rdquo;\n1 \u0026lt;img src=\u0026#34;https://pic3.zhimg.com/v2-52e3d25b08972370aeefe92a202e5ba3_r.jpg\u0026#34; alt=\u0026#34;示例图片\u0026#34; width=\u0026#34;300\u0026#34; height=\u0026#34;200\u0026#34;\u0026gt; 以下是《链接图像并调整图像大小的语法》示例：\n","date":"2025-01-28T17:38:23+08:00","image":"https://file.meimolihan.eu.org/img/markdown-02.jpg","permalink":"https://meimolihan.eu.org/p/markdown-%E5%B5%8C%E5%85%A5%E5%9B%BE%E7%89%87/","title":"Markdown 嵌入图片"},{"content":" Markdown 警告框 警告框注释 \u0026lt;div style=\u0026quot;background: #FFD700; padding: 12px;\u0026quot;\u0026gt;\n定义警告框颜色为：\t#FFD700 定义警告框大小为：12px，\n警告内容注释 \u0026lt;p style=\u0026quot;font-size:22px;color:#8B0000;\u0026quot;\u0026gt;\u0026lt;strong\u0026gt;警告：这是一个警告框。\u0026lt;/strong\u0026gt;\u0026lt;/p\u0026gt;\n定义文字大小：font-size:22px 定义文字颜色：color:#8B0000 定义内容加粗：\u0026lt;strong\u0026gt;警告：这是一个警告框。\u0026lt;/strong\u0026gt;\n\u0026lt;strong\u0026gt; 和 \u0026lt;/strong\u0026gt; 被包裹的文本以加粗的形式显示。 \u0026lt;/strong\u0026gt;是一个结束标签。后面的字体变成正常字体\n一 、警告框示例：警告加粗，内容正常 1 2 3 \u0026lt;div style=\u0026#34;background: #FFD700; padding: 12px;\u0026#34;\u0026gt; \u0026lt;p style=\u0026#34;font-size:22px;\u0026#34;\u0026gt;\u0026lt;strong\u0026gt;警告：\u0026lt;/strong\u0026gt;这是一个警告框。\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; 以下是警告框示例：警告加粗，内容正常\n警告：这是一个警告框。\n二 、警告框示例：全部文字加粗 1 2 3 \u0026lt;div style=\u0026#34;background: #FFD700; padding: 12px;\u0026#34;\u0026gt; \u0026lt;p style=\u0026#34;font-size:22px;\u0026#34;\u0026gt;\u0026lt;strong\u0026gt;警告：这是一个警告框。\u0026lt;/strong\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; 以下是警告框示例：全部文字加粗\n警告：这是一个警告框。\n三 、警告框示例：全部文字加粗并添加颜色 1 2 3 \u0026lt;div style=\u0026#34;background: #FFD700; padding: 12px;\u0026#34;\u0026gt; \u0026lt;p style=\u0026#34;font-size:22px;color:#8B0000;\u0026#34;\u0026gt;\u0026lt;strong\u0026gt;警告：这是一个警告框。\u0026lt;/strong\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; 以下是警告框示例：全部文字加粗并添加颜色\n警告：这是一个警告框。\n四 、警告框示例：全部文字加粗居中并添加颜色 1 2 3 \u0026lt;div style=\u0026#34;background: #FFD700; padding: 12px; display: flex; flex-direction: column; justify-content: center;\u0026#34;\u0026gt; \u0026lt;p style=\u0026#34;font-size:22px;color:#8B0000;text-align:center;\u0026#34;\u0026gt;\u0026lt;strong\u0026gt;警告：这是一个警告框。\u0026lt;/strong\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; 以下是警告框示例：全部文字加粗居中并添加颜色\n警告：这是一个警告框。\n十六进制颜色代码 一 、红色 预览 颜色名称 十六进制颜色代码 浅三文鱼 (Light Salmon) #FFA07A 三文鱼 (Salmon) #FA8072 黑鲑 (Dark Salmon) #E9967A 轻珊瑚(Light Coral) #F08080 印第安红 (Indian Red) #CD5C5C 赤红 (Crimson) #DC143C 耐火砖 (Firebrick) #B22222 红色(Red ) #FF0000 深红 (Dark Red) #8B0000 二 、橘色 预览 颜色名称 十六进制颜色代码 珊瑚 (Coral) #FF7F50 番茄 (Tomato) #FF6347 橙红色 (Orange Red) #FF4500 金 (Gold) #FFD700 橙子 (Orange) #FFA500 深橙色 (Dark Orange) #FF8C00 三 、黄色 预览 颜色名称 十六进制颜色代码 浅黄色 (Light Yellow) #FFFFE0 柠檬雪纺 (Lemon Chiffon) #FFFACD 浅金黄色 (Light Goldenrod Yellow) #FAFAD2 木瓜鞭 (Papaya Whip) #FFEFD5 莫卡辛 (Moccasin) #FFE4B5 桃扑 (Peach Puff) #FFDAB9 淡金黄色 (Pale Goldenrod) #EEE8AA 黄褐色 (Khaki) #F0E68C 黑色卡其色 (Dark Khaki) #BDB76B 黄色 (Yellow) #FFFF00 四 、绿色 预览 颜色名称 十六进制颜色代码 草坪绿 (Lawn Green) #7CFC00 黄绿色 (Chartreuse) #7FFF00 柠檬绿 (Lime Green) #32CD32 酸橙 (Lime) #00FF00 森林绿 (Forest Green) #228B22 绿色 (Green) #008000 深绿色 (Dark Green) #006400 黄绿色 (Green Yellow) #ADFF2F 黄绿色 (Yellow Green) #9ACD32 春绿色 (Spring Green) #00FF7F 中春绿色 (Medium Spring Green) #00FA9A 浅绿色 (Light Green) #90EE90 淡绿色 (Pale Green) #98FB98 深海绿色 (Dark Sea Green) #8FBC8F 中海绿色 (Medium Sea Green) #3CB371 海绿色 (Sea Green) #2E8B57 橄榄 (Olive) #808000 深橄榄绿色 (Dark Olive Green) #556B2F 橄榄灰 (Olive Drab) #6B8E23 五 、青色 预览 颜色名称 十六进制颜色代码 浅蓝 (Light Blue) #E0FFFF 青色 (Cyan) #00FFFF 水色 (Aqua) #00FFFF 蓝晶 (Aquamarine) #7FFFD4 海蓝宝石 (Medium Turquoise) #66CDAA 浅绿色 (Pale Turquoise) #AFEEEE 绿松石 (Turquoise) #40E0D0 绿松石色 (Medium Turquoise) #48D1CC 深蓝绿色 (Dark Turquoise) #00CED1 浅海绿色 (Light Sea Green) #20B2AA 军校蓝 (Cadet Blue) #5F9EA0 深蓝 (Dark Cyan) #008B8B 蓝绿色 (Teal) #008080 六 、蓝色 预览 颜色名称 十六进制颜色代码 粉蓝色 (Powder Blue) #B0E0E6 浅蓝 (Light Blue) #ADD8E6 天蓝色 (Sky Blue) #87CEFA 天蓝色 (Sky Blue) #87CEEB 深蓝 (Deep Sky Blue) #00BFFF 浅蓝色 (Light Steel Blue) #B0C4DE 道奇蓝 (Dodger Blue) #1E90FF 矢车菊蓝 (Cornflower Blue) #6495ED 钢蓝 (Steel Blue) #4682B4 宝蓝色 (Royal Blue) #4169E1 蓝色 (Blue) #0000FF 中蓝 (Medium Blue) #0000CD 深蓝 (Dark Blue) #00008B 海军蓝 (Navy) #000080 午夜蓝 (Midnight Blue) #191970 深蓝色 (Medium Slate Blue) #7B68EE 石板蓝 (Slate Blue) #6A5ACD 深蓝色 (Dark Slate Blue) #483D8B 七 、紫色 预览 颜色名称 十六进制颜色代码 薰衣草 (Lavender) #E6E6FA 蓟 (Thistle) #D8BFD8 李子 (Plum) #DDA0DD 紫色 (Violet) #EE82EE 兰花 (Orchid) #DA70D6 紫红色 (Magenta) #FF00FF 品红 (Fuchsia) #FF00FF 兰花 (Medium Orchid) #BA55D3 中紫色 (Medium Purple) #9370DB 紫罗兰色 (Blue Violet) #8A2BE2 暗紫 (Dark Violet) #9400D3 兰花 (Dark Orchid) #9932CC 深洋红色 (Dark Magenta) #8B008B 紫色 (Purple) #800080 靛青 (Indigo) #4B0082 八 、粉红色 预览 颜色名称 十六进制颜色代码 粉色 (Pink) #FFC0CB 浅粉红色 (Light Pink) #FFB6C1 亮粉色 (Hot Pink) #FF69B4 深粉红色 (Deep Pink) #FF1493 泛紫 (Pale Violet Red) #DB7093 中紫色 (Medium Violet Red) #C71585 九 、白色 预览 颜色名称 十六进制颜色代码 白色 (White) #FFFFFF 雪 (Snow) #FFFAFA 甘露 (Honeydew) #F0FFF0 薄荷 (Mint Cream) #F5FFFA 天蓝色 (Azure) #F0FFFF 爱丽丝蓝 (Alice Blue) #F0F8FF 幽灵般的白色 (Ghost White) #F8F8FF 白色的烟 (White Smoke) #F5F5F5 贝壳 (Seashell) #FFF5EE 米色 (Beige) #F5F5DC 老花边 (Old Lace) #FDF5E6 花白色 (Floral White) #FFFAF0 象牙 (Ivory) #FFFFF0 古董白 (Antique White) #FAEBD7 麻布 (Linen) #FAF0E6 薰衣草腮红 (Lavender Blush) #FFF0F5 迷雾玫瑰 (Misty Rose) #FFE4E1 十 、灰色 预览 颜色名称 十六进制颜色代码 恩斯伯勒 (Gainsboro) #DCDCDC 浅灰 (Light Gray) #D3D3D3 银 (Silver) #C0C0C0 深灰色 (Dark Gray) #A9A9A9 灰色 (Gray) #808080 暗灰色 (Dim Gray) #696969 光一体化 (Light Slate Gray) #778899 滑脱 (Slate Gray) #708090 黑暗崩解 (Dark Slate Gray) #2F4F4F 黑色 (Black) #000000 十一 、棕色 预览 颜色名称 十六进制颜色代码 玉米丝 (Cornsilk) #FFF8DC 布兰查德蒙德 (Blanched Almond) #FFEBCD 浓汤 (Papaya Whip) #FFE4C4 纳瓦霍怀特 (Navajo White) #FFDEAD 小麦 (Wheat) #F5DEB3 淡棕色 (Burlywood) #DEB887 棕褐色 (Tan) #D2B48C 红褐色 (Rosy Brown) #BC8F8F 沙棕 (Sandy Brown) #F4A460 金毛 (Goldenrod) #DAA520 秘鲁 (Peru) #CD853F 巧克力 (Chocolate) #D2691E 马鞍棕色 (Saddle Brown) #8B4513 赭色 (Sienna) #A0522D 棕色 (Brown) #A52A2A 栗色 (Maroon) #800000 ","date":"2025-01-28T17:34:18+08:00","image":"https://file.meimolihan.eu.org/img/markdown-02.jpg","permalink":"https://meimolihan.eu.org/p/markdown-%E8%AD%A6%E5%91%8A%E6%A1%86/","title":"Markdown 警告框"},{"content":" Markdown 嵌入视频 Markdown 嵌入视频链接 1 \u0026lt;video src=\u0026#34;和风天气时钟插件安装.mp4\u0026#34; controls=\u0026#34;controls\u0026#34; width=\u0026#34;650\u0026#34; height=\u0026#34;300\u0026#34;\u0026gt;\u0026lt;/video\u0026gt; Markdown 嵌入哔哩哔哩视频 获得哔哩哔哩视频嵌入代码方法 哔哩哔哩点击分享按钮，点击嵌入代码，会自动复制内容 哔哩哔哩视频嵌入完整代码如下： \u0026lt;iframe src=\u0026quot;//player.bilibili.com/player.html?isOutside=true\u0026amp;aid=327623069\u0026amp;bvid=BV1JA411h7Gw\u0026amp;cid=171385214\u0026amp;p=1\u0026quot; scrolling=\u0026quot;no\u0026quot; border=\u0026quot;0\u0026quot; frameborder=\u0026quot;no\u0026quot; framespacing=\u0026quot;0\u0026quot; allowfullscreen=\u0026quot;true\u0026quot;\u0026gt;\u0026lt;/iframe\u0026gt;\u0026quot;\n一 、首先将上面的代码拆分为两部分（方便理解） 第一部分 、视频链接参数部分 原视频链接参数部分： \u0026lt;iframe src=\u0026quot;//player.bilibili.com/player.html？isOutside=true\u0026amp;aid=327623069\u0026amp;bvid=BV1JA411h7Gw\u0026amp;cid=171385214\u0026amp;p=1\u0026quot;\n将视频链接参数部分，在第一个双引号里面最后不用加空格添加以下内容：\n1 \u0026amp;high_quality=1\u0026amp;danmaku=0\u0026amp;autoplay=0 添加的内容说明如下： high_quality\t1 最高画质 0 最低画质 danmaku\t1 打开弹幕 0 关闭弹幕 autoplay\t1 打开自动播放 0 关闭自动播放 这是《视频链接参数》修改后的样子\n\u0026lt;iframe src=\u0026quot;//player.bilibili.com/player.html?isOutside=true\u0026amp;aid=327623069\u0026amp;bvid=BV1JA411h7Gw\u0026amp;cid=171385214\u0026amp;p=1\u0026amp;high_quality=1\u0026amp;danmaku=0\u0026amp;autoplay=0\u0026quot;\n第二部分 、iframe 参数部分 原视频的 \u0026ldquo;iframe\u0026rdquo; 参数: scrolling=\u0026quot;no\u0026quot; border=\u0026quot;0\u0026quot; frameborder=\u0026quot;no\u0026quot; framespacing=\u0026quot;0\u0026quot; allowfullscreen=\u0026quot;true\u0026quot;\u0026gt;\u0026lt;/iframe\u0026gt; 将上面的iframe 参数，在 \u0026quot;true\u0026quot; 后面 加空格粘贴以下内容： 1 sandbox=\u0026#34;allow-top-navigation allow-same-origin allow-forms allow-scripts\u0026#34; width=\u0026#34;100%\u0026#34; height=\u0026#34;446\u0026#34; 添加的内容说明如下： allowfullscreen 允许全屏 **true **允许 **false **不允许 width 宽度像素 height 高度像素 sandbox=\u0026ldquo;allow-top-navigation allow-same-origin allow-forms allow-scripts \u0026ldquo;禁止弹出网页 这是《iframe 参数》修改后的样子\nscrolling=\u0026quot;no\u0026quot; border=\u0026quot;0\u0026quot; frameborder=\u0026quot;no\u0026quot; framespacing=\u0026quot;0\u0026quot; allowfullscreen=\u0026quot;true\u0026quot; sandbox=\u0026quot;allow-top-navigation allow-same-origin allow-forms allow-scripts\u0026quot; width=\u0026quot;100%\u0026quot; height=\u0026quot;446\u0026quot;\u0026gt;\u0026lt;/iframe\u0026gt;\n二 、 合并两段中间加空格修改后的代码： \u0026lt;iframe src=\u0026quot;//player.bilibili.com/player.html?isOutside=true\u0026amp;aid=327623069\u0026amp;bvid=BV1JA411h7Gw\u0026amp;cid=171385214\u0026amp;p=1\u0026amp;high_quality=1\u0026amp;danmaku=0\u0026amp;autoplay=0\u0026quot; scrolling=\u0026quot;no\u0026quot; border=\u0026quot;0\u0026quot; frameborder=\u0026quot;no\u0026quot; framespacing=\u0026quot;0\u0026quot; allowfullscreen=\u0026quot;true\u0026quot; sandbox=\u0026quot;allow-top-navigation allow-same-origin allow-forms allow-scripts\u0026quot; width=\u0026quot;100%\u0026quot; height=\u0026quot;446\u0026quot;\u0026gt;\u0026lt;/iframe\u0026gt;\n我是《Markdown 视频语法》示例：\n","date":"2025-01-28T17:27:24+08:00","image":"https://file.meimolihan.eu.org/img/markdown-02.jpg","permalink":"https://meimolihan.eu.org/p/markdown-%E5%B5%8C%E5%85%A5%E8%A7%86%E9%A2%91/","title":"Markdown 嵌入视频"},{"content":" caddy 负载均衡 下面将以【example.com】域名为例 mtab 标签页： https://mtab.example.com:666 1 2 3 4 5 6 7 8 9 10 11 12 13 14 ## caddy 负载均衡 负载轮询 mkdir -pm 755 /usr/local/caddy/conf.d \u0026amp;\u0026amp; touch /usr/local/caddy/conf.d/mtab.conf \u0026amp;\u0026amp; chmod u+x /usr/local/caddy/conf.d/mtab.conf \u0026amp;\u0026amp; cat \u0026gt; /usr/local/caddy/conf.d/mtab.conf \u0026lt;\u0026lt;\u0026#39;EOF\u0026#39; https://mtab.example.com:666 { encode gzip tls /usr/local/caddy/ssl/full_chain.pem /usr/local/caddy/ssl/private.key reverse_proxy /* http://10.10.10.88:9200 http://10.10.10.88:9200 { header_up Host {http.reverse_proxy.upstream.hostport} lb_policy round_robin ## 依次轮询每条上游 } } EOF cd /usr/local/caddy \u0026amp;\u0026amp; ./caddy fmt --overwrite \u0026amp;\u0026amp; ./caddy reload ","date":"2025-01-25T14:45:02+08:00","image":"https://file.meimolihan.eu.org/img/caddy-03.jpg","permalink":"https://meimolihan.eu.org/p/caddy-%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/","title":"Caddy 负载均衡"},{"content":" caddy 搭建 webdav 服务器 下面将以【example.com】域名为例 一 、Ubuntu 安装二进制 Caddy 1 、创建Caddy存放目录（包括证书存放目录） 1 mkdir -p /usr/local/caddy/ssl \u0026amp;\u0026amp; cd /usr/local/caddy 2 、下载Caddy 到【 Caddy官网 】下载对应平台的二进制文件（我使用的，平台选择Linux amd64），选中带有WebDAV插件的可执行程序，点击下载\n3 、将下载好的Caddy程序上传到/usr/local/caddy目录中 4 、修改程序名称为caddy 1 cd /usr/local/caddy \u0026amp;\u0026amp; mv caddy_linux_* caddy 5 、赋予执行权限 1 chmod u+x /usr/local/caddy/caddy 6 、升级Caddy版本 1 cd /usr/local/caddy \u0026amp;\u0026amp; ./caddy upgrade 7 、查看当前二进制文件中包含的非标准模块的包名列表。 1 cd /usr/local/caddy \u0026amp;\u0026amp; ./caddy list-modules --packages 8 、二进制caddy升级命令 1 cd /usr/local/caddy \u0026amp;\u0026amp; ./caddy add-package github.com/caddyserver/caddy/v2 9 、查看 Caddy 版本 1 cd /usr/local/caddy \u0026amp;\u0026amp; ./caddy version 10 、查看caddy默认端口 1 curl localhost:2019 二 、创建 webdav 文件服务配置文件 webdav 文件服务： https://file.example.com:666 1 、windows挂载：此电脑\u0026ndash;右键网络\u0026ndash;映射网络驱动器\u0026ndash;添加下面的链接 1 https://file.example.com:666/webdav 2 、终端生成12345的密码命令：/usr/local/caddy/caddy hash-password \u0026ndash;plaintext 12345 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 mkdir -pm 755 /usr/local/caddy/conf.d \u0026amp;\u0026amp; touch /usr/local/caddy/conf.d/webdav.conf \u0026amp;\u0026amp; chmod u+x /usr/local/caddy/conf.d/webdav.conf \u0026amp;\u0026amp; cat \u0026gt; /usr/local/caddy/conf.d/webdav.conf \u0026lt;\u0026lt;\u0026#39;EOF\u0026#39; ## caddy 反向代理 WebDAV 服务 https://file.example.com:666 { ## 设置 /mnt 为可被访问目录（可自行修改） root * /mnt encode gzip ## 终端生成12345的密码命令：/usr/local/caddy/caddy hash-password --plaintext 12345 ## 用户名：admin（可自定义） basic_auth { admin $2a$14$yI/KQg2h5rQkXao4lzRMC.Rx5t3bRuGyCYkvEeiJyc9hUrYt0USsi } ## 指定证书路径，绝对路径为/usr/local/caddy/ssl/private.key等于ssl/private.key tls /usr/local/caddy/ssl/full_chain.pem /usr/local/caddy/ssl/private.key route { rewrite /webdav /webdav/ webdav /webdav/* { ## 访问WebDAV服务的前缀 prefix /webdav } ## 启用当前目录的文件服务器，并允许浏览文件列表 file_server browse } } EOF cd /usr/local/caddy \u0026amp;\u0026amp; ./caddy fmt --overwrite \u0026amp;\u0026amp; ./caddy reload 三 、windows 开机自动挂载 samba 和 webdav 1 、linux 查看samba配置文件命令 1 cat /etc/samba/smb.conf 2 、在windows创建.bat脚本，放在开机自启动目录 [PVE-mydisk] 为linux配置文件中的网络共享名称\n1 net use W: https://file.example.com:666/webdav /user:admin yifan0719 3 、CMD命令打开开机自动执行脚本文件夹 1 start shell:startup ","date":"2025-01-25T14:39:21+08:00","image":"https://file.meimolihan.eu.org/img/caddy-03.jpg","permalink":"https://meimolihan.eu.org/p/caddy-%E6%90%AD%E5%BB%BA-webdav-%E6%9C%8D%E5%8A%A1%E5%99%A8/","title":"Caddy 搭建 webdav 服务器"},{"content":" caddy 反向代理 下面将以【example.com】域名为例 一 、caddy 主配置文件模板 caddy 创建主配置文件 1 2 3 4 5 6 7 8 9 10 11 12 touch /usr/local/caddy/Caddyfile \u0026amp;\u0026amp; chmod u+x /usr/local/caddy/Caddyfile \u0026amp;\u0026amp; cat \u0026gt; /usr/local/caddy/Caddyfile \u0026lt;\u0026lt;\u0026#39;EOF\u0026#39; { # 指定http端口为86 http_port 86 order webdav before file_server } ## 引用其它目录的配置文件 import /usr/local/caddy/conf.d/*.conf EOF cd /usr/local/caddy \u0026amp;\u0026amp; ./caddy fmt --overwrite \u0026amp;\u0026amp; ./caddy reload 二 、caddy 子配置文件模板 xunlei 地址：https://xunlei.example.com:666\n创建 xunlei 反向代理 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 mkdir -pm 755 /usr/local/caddy/conf.d \u0026amp;\u0026amp; touch /usr/local/caddy/conf.d/xunlei.conf \u0026amp;\u0026amp; chmod u+x /usr/local/caddy/conf.d/xunlei.conf \u0026amp;\u0026amp; cat \u0026gt; /usr/local/caddy/conf.d/xunlei.conf \u0026lt;\u0026lt;\u0026#39;EOF\u0026#39; ## xunlei 下载 https://xunlei.example.com:666 { encode gzip tls ssl/full_chain.pem ssl/private.key reverse_proxy http://10.10.10.88:2345 { header_up Host {http.reverse_proxy.upstream.hostport} } ## 错误处理 handle_errors { ## 将所有错误重定向到50x.html页面 rewrite * /50x.html # 指定错误页面的根目录 root * /var/www/html # 启用文件服务器，用于提供错误页面 file_server } } EOF cd /usr/local/caddy \u0026amp;\u0026amp; ./caddy fmt --overwrite \u0026amp;\u0026amp; ./caddy reload ","date":"2025-01-25T14:22:52+08:00","image":"https://file.meimolihan.eu.org/img/caddy-03.jpg","permalink":"https://meimolihan.eu.org/p/caddy-%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/","title":"Caddy 反向代理"},{"content":" Caddy 安装与卸载 Caddy 官网： https://caddyserver.com/ Caddy下载 ： https://caddyserver.com/download Caddy官方文档： https://caddy2.dengxiaolong.com/docs/ 哔哩哔哩教程： https://www.bilibili.com/video/BV1wU4y1u7tf 教程文档： https://www.cnblogs.com/wzcsxjl/p/15517168.html apt 安装 caddy 1 、安装caddy 1 sudo apt install caddy -y 2 、查看caddy 版本 1 caddy version caddy 卸载 1 、停止 Caddy 服务 1 sudo systemctl stop caddy 2 、移除 Caddy 软件包 1 sudo apt remove caddy -y 3 、清除配置文件和残留数据（可选，但推荐彻底卸载时执行） 1 sudo apt purge caddy 4 、自动移除无用的依赖包 1 sudo apt autoremove 5 、检查软件包是否存在 1 dpkg -l | grep caddy 如果没有任何输出，说明系统中通过常规软件包安装方式安装的 Caddy 已被移除干净了。\ncaddy 维护命令 1 、 查看配置文件 1 cat /etc/caddy/Caddyfile 2 、 停止caddy 1 systemctl stop caddy 3、 启动caddy 1 systemctl start caddy 4 、重载caddy配置文件 1 sudo systemctl reload caddy 5 、 查看caddy运行状态 1 systemctl status caddy 6 、开启caddy开机自启 1 sudo systemctl enable caddy ","date":"2025-01-25T14:12:18+08:00","image":"https://file.meimolihan.eu.org/img/caddy-03.jpg","permalink":"https://meimolihan.eu.org/p/caddy-%E5%AE%89%E8%A3%85%E4%B8%8E%E5%8D%B8%E8%BD%BD/","title":"Caddy 安装与卸载"},{"content":" nginx 负载均衡 下面将以【example.com】域名为例 一 、nginx 热‮负备‬载均衡（我在使用的版本） 热备：如果你有2台服务器，当一台服务器发‮事生‬故时，才‮用启‬第二台‮务服‬器给‮供提‬服务。服‮器务‬处理请‮的求‬顺序：AAAAAA突然A挂啦，BBBBBBBBBBBBBB…\n1 、创建 mtab 配置文件 mtab 书签页：https://mtab.example.com:666\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 mkdir -pm 755 /etc/nginx/conf.d \u0026amp;\u0026amp; touch /etc/nginx/conf.d/mtab.conf \u0026amp;\u0026amp; cat \u0026gt; /etc/nginx/conf.d/mtab.conf \u0026lt;\u0026lt;\u0026#39;EOF\u0026#39; ## nginx 反向代理+负载均衡: mtab 书签页 upstream mysvr { server localhost:9200; ## 负载均衡-热备模式：有2台服务器，一台服务器宕机时，才‮用启‬第二台‮务服‬器给‮供提‬服务。处理‬顺序：AAA突然A挂啦，BBB… server localhost:9200 backup; ## 热备 } server { ## 监听 666 端口，并启用SSL listen 666 ssl; listen [::]:666 ssl; ## 替换为你的域名 server_name mtab.example.com; ## 指定 SSL 证书文件和私钥文件的路径 ssl_certificate /etc/nginx/keyfile/cert.pem; ssl_certificate_key /etc/nginx/keyfile/key.pem; location / { ## 指定反向代理的服务地址 proxy_pass http://mysvr; ## 负载均衡 变量地址（不能和其它服务器相同） add_header backendIP $upstream_addr; ## 负载均衡 节点IP add_header backendCode $upstream_status; ## 负载均衡 响应状态码 proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; proxy_set_header Host $http_host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header Range $http_range; proxy_set_header If-Range $http_if_range; proxy_redirect off; proxy_buffering on; #开启缓存 # 使用 HTTP/1.1 协议与后端服务器通信 proxy_http_version 1.1; client_max_body_size 20000m; } } EOF sudo systemctl restart nginx 2 、测试配置文件 1 sudo nginx -t 3 、重启nginx服务 1 sudo systemctl restart nginx 4 、查看nginx状态 1 sudo systemctl status nginx 5 、查看负载均衡 访问：https://mtab.example.com:666 网页打开，开发者工具，选择网络，找到mtab.example.com，就可以查看到\n二 、nginx 轮询负‮均责‬衡 轮询：nginx默认就‮轮是‬询其权重‮默都‬认为1，服务器处理‮求请‬的顺序：ABABABABAB… 1 2 3 4 5 6 7 8 9 10 11 12 upstream mysvr { server 127.0.0.1:7878; server 192.168.10.121:3333; } server { listen 8081; #监听端口 server_name 127.0.0.1; #监听地址 location /{ proxy_pass http://mysvr; #请‮转求‬向mysvr 定义的服务器列表 } } 三 、nginx 加权轮询‮载负‬规则 加权轮询：跟‮配据‬置的权‮的重‬大小而分发给‮同不‬服务‮不器‬同数‮的量‬请求。如果不设置，则默认为1。下面服务器的‮求请‬顺序为：ABBABBABBABBABB…\n1 2 3 4 5 6 7 8 9 10 11 12 upstream mysvr { server 127.0.0.1:7878 weight=1; server 192.168.10.121:3333 weight=2; } server { listen 8081; #监听端口 server_name 127.0.0.1; #监‮地听‬址 location /{ proxy_pass http://mysvr; #请求转向mysvr 定义的服‮器务‬列表 } } 四 、 nginx ip_hash 负载均衡 ip_hash:nginx会让相同的‮户客‬端ip请求相同‮服的‬务器。\n1 2 3 4 5 6 7 8 9 10 11 12 13 upstream mysvr { server 127.0.0.1:7878; server 192.168.10.121:3333; ip_hash; } server { listen 8081; #监听端口 server_name 127.0.0.1; #监听地址 location /{ proxy_pass http://mysvr; #请求转向mysvr 定义的服‮器务‬列表 } } 五 、nginx 对‮定特‬资源实‮负现‬载均衡 通过多个upstream分成多‮服个‬务器组，将‮同不‬的请求分流‮不到‬同的\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 upstream videomysvr { server 127.0.0.1:7878 weight=1; server 192.168.10.121:3333 weight=2; } upstream filemysvr { server 192.3.2.1:7878 weight=1; server 192.3.2.2:3333 weight=2; } server { listen 8081; #监听端口 server_name 127.0.0.1; #监听地址 location /video/ { proxy_pass http://videomysvr; #请求转向mysvr 定义的服务器列表 } location /file/ { proxy_pass http://filemysvr; #请求转向mysvr 定义的服务器列表 } } 六 、nginx 对不同域名‮现实‬负载均衡 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 upstream videomysvr { server 127.0.0.1:7878 weight=1; server 192.168.10.121:3333 weight=2; } upstream filemysvr { server 192.3.2.1:7878 weight=1; server 192.3.2.2:3333 weight=2; } server { listen 8081; #监听端口 server_name www.ustc.edu.cn; #监听地址 location /video/ { proxy_pass http://videomysvr; #请求转向mysvr 定‮的义‬服务器列表 } } server { listen 8082; #监‮端听‬口 server_name www.ustc.sse.edu.cn; #监听地址 location /file/ { proxy_pass http://filemysvr; #请求转向mysvr 定义的服务器列表 } } 七 、nginx 实现带有URL重‮的写‬负载均衡 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 upstream backend{ server 192.168.200.146:9001; server 192.168.200.146:9002; server 192.168.200.146:9003; } server { listen\t80; server_name localhost; location /file/ { rewrite ^(/file/.*) /server/$1 last; } location / { proxy_pass http://backend; } } 八 、nginx 四层负‮均载‬衡 首先安装好redis和tomcat\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 stream {\t# 一级括号 upstream redisbackend { server 192.168.200.146:6379; server 192.168.200.146:6378; } upstream tomcatbackend { server 192.168.200.146:8080; } server { listen 81; proxy_pass redisbackend; } server { listen\t82; proxy_pass tomcatbackend; } } ","date":"2025-01-25T09:10:00+08:00","image":"https://file.meimolihan.eu.org/img/nginx-03.jpg","permalink":"https://meimolihan.eu.org/p/nginx%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/","title":"Nginx负载均衡"},{"content":" nginx 图床部署 下面将以【example.com】域名为例 图床根目录地址：https://blog.example.com:666/\n图床访问图片地址：https://blog.example.com:666/img/tmdb-01.jpg\n必须匹配到图片文件才可以\n访问根目录，显示nginx欢迎页面\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 mkdir -pm 755 /etc/nginx/conf.d /mnt/file/blog \u0026amp;\u0026amp; touch /etc/nginx/conf.d/blog.conf \u0026amp;\u0026amp; cat \u0026lt;\u0026lt;\u0026#39;EOF\u0026#39; | sed \u0026#39;1!{/^[[:space:]]*#/d;/^[[:space:]]*$/d}\u0026#39; \u0026gt; /etc/nginx/conf.d/blog.conf ## nginx 图床服务 server { # 监听666端口，并启用SSL listen 666 ssl; # 替换为你的域名 server_name blog.example.com.org; # 指定SSL证书文件和私钥文件的路径 ssl_certificate /etc/nginx/keyfile/cert.pem; ssl_certificate_key /etc/nginx/keyfile/key.pem; # 设置支持的SSL协议版本 ssl_protocols TLSv1 TLSv1.1 TLSv1.2; # 启用服务器端加密套件优先 ssl_prefer_server_ciphers on; # 设置加密套件，优先使用高强度加密算法，并排除匿名加密套件和MD5散列算法 ssl_ciphers HIGH:!aNULL:!MD5; # 配置静态文件的访问规则 location ~ .*\\.(gif|jpg|lrc|txt|doc|pdf|rar|gz|zip|jpeg|png|mp4|mkv|html|yaml)$ { root /mnt/file/blog; # 文件存放的位置 # 防止浏览器预览打开，而是下载文件 if ($request_filename ~* ^.*?\\.(txt|doc|pdf|rar|gz|zip|lrc|docx|exe|xlsx|ppt|pptx|yaml)$){ add_header Content-Disposition attachment; } autoindex on; # 开启目录浏览功能 sendfile on; # 开启高效文件传输模式 autoindex_localtime on; # 显示的文件时间为文件的服务器时间 autoindex_format html; # 输入格式，可选项为html、xml、json、jsonp autoindex_exact_size off; # 显示精确字节大小还是显示友好可读的大小 charset utf-8,gbk; # 避免中文乱码 expires 24h; # 设置文件过期时间为24小时 proxy_store on; proxy_store_access user:rw group:rw all:rw; proxy_redirect off; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; client_max_body_size 10m; client_body_buffer_size 1280k; proxy_connect_timeout 900; proxy_send_timeout 900; proxy_read_timeout 900; proxy_buffer_size 40k; proxy_buffers 40 320k; proxy_busy_buffers_size 640k; proxy_temp_file_write_size 640k; } # 新增的location块，用于处理没有后缀名的文件 location ~* ^/[^.]+$ { # 匹配URL中不包含点号的路径 root /mnt/file/blog; # 文件存放的位置 add_header Content-Disposition \u0026#34;attachment; filename=$uri\u0026#34;; # 强制下载 autoindex on; # 如果需要的话，也可以开启目录浏览功能 sendfile on; # 开启高效文件传输模式 autoindex_localtime on; # 显示的文件时间为文件的服务器时间 autoindex_format html; # 输入格式，可选项为html、xml、json、jsonp autoindex_exact_size off; # 显示精确字节大小还是显示友好可读的大小 charset utf-8,gbk; # 避免中文乱码 expires 24h; # 设置文件过期时间为24小时 } } EOF ## 重启 Nginx sudo systemctl restart nginx ","date":"2025-01-24T19:42:14+08:00","image":"https://file.meimolihan.eu.org/img/nginx-03.jpg","permalink":"https://meimolihan.eu.org/p/nginx%E5%9B%BE%E5%BA%8A%E9%83%A8%E7%BD%B2/","title":"Nginx图床部署"},{"content":" nginx 搭建 webdav 服务器 certbot通过Cloudflare-api验证申请ssl证书 下面将以【example.com】域名为例 部署 nginx webdav 服务器 1、安装 nginx-full 通过nginx搭建webdav服务需要安装http_dav_module模块。nginx-full版本中直接包含了http_dav_module模块。\n1 sudo apt update \u0026amp;\u0026amp; sudo apt install nginx-full -y 2 、设置权限 1 sudo chown -R www-data:www-data /mnt \u0026amp;\u0026amp; sudo chmod -R 755 /mnt 3 、创建用户登录验证信息（用户名-密码，自行修改） 1 2 ## 用户名：admin 密码：123456 rm /etc/webdav/.credentials.list \u0026amp;\u0026amp; sudo mkdir -p /etc/webdav \u0026amp;\u0026amp; touch /etc/webdav/.credentials.list \u0026amp;\u0026amp; echo -n \u0026#39;admin:\u0026#39; | sudo tee -a /etc/webdav/.credentials.list \u0026amp;\u0026amp; sudo openssl passwd -apr1 123456 | sudo tee -a /etc/webdav/.credentials.list 4 、创建 webdav 配置文件 webdav 公网地址： https://webdav.example.com:666 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 mkdir -pm 755 /etc/nginx/conf.d \u0026amp;\u0026amp; touch /etc/nginx/conf.d/webdav.conf \u0026amp;\u0026amp; chmod u+x /etc/nginx/conf.d/webdav.conf \u0026amp;\u0026amp; cat \u0026gt; /etc/nginx/conf.d/webdav.conf \u0026lt;\u0026lt;\u0026#39;EOF\u0026#39; server { # 监听666端口 listen 666 ssl; # 替换为你的域名 server_name webdav.example.com; # 指定 SSL 证书文件和私钥文件的路径 ssl_certificate /etc/nginx/keyfile/cert.pem; ssl_certificate_key /etc/nginx/keyfile/key.pem; # 设置支持的SSL协议版本 ssl_protocols TLSv1 TLSv1.1 TLSv1.2; # 启用服务器端加密套件优先 ssl_prefer_server_ciphers on; # 设置加密套件，优先用高强度加密算法，并排除匿名加密套件和MD5散列算法 ssl_ciphers HIGH:!aNULL:!MD5; # 设置使用utf-8编码,防止中文文件名乱码 charset utf-8; # 这个不加上不显示列表 autoindex on; # 默认存放文件的路径 root /mnt; # 认证方式 auth_basic realm_name; # 用户密码文件存放位置 auth_basic_user_file /etc/webdav/.credentials.list; # dav 允许的操作 dav_methods PUT DELETE MKCOL COPY MOVE; dav_ext_methods PROPFIND OPTIONS; # 创建文件的默认权限 dav_access user:rw group:rw all:r; # 临时文件位置 client_body_temp_path /tmp; # 最大上传文件限制, 0表示无限制 client_max_body_size 0; # 允许自动创建文件夹(如果有需要的话) create_full_put_path on; } EOF ## 重启 nginx sudo systemctl restart nginx nginx 维护命令 1 、查看nginx状态 1 sudo systemctl status nginx 2 、升级 nginx-full 1 sudo apt update \u0026amp;\u0026amp; sudo apt upgrade nginx-full -y 手机 app 登陆（ES文件浏览器） 可以搭配frp等内网穿透工具将本地webdav服务暴露，这样就可以将本地主机当做网盘来使用。\n手机客户端可使用ES文件浏览器，使用效果良好。\n玩法挺多，慢慢探究\n","date":"2025-01-24T19:19:27+08:00","image":"https://file.meimolihan.eu.org/img/nginx-webdav-01.jpg","permalink":"https://meimolihan.eu.org/p/nginx%E6%90%AD%E5%BB%BAwebdav%E6%9C%8D%E5%8A%A1%E5%99%A8/","title":"Nginx搭建webdav服务器"},{"content":" nginx 反向代理 certbot通过Cloudflare-api验证申请ssl证书 xunlei 下载器 内网地址： http://localhost:2345 xunlei 下载器 公网地址： https://xunlei.example.com:666 下面将以【example.com】域名为例 创建 xunlei 反向代理配置文件 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 mkdir -pm 755 /etc/nginx/conf.d \u0026amp;\u0026amp; touch /etc/nginx/conf.d/xunlei.conf \u0026amp;\u0026amp; cat \u0026lt;\u0026lt;\u0026#39;EOF\u0026#39; | sed \u0026#39;1!{/^[[:space:]]*#/d;/^[[:space:]]*$/d}\u0026#39; \u0026gt; /etc/nginx/conf.d/xunlei.conf ## nginx 反向代理: xunlei 下载器 server { ## 监听666端口，并启用SSL listen 666 ssl; listen [::]:666 ssl; ## 替换为你的域名 server_name xunlei.example.com; ## 指定 SSL 证书文件和私钥文件的路径 ssl_certificate /etc/nginx/keyfile/cert.pem; ssl_certificate_key /etc/nginx/keyfile/key.pem; ## 设置支持的SSL协议版本 ssl_protocols TLSv1 TLSv1.1 TLSv1.2; # 启用服务器端加密套件优先 ssl_prefer_server_ciphers on; ## 设置加密套件，优先用高强度加密算法，并排除匿名加密套件和MD5散列算法 ssl_ciphers HIGH:!aNULL:!MD5; location / { ## 指定反向代理的服务地址 proxy_pass http://localhost:2345; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; proxy_set_header Host $http_host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header Range $http_range; proxy_set_header If-Range $http_if_range; proxy_redirect off; ## 开启缓存 proxy_buffering on; ## 使用 HTTP/1.1 协议通信 proxy_http_version 1.1; } ## 错误处理 charset utf-8; ## 添加这行来指定编码 error_page 404 500 502 503 504 /50x.html; location = /50x.html { root /var/www/html; } } EOF sudo systemctl restart nginx ","date":"2025-01-24T19:03:39+08:00","image":"https://file.meimolihan.eu.org/img/nginx-03.jpg","permalink":"https://meimolihan.eu.org/p/nginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/","title":"Nginx反向代理"},{"content":" nginx 安装与卸载 安装 nginx 通过nginx搭建 webdav服务 需要安装http_dav_module模块。nginx-full版本中直接包含了http_dav_module模块。\n1 、安装 nginx-full（webdav服务版） 1 sudo apt update \u0026amp;\u0026amp; sudo apt install nginx-full -y 2 、查看 nginx 版本 1 nginx -v 3 、启动 nginx 服务 1 systemctl start nginx 4 、查看 nginx 状态 1 sudo systemctl status nginx 5 、设置 nginx 开机自动启动 1 sudo systemctl enable nginx 6 、升级 nginx-full 1 sudo apt update \u0026amp;\u0026amp; sudo apt upgrade nginx-full -y nginx 维护命令 1 、测试配置文件 1 sudo nginx -t 2 、重启nginx服务 1 sudo systemctl restart nginx 3 、判断配置文件格式是否正确 1 nginx -t 4 、查看当前 Nginx 最终的配置 1 nginx -T 5 、重新加载配置文件 1 nginx -s reload 6 、检查 nginx 服务是否已启用（输出 enabled 表示服务已成功启用） 1 sudo systemctl is-enabled nginx 7 、优雅停止Nginx 1 nginx -s quit 8 、强制停止Nginx 1 sudo systemctl stop nginx 9 、重新加载 .bashrc 文件 1 source ~/.bashrc 10 、查看nginx日志 1 2 3 cat /var/log/nginx/error.log # sudo tail -f /var/log/nginx/error.log # sudo journalctl -u nginx 11 、测试特定的nginx配置文件是否正确 1 nginx -t -c /etc/nginx/conf.d/xunlei.conf 12 、查看 80 端口占用情况 1 netstat -tulnp | grep \u0026#34;0.0.0.0:80\u0026#34; 卸载 nginx 1 、卸载 nginx-full 1 sudo apt remove nginx-full -y 2 、卸载 nginx 及其配置文件 1 sudo apt remove --purge nginx-full -y 3 、卸载 nginx 删除所有自动生成的配置文件和日志文件 1 sudo apt autoremove --purge nginx-full -y ","date":"2025-01-23T09:54:18+08:00","image":"https://file.meimolihan.eu.org/img/nginx-03.jpg","permalink":"https://meimolihan.eu.org/p/nginx%E5%AE%89%E8%A3%85%E4%B8%8E%E5%8D%B8%E8%BD%BD/","title":"Nginx安装与卸载"},{"content":" docker 部署safeline雷池 雷池教程文档： https://docs.waf-ce.chaitin.cn/zh/上手指南/安装雷池/手动安装 雷池 safeline内网地址： localhost:9443 创建数据持久化目录 1 mkdir -p /mnt/mydisk/home/safeline \u0026amp;\u0026amp; cd /mnt/mydisk/home/safeline 下载docker-compose.yaml 1 cd /mnt/mydisk/home/safeline \u0026amp;\u0026amp; wget https://waf-ce.chaitin.cn/release/latest/compose.yaml 创建配置文件 1 2 3 4 5 6 7 8 9 10 11 touch /mnt/mydisk/home/safeline/.env \u0026amp;\u0026amp; cat \u0026gt; /mnt/mydisk/home/safeline/.env \u0026lt;\u0026lt;\u0026#39;EOF\u0026#39; SAFELINE_DIR=/mnt/mydisk/home/safeline IMAGE_TAG=latest MGT_PORT=9443 POSTGRES_PASSWORD=yourpassword SUBNET_PREFIX=172.22.222 IMAGE_PREFIX=swr.cn-east-3.myhuaweicloud.com/chaitin-safeline ARCH_SUFFIX= RELEASE= REGION= EOF 下载离线镜像包 1 wget https://demo.waf-ce.chaitin.cn/image.tar.gz 加载离线镜像 1 cat image.tar.gz | gzip -d | docker load 拉取并运行 1 cd /mnt/mydisk/home/safeline \u0026amp;\u0026amp; docker-compose up -d 如果是 ARM 服务器需要把 ARCH_SUFFIX改成 -arm ARCH_SUFFIX=-arm 如果是安装 LTS 版本需要把 RELEASE 改成 -lts RELEASE=-lts\n查看登陆密码 1 docker exec safeline-mgt resetadmin nginx 反向代理 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 touch /etc/nginx/conf.d/safeline.conf \u0026amp;\u0026amp; cat \u0026lt;\u0026lt;\u0026#39;EOF\u0026#39; | sed \u0026#39;1!{/^[[:space:]]*#/d;/^[[:space:]]*$/d}\u0026#39; \u0026gt; /etc/nginx/conf.d/safeline.conf ## nginx 反向代理: 雷池safeline server { ## 监听666端口，并启用SSL listen 666 ssl; listen [::]:666 ssl; ## 替换为你的域名 server_name safeline.mobufan.eu.org; ## 指定 SSL 证书文件和私钥文件的路径 ssl_certificate /etc/nginx/keyfile/cert.pem; ssl_certificate_key /etc/nginx/keyfile/key.pem; location / { ## 指定反向代理的服务地址 proxy_pass https://localhost:9443; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; proxy_set_header Host $http_host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header Range $http_range; proxy_set_header If-Range $http_if_range; proxy_redirect off; proxy_buffering on; #开启缓存 # 使用 HTTP/1.1 协议与后端服务器通信 proxy_http_version 1.1; client_max_body_size 20000m; } } EOF sudo systemctl restart nginx ","date":"2025-01-22T22:26:30+08:00","image":"https://file.meimolihan.eu.org/img/safeline.jpg","permalink":"https://meimolihan.eu.org/p/docker-%E9%83%A8%E7%BD%B2-safeline-%E9%9B%B7%E6%B1%A0/","title":"Docker 部署 safeline 雷池"},{"content":"\ncertbot通过Cloudflare-api验证申请ssl证书 certbot 官网： https://eff-certbot.readthedocs.io/ certbot 中文官网： https://certbot.openssl.ac.cn/ Github： https://github.com/certbot/certbot Website： https://certbot.eff.org/ 通过certbot‮请申‬证书非常方便。\n但证书有效‮通期‬常不长，以Let\u0026rsquo;s encrypt的证‮为书‬例，每90天需要续期更新。certbot‮认默‬通过http方式续期认证，好处在‮非于‬常方便，但需要对‮放外‬开80端口。对于‮使不‬用80端口的服务器‮以可‬通过‮名域‬服务商api的DNS认证。这样可以关闭80端口的访问。\n以托管到Cloudflare‮域的‬名为例。\n首先创建api token，在Cloudflare profile下点击api token，创建api token。选择DNS管理模板。允‮编许‬辑DNS zone，设置管‮的理‬域名范围为全‮或部‬特定域名。设置允‮访许‬问的IP地址，默‮是认‬无限制。最后‮击点‬创建，保存token。注意及时保存下来，之后再也‮法无‬查看这个token。\n下面将以【example.com】域名为例 一 、服‮器务‬端安装certbot，和dns-cloudflare插件 1 sudo apt update \u0026amp;\u0026amp; sudo apt install certbot python3-certbot-dns-cloudflare -y 二 、创建验证dns‮置配‬文件 1 、获取cloudflare_api_token cloudflare官网： https://dash.cloudflare.com/ 2 、创建用于验证dns的配置文件 如‮有果‬多个域名对应‮不于‬同token可以设‮不置‬同的配置文件。\n使用受限 API 令牌的示例凭证文件（推荐）：（指定为哪个域名而生成的key）\ndns_cloudflare_api_token = 0123456789abcdef0123456789abcdef01234567\n使用全局 API 密钥的示例凭证文件（不推荐）：\ndns_cloudflare_email = cloudflare@example.com\ndns_cloudflare_api_key = 0123456789abcdef0123456789abcdef01234\n1 2 3 4 5 6 mkdir -p /etc/letsencrypt \u0026amp;\u0026amp; touch /etc/letsencrypt/domain_name.ini \u0026amp;\u0026amp; cat \u0026gt; /etc/letsencrypt/domain_name.ini \u0026lt;\u0026lt;\u0026#39;EOF\u0026#39; dns_cloudflare_api_token = ZFxP-pxzlzeOb7Y9MFsildH1xgGEit46_NEizPUC EOF ## 配置完成‮改修‬配置文件权限 chmod 600 /etc/letsencrypt/domain_name.ini 这里是个大坑。网上的教程和询问AI都不会告‮你诉‬当采用scoped API token‮里这‬必须只配置token，不‮配能‬置dns_cloudflare_api_key和dns_cloudflare_email 三 、申请证书 1 、运行certbot把认证方‮切式‬换到api认证 1 2 3 4 5 6 sudo certbot certonly \\ --dns-cloudflare \\ --dns-cloudflare-credentials /etc/letsencrypt/domain_name.ini \\ --dns-cloudflare-propagation-seconds 60 \\ -d example.com \\ -d *.example.com 此处的/etc/letsencrypt/domain_name.ini配置文件路径，要和上面的一致。\n2 、第一次需要输入邮箱（用于过期提醒） 1 888888@qq.com 3 、将证书文件拷贝到 nginx 证书目录 1 cp /etc/letsencrypt/live/example.com/fullchain.pem /etc/nginx/keyfile/cert.pem \u0026amp;\u0026amp; cp /etc/letsencrypt/live/example.com/privkey.pem /etc/nginx/keyfile/key.pem 这样的话，证‮申书‬请就大功告成了，每次证书‮期到‬后也会自动续期（当然是在API令牌过‮之期‬前），可谓省心省力。API令牌过‮的期‬话只需要修改cloudflare.ini文件，然后重‮运新‬行这‮命个‬令就好。\n四 、certbot 维护命令 1 、certbot 查看证书详情 1 certbot certificates 2 、certbot 模拟续签证书 1 sudo certbot renew --dry-run 没有报错说明 certbot renew 可以成功续签证书 3 、certbot 续签所有证书 1 certbot renew 4 、强制续签所有配置的证书 1 certbot renew --force-renewal 5 、撤销某个证书 1 2 certbot revoke --cert /etc/letsencrypt/live/mobufan.eu.org/fullchain.pem certbot revoke --cert /etc/letsencrypt/live/mobufan.eu.org/privkey.pem 6 、查看证书目录 1 ls /etc/letsencrypt/live/ 7 、查看日志文件,最后几行 1 sudo tail -n 100 /var/log/letsencrypt/letsencrypt.log 上面的命令会显示日志文件的最后 100 行。您可以根据需要调整 -n 参数后面的数字来查看更多或更少的行。 8 、查看证书的有效期信息 1 openssl x509 -in /etc/letsencrypt/live/mobufan.eu.org/fullchain.pem -noout -dates 这条命令是使用 openssl 工具查看 /etc/letsencrypt/live/mobufan.eu.org/fullchain.pem 这个 X.509 证书的有效期信息。 五 、certbot 证书自动续签 1 、certbot 添加自动续签 Linux 计划任务（命令方式） 1 crontab -e 1 2 3 4 5 ## 每周‬日01:05，certbot 自动续签 mobufan.eu.org 证书（命令方式） 05 1 * * 0 date \u0026gt;\u0026gt; /var/log/certbot-renew.log \u0026amp;\u0026amp; certbot renew --renew-hook \u0026#39;sudo systemctl restart nginx\u0026#39; \u0026gt;\u0026gt; /var/log/certbot-renew.log ## 每周日01:35，certbot 续签的 mobufan.eu.org 证书同步到 nginx证书目录 35 1 * * * cp /etc/letsencrypt/live/mobufan.eu.org/fullchain.pem /etc/nginx/keyfile/cert.pem \u0026amp;\u0026amp; cp /etc/letsencrypt/live/mobufan.eu.org/privkey.pem /etc/nginx/keyfile/key.pem 每周‬日（0 代表周日，按照 cron 语法中‮间时‬设定‮左从‬到右‮次依‬是分钟、小时、日、月、周几）的0点0分执行以下操作\n首先，将系统当前日‮信期‬息追加（\u0026raquo; 表示追加）写入到 /var/log/certbot-renew.log 日志文件中\n然后执行 certbot renew \u0026ndash;quiet 命令‮尝来‬试更新证书，并且将‮个这‬证书‮新更‬操作的输出信‮也息‬追加到 /var/log/certbot-renew.log 日志文件里\nCertbot支持三种钩子，可以‮过通‬选项附加在certbot renew的末尾。\n\u0026ndash;pre-hook：更新证‮之书‬前调用\n\u0026ndash;post-hook：更‮证新‬书之后调用\n\u0026ndash;deploy-hook：目的是确保在证书部署完成后，整个系统能够正确地使用新证书并且维持良好的运行状态。这可能涉及到对系统整体的检查、验证或者与其他组件的协调。\n\u0026ndash;renew-hook ：主要目的是与证书更新后的即时操作相关，特别是与服务的更新关联。通常用于确保依赖证书的服务（如 Web 服务器）能够及时加载新的证书并继续提供服务。\n2 、certbot 添加自动续签 Linux 计划任务（脚本方式） 1. 创建脚本 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 mkdir -p /mnt/my-sh/ssl \u0026amp;\u0026amp; touch /mnt/my-sh/ssl/certbot-mobufan.eu.org.sh \u0026amp;\u0026amp; chmod +x /mnt/my-sh/ssl/certbot-mobufan.eu.org.sh \u0026amp;\u0026amp; cat \u0026gt; /mnt/my-sh/ssl/certbot-mobufan.eu.org.sh \u0026lt;\u0026lt;\u0026#39;EOF\u0026#39; # 定义证书存储目录 certs_directory=\u0026#34;/etc/letsencrypt/live/\u0026#34; days_before_expiry=5 # 设置在证书到期前几天触发续签 # 遍历所有证书文件 for cert_dir in $certs_directory*; do # 获取域名 domain=$(basename \u0026#34;$cert_dir\u0026#34;) # 忽略 README 目录 if [ \u0026#34;$domain\u0026#34; = \u0026#34;README\u0026#34; ]; then continue fi # 输出正在检查的证书信息 echo \u0026#34;检查证书过期日期： ${domain}\u0026#34; # 获取fullchain.pem文件路径 cert_file=\u0026#34;${cert_dir}/fullchain.pem\u0026#34; # 获取证书过期日期 expiration_date=$(openssl x509 -enddate -noout -in \u0026#34;${cert_file}\u0026#34; | cut -d \u0026#34;=\u0026#34; -f 2-) # 输出证书过期日期 echo \u0026#34;过期日期： ${expiration_date}\u0026#34; # 将日期转换为时间戳 expiration_timestamp=$(date -d \u0026#34;${expiration_date}\u0026#34; +%s) current_timestamp=$(date +%s) # 计算距离过期还有几天 days_until_expiry=$(( ($expiration_timestamp - $current_timestamp) / 86400 )) # 检查是否需要续签（在满足续签条件的情况下） if [ $days_until_expiry -le $days_before_expiry ]; then echo \u0026#34;证书将在${days_before_expiry}天内过期，正在进行自动续签。\u0026#34; # 停止 Nginx systemctl stop nginx iptables -P INPUT ACCEPT iptables -P FORWARD ACCEPT iptables -P OUTPUT ACCEPT iptables -F ip6tables -P INPUT ACCEPT ip6tables -P FORWARD ACCEPT ip6tables -P OUTPUT ACCEPT ip6tables -F # 续签证书 certbot certonly --standalone -d $domain --email 496338740@qq.com --agree-tos --no-eff-email --force-renewal # 同步证书到 nginx cp /etc/letsencrypt/live/mobufan.eu.org/fullchain.pem /etc/nginx/keyfile/cert.pem \u0026amp;\u0026amp; cp /etc/letsencrypt/live/mobufan.eu.org/privkey.pem /etc/nginx/keyfile/key.pem # 启动 Nginx systemctl restart nginx echo \u0026#34;证书已成功续签。\u0026#34; else # 若未满足续签条件，则输出证书仍然有效 echo \u0026#34;证书仍然有效，距离过期还有 ${days_until_expiry} 天。\u0026#34; fi # 输出分隔线 echo \u0026#34;--------------------------\u0026#34; done EOF ## 立即执行命令 /mnt/my-sh/ssl/certbot-mobufan.eu.org.sh 使用 Certbot 工具续签证书。\n\u0026ndash;standalone 表示使用独立的 HTTP 服务器进行验证，\n-d $domain 指定域名，\n\u0026ndash;email 指定联系邮箱，\n\u0026ndash;agree-tos 表示同意服务条款，\n\u0026ndash;no-eff-email 表示不希望收到 EFF 的邮件，\n\u0026ndash;force-renewal 强制续签。\n2. 添加 Linux 计划任务 1 crontab -e 1 2 3 4 5 ## 每日01:25，certbot 自动续签 mobufan.eu.org 证书（脚本方式） 25 1 * * * /mnt/my-sh/ssl/certbot-mobufan.eu.org.sh ## 每日01:35，certbot 续签的 mobufan.eu.org 证书同步到 nginx证书目录 35 1 * * * cp /etc/letsencrypt/live/mobufan.eu.org/fullchain.pem /etc/nginx/keyfile/cert.pem \u0026amp;\u0026amp; cp /etc/letsencrypt/live/mobufan.eu.org/privkey.pem /etc/nginx/keyfile/key.pem 六 、完全卸载 certbot 和 python3-certbot-dns-cloudflare 1 、删除 Certbot： 1 sudo certbot delete 2 、手动删除 Certbot 文件 1 sudo rm -rf /etc/letsencrypt/ \u0026amp;\u0026amp; sudo rm -rf /var/lib/letsencrypt/ \u0026amp;\u0026amp; sudo rm -rf /var/log/letsencrypt/ 3 、更新仓库并自动清理 1 sudo apt update \u0026amp;\u0026amp; sudo apt upgrade \u0026amp;\u0026amp; sudo apt autoremove 4 、卸载 certbot 和 python3-certbot-dns-cloudflare 1 sudo apt remove certbot python3-certbot-dns-cloudflare -y \u0026amp;\u0026amp; sudo apt autoremove ","date":"2025-01-22T22:04:51+08:00","image":"https://file.meimolihan.eu.org/img/certbot-06.jpg","permalink":"https://meimolihan.eu.org/p/certbot-%E9%80%9A%E8%BF%87-cloudflare-api-%E9%AA%8C%E8%AF%81%E7%94%B3%E8%AF%B7ssl%E8%AF%81%E4%B9%A6/","title":"Certbot 通过 Cloudflare Api 验证,申请ssl证书"},{"content":" idphotos 证件照 一 、docker 部署 idphotos 证件照 idphotos 证件照内网地址： http://localhost:7860 1 、终端命令创建docker-compose.yml文件 1 2 3 4 5 6 7 8 9 10 mkdir -p /mnt/mydisk/home/idphotos \u0026amp;\u0026amp; touch /mnt/mydisk/home/idphotos/docker-compose.yml \u0026amp;\u0026amp; cat \u0026gt; /mnt/mydisk/home/idphotos/docker-compose.yml \u0026lt;\u0026lt;\u0026#39;EOF\u0026#39; services: hivision_idphotos: container_name: idphotos image: linzeyi/hivision_idphotos ports: - 7860:7860 EOF cd /mnt/mydisk/home/idphotos \u0026amp;\u0026amp; docker-compose up -d 2 、拉取并运行 1 cd /mnt/mydisk/home/idphotos \u0026amp;\u0026amp; docker-compose up -d 3 、停止并删除 1 cd /mnt/mydisk/home/idphotos \u0026amp;\u0026amp; docker-compose down 4 、拉取镜像 1 docker pull linzeyi/hivision_idphotos 5 、容器升级 1 cd /mnt/mydisk/home/idphotos \u0026amp;\u0026amp; docker-compose down \u0026amp;\u0026amp; docker-compose pull \u0026amp;\u0026amp; docker-compose up -d \u0026amp;\u0026amp; docker image prune -f 二 、容器维护命令 1 、查看所有运行容器的名称 1 docker ps -a --format \u0026#34;{{.Names}}\u0026#34; 2 、停止 idphotos 容器 1 docker stop idphotos 3 、启动 idphotos 容器 1 docker start idphotos 4 、重启 idphotos 容器 1 docker restart idphotos 5 、进入 idphotos 容器 1 2 3 ## Ctrl+D 退出容器 ## docker exec -it idphotos sh docker exec -it idphotos bash 6 、查看 idphotos 配置文件 1 cat /mnt/mydisk/home/idphotos/docker-compose.yml 三 、 nginx 配置文件 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 mkdir -pm 755 /etc/nginx/conf.d \u0026amp;\u0026amp; touch /etc/nginx/conf.d/idphotos.conf \u0026amp;\u0026amp; cat \u0026lt;\u0026lt;\u0026#39;EOF\u0026#39; | sed \u0026#39;1!{/^[[:space:]]*#/d;/^[[:space:]]*$/d}\u0026#39; \u0026gt; /etc/nginx/conf.d/idphotos.conf ## nginx 反向代理 idphotos 证件照 server { ## 监听666端口，并启用SSL listen 666 ssl; listen [::]:666 ssl; ## 替换为你的域名 server_name idphotos.mobufan.eu.org; ## 指定 SSL 证书文件和私钥文件的路径 ssl_certificate /etc/nginx/keyfile/cert.pem; ssl_certificate_key /etc/nginx/keyfile/key.pem; ## 设置支持的SSL协议版本 ssl_protocols TLSv1 TLSv1.1 TLSv1.2; # 启用服务器端加密套件优先 ssl_prefer_server_ciphers on; ## 设置加密套件，优先用高强度加密算法，并排除匿名加密套件和MD5散列算法 ssl_ciphers HIGH:!aNULL:!MD5; location / { ## 指定反向代理的服务地址 proxy_pass http://10.10.10.245:7860; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; proxy_set_header X-Real-IP $remote_addr; proxy_set_header Host $http_host; proxy_set_header Range $http_range; proxy_set_header If-Range $http_if_range; proxy_redirect off; ## 开启缓存 proxy_buffering on; ## 使用 HTTP/1.1 协议通信 proxy_http_version 1.1; } ## 错误处理 charset utf-8; error_page 404 500 502 503 504 /50x.html; location = /50x.html { root /var/www/html; } } EOF sudo systemctl restart nginx ","date":"2025-01-22T21:52:05+08:00","image":"https://file.meimolihan.eu.org/img/idphotos.jpg","permalink":"https://meimolihan.eu.org/p/docker-%E9%83%A8%E7%BD%B2-idphotos-%E8%AF%81%E4%BB%B6%E7%85%A7/","title":"Docker 部署 idphotos 证件照"},{"content":" iptv-doube 直播源 一 、部署 iptv-doube 直播源 iptv-doube 直播源_后台地址： http://localhost:5005 1 、终端命令创建docker-compose.yml文件 x86 镜像 1 2 3 4 5 6 7 8 9 10 11 12 mkdir -p /mnt/mydisk/home/iptv-doube \u0026amp;\u0026amp; touch /mnt/mydisk/home/iptv-doube/docker-compose.yml \u0026amp;\u0026amp; cat \u0026gt; /mnt/mydisk/home/iptv-doube/docker-compose.yml \u0026lt;\u0026lt;\u0026#39;EOF\u0026#39; services: iptv-doube: image: zzzshanghai/doube-itv:latest container_name: iptv-doube ports: - \u0026#34;5005:5000\u0026#34; - \u0026#34;50101:50101\u0026#34; restart: always EOF cd /mnt/mydisk/home/iptv-doube \u0026amp;\u0026amp; docker-compose up -d arm 镜像 1 2 3 4 5 6 7 8 services: doube-itv: image: waynezhang2022/doube-itv:latest restart: always ports: - 50101:50101 - 5000:5000 container_name: doube-itv 2 、拉取并运行 1 cd /mnt/mydisk/home/iptv-doube \u0026amp;\u0026amp; docker-compose up -d 3 、停止并删除 1 cd /mnt/mydisk/home/iptv-doube \u0026amp;\u0026amp; docker-compose down 4 、拉取镜像 1 docker pull zzzshanghai/doube-itv:latest 5 、容器升级 1 cd /mnt/mydisk/home/iptv-doube \u0026amp;\u0026amp; docker-compose down \u0026amp;\u0026amp; docker-compose pull \u0026amp;\u0026amp; docker-compose up -d \u0026amp;\u0026amp; docker image prune -f 二 、容器维护命令 1 、查看所有运行容器的名称 1 docker ps -a --format \u0026#34;{{.Names}}\u0026#34; 2 、停止 iptv-doube 容器 1 docker stop iptv-doube 3 、启动 iptv-doube 容器 1 docker start iptv-doube 4 、重启 iptv-doube 容器 1 docker restart iptv-doube 5 、进入 iptv-doube 容器 1 2 3 ## Ctrl+D 退出容器 ## docker exec -it iptv-doube sh docker exec -it iptv-doube bash 6 、查看 iptv-doube 配置文件 1 cat /mnt/mydisk/home/iptv-doube/docker-compose.yml 三 、帮助： 1 http://localhost:5005/help 订阅地址： TXT订阅地址: http://localhost.150:5005/Sub?type=txt M3u订阅地址: http://localhost.150:5005/Sub?type=m3u ","date":"2025-01-22T19:36:27+08:00","image":"https://file.meimolihan.eu.org/img/iptv-03.jpg","permalink":"https://meimolihan.eu.org/p/docker%E9%83%A8%E7%BD%B2iptv-doube%E7%9B%B4%E6%92%AD%E6%BA%90/","title":"Docker部署iptv Doube直播源"},{"content":"一 、docker 部署 navidrome 音乐库 Navidrome官网： https://www.navidrome.org/Navidrome 下载与安装页面： https://www.navidrome.org/docs/installation/Navidrome 官方demo （默认用户名/密码：demo）： https://demo.navidrome.org/app/#/login 微力同步_后台地址： http://localhost:4533 1 、终端命令创建docker-compose.yml文件 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 mkdir -p /mnt/mydisk/home/navidrome \u0026amp;\u0026amp; touch /mnt/mydisk/home/navidrome/docker-compose.yml \u0026amp;\u0026amp; cat \u0026gt; /mnt/mydisk/home/navidrome/docker-compose.yml \u0026lt;\u0026lt;\u0026#39;EOF\u0026#39; services: navidrome: image: deluan/navidrome:latest container_name: navidrome restart: unless-stopped network_mode: bridge environment: - ND_SCANNER_EXTRACTOR=ffmpeg - PND_ENABLETRANSCODINGCONFIGGID=true - ND_ENABLESHARING=true - ND_SCANSCHEDULE=1h ports: - 4533:4533 volumes: - ./data:/data - /mnt/file/music:/music EOF cd /mnt/mydisk/home/navidrome \u0026amp;\u0026amp; docker-compose up -d 2 、拉取并运行 1 cd /mnt/mydisk/home/navidrome \u0026amp;\u0026amp; docker-compose up -d 3 、停止并删除 1 cd /mnt/mydisk/home/navidrome \u0026amp;\u0026amp; docker-compose down 4 、拉取镜像 1 docker pull deluan/navidrome:latest 5 、容器升级 1 cd /mnt/mydisk/home/navidrome \u0026amp;\u0026amp; docker-compose down \u0026amp;\u0026amp; docker-compose pull \u0026amp;\u0026amp; docker-compose up -d \u0026amp;\u0026amp; docker image prune -f 二 、容器维护命令 1 、查看所有运行容器的名称 1 docker ps -a --format \u0026#34;{{.Names}}\u0026#34; 2 、停止 navidrome 容器 1 docker stop navidrome 3 、启动 navidrome 容器 1 docker start navidrome 4 、重启 navidrome 容器 1 docker restart navidrome 5 、进入 navidrome 容器 1 2 3 ## Ctrl+D 退出容器 ## docker exec -it navidrome sh docker exec -it navidrome bash 6 、查看 navidrome 配置文件 1 cat /mnt/mydisk/home/navidrome/docker-compose.yml ","date":"2025-01-22T16:47:36+08:00","image":"https://file.meimolihan.eu.org/img/navidrome-01.jpg","permalink":"https://meimolihan.eu.org/p/docker-%E9%83%A8%E7%BD%B2-navidrome-%E9%9F%B3%E4%B9%90%E5%BA%93/","title":"Docker 部署 navidrome 音乐库"},{"content":"一 、docker 部署 music-tag 音乐刮削 music-tag 音乐刮削_后台地址：http://localhost:8001\n1 、终端命令创建docker-compose.yml文件 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 mkdir -p /mnt/mydisk/home/music-tag \u0026amp;\u0026amp; touch /mnt/mydisk/home/music-tag/docker-compose.yml \u0026amp;\u0026amp; cat \u0026gt; /mnt/mydisk/home/music-tag/docker-compose.yml \u0026lt;\u0026lt;\u0026#39;EOF\u0026#39; services: music-tag: image: xhongc/music_tag_web:latest container_name: music-tag restart: unless-stopped ports: - 8001:8001 volumes: - ./music:/app/media:rw - ./config:/app/data ## 默认用户名/密码：admin/admin EOF cd /mnt/mydisk/home/music-tag \u0026amp;\u0026amp; docker-compose up -d 2 、拉取并运行 1 cd /mnt/mydisk/home/music-tag \u0026amp;\u0026amp; docker-compose up -d 3 、停止并删除 1 cd /mnt/mydisk/home/music-tag \u0026amp;\u0026amp; docker-compose down 4 、拉取镜像 1 docker pull xhongc/music_tag_web:latest 5 、容器升级 1 cd /mnt/mydisk/home/music-tag \u0026amp;\u0026amp; docker-compose down \u0026amp;\u0026amp; docker-compose pull \u0026amp;\u0026amp; docker-compose up -d \u0026amp;\u0026amp; docker image prune -f 二 、容器维护命令 1 、查看所有运行容器的名称 1 docker ps -a --format \u0026#34;{{.Names}}\u0026#34; 2 、停止 music-tag 容器 1 docker stop music-tag 3 、启动 music-tag 容器 1 docker start music-tag 4 、重启 music-tag 容器 1 docker restart music-tag 5 、进入 music-tag 容器 1 2 3 ## Ctrl+D 退出容器 ## docker exec -it music-tag sh docker exec -it music-tag bash 6 、查看 music-tag 配置文件 1 cat /mnt/mydisk/home/music-tag/docker-compose.yml ","date":"2025-01-22T16:40:05+08:00","image":"https://file.meimolihan.eu.org/img/music-tag.jpg","permalink":"https://meimolihan.eu.org/p/docker-%E9%83%A8%E7%BD%B2-music-tag-%E9%9F%B3%E4%B9%90%E5%88%AE%E5%89%8A/","title":"Docker 部署 music Tag 音乐刮削"},{"content":"一 、docker 部署 musicn 音乐下载 musicn 命令行工具： https://github.com/zonemeen/musicn/tree/main musicn 项目地址： https://github.com/wy580477/musicn-container musicn 音乐下载_后台地址： http://localhost:7478 1 、终端命令创建docker-compose.yml文件 1 2 3 4 5 6 7 8 9 10 11 12 13 14 mkdir -p /mnt/mydisk/home/musicn \u0026amp;\u0026amp; touch /mnt/mydisk/home/musicn/docker-compose.yml \u0026amp;\u0026amp; cat \u0026gt; /mnt/mydisk/home/musicn/docker-compose.yml \u0026lt;\u0026lt;\u0026#39;EOF\u0026#39; services: musicn: image: ghcr.io/wy580477/musicn-container:latest container_name: musicn restart: always entrypoint: [\u0026#34;/sbin/tini\u0026#34;, \u0026#34;--\u0026#34;, \u0026#34;msc\u0026#34;, \u0026#34;-q\u0026#34;] ports: - \u0026#34;7478:7478\u0026#34; volumes: - ./data:/data EOF cd /mnt/mydisk/home/musicn \u0026amp;\u0026amp; docker-compose up -d 2 、拉取并运行 1 cd /mnt/mydisk/home/musicn \u0026amp;\u0026amp; docker-compose up -d 3 、停止并删除 1 cd /mnt/mydisk/home/musicn \u0026amp;\u0026amp; docker-compose down 4 、拉取镜像 1 docker pull ghcr.io/wy580477/musicn-container:latest 5 、容器升级 1 cd /mnt/mydisk/home/musicn \u0026amp;\u0026amp; docker-compose down \u0026amp;\u0026amp; docker-compose pull \u0026amp;\u0026amp; docker-compose up -d \u0026amp;\u0026amp; docker image prune -f 二 、容器维护命令 1 、查看所有运行容器的名称 1 docker ps -a --format \u0026#34;{{.Names}}\u0026#34; 2 、停止 musicn 容器 1 docker stop musicn 3 、启动 musicn 容器 1 docker start musicn 4 、重启 musicn 容器 1 docker restart musicn 5 、进入 musicn 容器 1 2 3 ## Ctrl+D 退出容器 ## docker exec -it musicn sh docker exec -it musicn bash 6 、查看 musicn 配置文件 1 cat /mnt/mydisk/home/musicn/docker-compose.yml Musicn 🎵 一个可播放及下载音乐的 Node.js 命令行工具\n全局安装 1 2 3 $ npm i musicn -g # or $ yarn global add musicn 容器形式部署安装可以参考： musicn-container 使用 1 2 3 $ musicn 周杰伦 # or $ msc 周杰伦 帮助信息: 1 2 3 $ msc --help # or $ msc -h 开启本地播放链接(手机可扫描二维码)下载及播放: 1 2 3 4 5 $ msc --qrcode # or $ msc -q # or $ msc -q -P 3000 # 指定端口，-P为大写 注意：使用手机扫描二维码时，电脑和手机两个设备必须连接到同一个 Wi-Fi；强烈推荐这种方式，既能听歌又能下载歌曲\n也可以部署到自己的服务器，具体方法如下：\n1 2 3 4 5 6 7 git clone https://github.com/zonemeen/musicn.git cd musicn npm install npm run build node ./bin/cli.js -q # or pm2 start ./bin/cli.js --name music-app -- -q 开启本地播放链接是否自动打开浏览器: 1 2 3 $ msc -q --open # or $ msc -q -o 搜索的页码数(默认是第1页): 1 2 3 4 5 $ msc 周杰伦 --number 2 # or $ msc 周杰伦 -n 2 # or $ msc -n 2 周杰伦 搜索的歌曲数量(默认是20条): 1 2 3 4 5 $ msc 周杰伦 --size 10 -w # wangyi的服务 # or $ msc 周杰伦 -s 10 -w # or $ msc -s 10 -w 周杰伦 注意：咪咕正常搜索因为api不支持，搜索时的自定义歌曲数量是无效的\n咪咕服务下载(默认是这个服务): 1 $ msc 周杰伦 网易云服务下载: 1 2 3 4 5 $ msc 周杰伦 --wangyi # or $ msc 周杰伦 -w # or $ msc -w 周杰伦 酷狗服务下载: 1 2 3 4 5 $ msc 周杰伦 --kugou # or $ msc 周杰伦 -g # or $ msc -g 周杰伦 根据歌单id下载: 1 2 3 4 5 $ msc --songListId 206140403 # or $ msc -i 206140403 # or $ msc -i 206140403 -n 2 自定义下载路径(默认是当前路径): 1 2 3 4 5 $ msc 周杰伦 --path ../music # or $ msc 周杰伦 -p ../music # or $ msc -p ../music 周杰伦 开启本地播放链接时附带此参数，可通过 web 页面下载音乐至服务器对应 path\n自定义base URL(默认为空): 1 2 3 $ msc 周杰伦 -q --base musicn # or $ msc 周杰伦 -q -b musicn 注意：只应用在开启本地播放链接时且首尾不能是 /，最终呈现的 URL http://192.168.0.204:7478/musicn\n附带歌词下载(默认是不附带): 1 2 3 4 5 $ msc 周杰伦 --lyric # or $ msc 周杰伦 -l # or $ msc -l 周杰伦 开启本地播放链接时附带此参数，可通过 web 页面下载歌词至服务器对应 path（需结合 path 使用）\n版本信息: 1 2 3 $ msc --version # or $ msc -v ","date":"2025-01-22T16:33:14+08:00","image":"https://file.meimolihan.eu.org/img/musicn.jpg","permalink":"https://meimolihan.eu.org/p/docker-%E9%83%A8%E7%BD%B2-musicn-%E9%9F%B3%E4%B9%90%E4%B8%8B%E8%BD%BD/","title":"Docker 部署 musicn 音乐下载"},{"content":"一 、docker 部署 xiaomusic 小爱音箱 xiaomusic_GitHub地址： https://github.com/hanxi/xiaomusic xiaomusic_后台地址： http://localhost:8393 1 、Debian 终端命令创建docker-compose.yml文件 我的歌曲目录/mnt/file/music 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 mkdir -p /mnt/mydisk/home/xiaomusic \u0026amp;\u0026amp; touch /mnt/mydisk/home/xiaomusic/docker-compose.yml \u0026amp;\u0026amp; cat \u0026gt; /mnt/mydisk/home/xiaomusic/docker-compose.yml \u0026lt;\u0026lt;\u0026#39;EOF\u0026#39; services: xiaomusic: image: m.daocloud.io/docker.io/hanxi/xiaomusic ## 国内镜像名称 ## image: hanxi/xiaomusic ## 国外镜像名称 container_name: xiaomusic ## 容器名称（可修改） restart: unless-stopped ## 重启策略 ports: - 8393:8090 ## 端口映射 volumes: - /mnt/file/music:/app/music ## 本地歌曲路径 - ./conf:/app/conf ## 配置文件路径 environment: XIAOMUSIC_PUBLIC_PORT: 8393 EOF cd /mnt/mydisk/home/xiaomusic \u0026amp;\u0026amp; docker-compose up -d 2 、拉取并运行 1 cd /mnt/mydisk/home/xiaomusic \u0026amp;\u0026amp; docker-compose up -d 3 、停止并删除 1 cd /mnt/mydisk/home/xiaomusic \u0026amp;\u0026amp; docker-compose down 4 、拉取镜像 1 docker pull m.daocloud.io/docker.io/hanxi/xiaomusic 5 、容器升级 1 cd /mnt/mydisk/home/xiaomusic \u0026amp;\u0026amp; docker-compose down \u0026amp;\u0026amp; docker-compose pull \u0026amp;\u0026amp; docker-compose up -d \u0026amp;\u0026amp; docker image prune -f 二 、容器维护命令 1 、查看所有运行容器的名称 1 docker ps -a --format \u0026#34;{{.Names}}\u0026#34; 2 、停止 xiaomusic 容器 1 docker stop xiaomusic 3 、启动 xiaomusic 容器 1 docker start xiaomusic 4 、重启 xiaomusic 容器 1 docker restart xiaomusic 5 、进入 xunlei 容器 1 2 3 ## Ctrl+D 退出容器 ## docker exec -it xiaomusic sh docker exec -it xiaomusic bash 6 、查看 xiaomusic 配置文件 1 cat /mnt/mydisk/home/xiaomusic/docker-compose.yml 三 、更新音乐列表 music 文件夹新增音乐文件 重启 xiaomusic 容器：docker restart xiaomusic xiaomusic 后台操作 设置 点击-重新拉取设置数据 点击-拉取最新的音乐列表 点击-刷新音乐标签 ","date":"2025-01-22T14:01:14+08:00","image":"https://file.meimolihan.eu.org/img/xiaomusic-01.jpg","permalink":"https://meimolihan.eu.org/p/docker-%E9%83%A8%E7%BD%B2-xiaomusic-%E5%B0%8F%E7%88%B1%E9%9F%B3%E7%AE%B1/","title":"Docker 部署 xiaomusic 小爱音箱"},{"content":"一 、docker 部署 iptv-api 直播源 iptv-api 直播源 dockerhub地址： https://github.com/Guovin/iptv-api iptv-api 直播源 地址： http://localhost:8755/m3u ptv-api（完‮版整‬本）：性‮要能‬求较高，更新速度较慢，稳定性、成功率高；修‮配改‬置\nopen_driver = False 可切换到 Lite 版本运行模式（推荐酒店源、组播源、关键‮搜字‬索使用此版本）\niptv-api:lite（精简版本）：轻量级，性能‮求要‬低，更新速度快，稳定性‮确不‬定（推荐‮阅订‬源使‮此用‬版本）\n1 、终端命令创建docker-compose.yml文件 ptv-api（完整版本） 1 2 3 4 5 6 7 8 9 10 11 12 13 14 mkdir -p /mnt/mydisk/home/iptv-api \u0026amp;\u0026amp; touch /mnt/mydisk/home/iptv-api/docker-compose.yml \u0026amp;\u0026amp; cat \u0026gt; /mnt/mydisk/home/iptv-api/docker-compose.yml \u0026lt;\u0026lt;\u0026#39;EOF\u0026#39; services: iptv-api: image: guovern/iptv-api container_name: iptv-api restart: unless-stopped ports: - 8755:8000 volumes: - ./config:/iptv-api/config - ./output:/iptv-api/output EOF cd /mnt/mydisk/home/iptv-api \u0026amp;\u0026amp; docker-compose up -d iptv-api:lite（精简版本） 1 2 3 4 5 6 7 8 9 10 11 12 13 14 mkdir -p /mnt/mydisk/home/iptv-api \u0026amp;\u0026amp; touch /mnt/mydisk/home/iptv-api/docker-compose.yml \u0026amp;\u0026amp; cat \u0026gt; /mnt/mydisk/home/iptv-api/docker-compose.yml \u0026lt;\u0026lt;\u0026#39;EOF\u0026#39; services: iptv-api: image: guovern/iptv-api:lite container_name: iptv-api-lite restart: unless-stopped ports: - 8755:8000 volumes: - ./config:/iptv-api/config - ./output:/iptv-api/output EOF cd /mnt/mydisk/home/iptv-api \u0026amp;\u0026amp; docker-compose up -d 2 、拉取并运行 1 cd /mnt/mydisk/home/iptv-api \u0026amp;\u0026amp; docker-compose up -d 3 、停止并删除 1 cd /mnt/mydisk/home/iptv-api \u0026amp;\u0026amp; docker-compose down 4 、拉取镜像 1 docker pull guovern/iptv-api 5 、容器升级 1 cd /mnt/mydisk/home/iptv-api \u0026amp;\u0026amp; docker-compose down \u0026amp;\u0026amp; docker-compose pull \u0026amp;\u0026amp; docker-compose up -d \u0026amp;\u0026amp; docker image prune -f 二 、容器维护命令 1 、查看所有运行容器的名称 1 docker ps -a --format \u0026#34;{{.Names}}\u0026#34; 2 、停止 iptv-api 容器 1 docker stop iptv-api 3 、启动 iptv-api 容器 1 docker start iptv-api 4 、重启 iptv-api 容器 1 docker restart iptv-api 5 、进入 iptv-api 容器 1 2 3 ## Ctrl+D 退出容器 ## docker exec -it iptv-api sh docker exec -it iptv-api bash 6 、查看 iptv-api 配置文件 1 cat /mnt/mydisk/home/iptv-api/docker-compose.yml 三 、iptv-api 使用教程 接口地址：localhost:8755 M3u 接口：localhost:8755/m3u Txt 接口：localhost:8755/txt 接口内容：localhost:8755/content 测速日志：localhost:8755/log 影视仓演示\n影视仓请使用txt接口，不然会出‮好现‬多重复并且无‮的用‬频道\n例如：http://195.168.31.100:8755/txt\n更多‮置配‬参数看‮面下‬链接： https://github.com/Guovin/iptv-api/blob/master/docs/config.md ","date":"2025-01-22T10:08:14+08:00","image":"https://file.meimolihan.eu.org/img/iptv-03.jpg","permalink":"https://meimolihan.eu.org/p/docker-%E9%83%A8%E7%BD%B2-iptv-api-%E7%9B%B4%E6%92%AD%E6%BA%90/","title":"Docker 部署 iptv Api 直播源"},{"content":"一 、docker 部署 iptv-allinone 直播源 dockerhub地址： https://hub.docker.com/r/youshandefeiyang/allinone allinone直播源地址： http://localhost:35455/tv.m3u 1 、终端命令创建docker-compose.yml文件 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 mkdir -p /mnt/mydisk/home/iptv-allinone \u0026amp;\u0026amp; touch /mnt/mydisk/home/iptv-allinone/docker-compose.yml \u0026amp;\u0026amp; cat \u0026gt; /mnt/mydisk/home/iptv-allinone/docker-compose.yml \u0026lt;\u0026lt;\u0026#39;EOF\u0026#39; services: allinone: image: youshandefeiyang/allinone container_name: allinone ports: - 35455:35455 privileged: true restart: unless-stopped ## 每天凌晨两点，更新allinone容器 watchtower: command: allinone -c --schedule \u0026#34;0 0 2 * * *\u0026#34; image: containrrr/watchtower volumes: - /var/run/docker.sock:/var/run/docker.sock restart: unless-stopped container_name: watchtower EOF cd /mnt/mydisk/home/iptv-allinone \u0026amp;\u0026amp; docker-compose up -d 2 、拉取并运行 1 cd /mnt/mydisk/home/iptv-allinone \u0026amp;\u0026amp; docker-compose up -d 3 、停止并删除 1 cd /mnt/mydisk/home/iptv-allinone \u0026amp;\u0026amp; docker-compose down 4 、拉取镜像 1 docker pull youshandefeiyang/allinone 5 、容器升级 1 cd /mnt/mydisk/home/iptv-allinone \u0026amp;\u0026amp; docker-compose down \u0026amp;\u0026amp; docker-compose pull \u0026amp;\u0026amp; docker-compose up -d \u0026amp;\u0026amp; docker image prune -f 二 、容器维护命令 1 、查看所有运行容器的名称 1 docker ps -a --format \u0026#34;{{.Names}}\u0026#34; 2 、停止 allinone 容器 1 docker stop allinone 3 、启动 allinone 容器 1 docker start allinone 4 、重启 allinone 容器 1 docker restart allinone 5 、进入 allinone 容器 1 2 3 ## Ctrl+D 退出容器 ## docker exec -it allinone sh docker exec -it allinone bash 6 、查看 allinone 配置文件 1 cat /mnt/mydisk/home/iptv-allinone/docker-compose.yml ","date":"2025-01-22T10:00:42+08:00","image":"https://file.meimolihan.eu.org/img/iptv-03.jpg","permalink":"https://meimolihan.eu.org/p/docker-%E9%83%A8%E7%BD%B2-iptv-allinone-%E7%9B%B4%E6%92%AD%E6%BA%90/","title":"Docker 部署 iptv Allinone 直播源"},{"content":"一 、docker 部署 iptv-sources 直播源 项目地址： https://github.com/HerbertHe/iptv-sources 教程： https://github.com/HerbertHe/iptv-sources/discussions/36 1 、终端命令创建docker-compose.yml文件 1 2 3 4 5 6 7 8 9 10 mkdir -p /mnt/mydisk/home/iptv-sources \u0026amp;\u0026amp; touch /mnt/mydisk/home/iptv-sources/docker-compose.yml \u0026amp;\u0026amp; cat \u0026gt; /mnt/mydisk/home/iptv-sources/docker-compose.yml \u0026lt;\u0026lt;\u0026#39;EOF\u0026#39; services: iptv-sources: image: herberthe0229/iptv-sources:latest ports: - 4000:8080 container_name: iptv-sources EOF cd /mnt/mydisk/home/iptv-sources \u0026amp;\u0026amp; docker-compose up -d 2 、创建执行内部命令的脚本 1 2 3 4 5 6 7 8 sudo touch ~/iptv-update.sh \u0026amp;\u0026amp; sudo chmod +x ~/iptv-update.sh \u0026amp;\u0026amp; sudo cat \u0026gt; ~/iptv-update.sh \u0026lt;\u0026lt;\u0026#39;EOF\u0026#39; #!/bin/sh # 执行内部更新命令 docker exec -d iptv-sources /bin/sh ./update-sources.sh EOF /bin/sh ~/iptv-update.sh 3 、拉取并运行 1 cd /mnt/mydisk/home/iptv-sources \u0026amp;\u0026amp; docker-compose up -d 4 、停止并删除 1 cd /mnt/mydisk/home/iptv-sources \u0026amp;\u0026amp; docker-compose down 5 、拉取镜像 1 docker pull herberthe0229/iptv-sources:latest 6 、容器升级 1 cd /mnt/mydisk/home/iptv-sources \u0026amp;\u0026amp; docker-compose down \u0026amp;\u0026amp; docker-compose pull \u0026amp;\u0026amp; docker-compose up -d \u0026amp;\u0026amp; docker image prune -f 二 、添加定时任务 1 、追加一条计划任务（每2小时第0分钟，执行一次任务） 1 2 3 4 5 6 7 8 ## 每2小时第0分钟，执行一次任务，直播源更新 { crontab -l; echo \u0026#34;\u0026#34;; } | crontab - { crontab -l; echo \u0026#34;## 每2小时第0分钟，执行一次任务\u0026#34;; } | crontab - { crontab -l; echo \u0026#34;15 2 * * * 0 */2 * * * /bin/sh ~/iptv-update.sh\u0026#34;; } | crontab - echo \u0026#34;执行已完成，任务已设置。\u0026#34; crontab -l ## 查看是否成功 2 、列出当前用户的Cron任务 1 crontab -l 3 、编辑Cron任务 1 crontab -e 三 、容器维护命令 1 、查看所有运行容器的名称 1 docker ps -a --format \u0026#34;{{.Names}}\u0026#34; 2 、停止 iptv-sources 容器 1 docker stop iptv-sources 3 、启动 iptv-sources 容器 1 docker start iptv-sources 4 、重启 iptv-sources 容器 1 docker restart iptv-sources 5 、进入 iptv-sources 容器 1 2 3 ## Ctrl+D 退出容器 ## docker exec -it iptv-sources sh docker exec -it iptv-sources bash 6 、查看 iptv-sources 配置文件 1 cat /mnt/mydisk/home/iptv-sources/docker-compose.yml ","date":"2025-01-22T09:54:23+08:00","image":"https://file.meimolihan.eu.org/img/iptv-03.jpg","permalink":"https://meimolihan.eu.org/p/docker-%E9%83%A8%E7%BD%B2-iptv-sources-%E7%9B%B4%E6%92%AD%E6%BA%90/","title":"Docker 部署 iptv Sources 直播源"},{"content":"一 、docker 部署 speedtest 内网测速 speedtest_官网地址： https://github.com/xiaoxinpro/speedtest-go-zh speedtest_后台地址： http://localhost:7878 1 、Debian 终端命令创建docker-compose.yml文件 1 2 3 4 5 6 7 8 9 10 11 12 13 14 mkdir -p /mnt/mydisk/home/speedtest/config \u0026amp;\u0026amp; touch /mnt/mydisk/home/speedtest/docker-compose.yml \u0026amp;\u0026amp; cat \u0026gt; /mnt/mydisk/home/speedtest/docker-compose.yml \u0026lt;\u0026lt;\u0026#39;EOF\u0026#39; services: speedtest-go-zh: container_name: speedtest image: chishin/speedtest-go-zh:latest restart: always network_mode: bridge ## 桥接网络 ports: - 7878:8989 volumes: - ./config:/app/config EOF cd /mnt/mydisk/home/speedtest \u0026amp;\u0026amp; docker-compose up -d 2 、拉取并运行 1 cd /mnt/mydisk/home/speedtest \u0026amp;\u0026amp; docker-compose up -d 3 、停‮并止‬删除 1 cd /mnt/mydisk/home/speedtest \u0026amp;\u0026amp; docker-compose down 4 、拉取镜像 1 docker pull chishin/speedtest-go-zh:latest 5 、容器升级 1 cd /mnt/mydisk/home/speedtest \u0026amp;\u0026amp; docker-compose down \u0026amp;\u0026amp; docker-compose pull \u0026amp;\u0026amp; docker-compose up -d \u0026amp;\u0026amp; docker image prune -f 二 、容器维护命令 1 、查‮所看‬有运行‮器容‬的名称 1 docker ps -a --format \u0026#34;{{.Names}}\u0026#34; 2 、停止 speedtest 容器 1 docker stop speedtest 3 、启动 speedtest 容器 1 docker start speedtest 4 、重启 speedtest 容器 1 docker restart speedtest 5 、进入 speedtest 容器 1 2 3 ## Ctrl+D 退出容器 ## docker exec -it speedtest sh docker exec -it speedtest bash 6 、查看 speedtest 配置文件 1 cat /mnt/mydisk/home/speedtest/docker-compose.yml ","date":"2025-01-22T09:46:41+08:00","image":"https://file.meimolihan.eu.org/img/speedtest-02.jpg","permalink":"https://meimolihan.eu.org/p/docker-%E9%83%A8%E7%BD%B2-speedtest-%E5%86%85%E7%BD%91%E6%B5%8B%E9%80%9F/","title":"Docker 部署 speedtest 内网测速"},{"content":"一 、docker 部署 homeassistant homeassistant_官网地址： https://www.home-assistant.io homeassistant_后台地址： http://localhost:8123 1 、Debian 终端命令创建docker-compose.yml文件 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 mkdir -p /mnt/mydisk/home/homeassistant/config \u0026amp;\u0026amp; touch /mnt/mydisk/home/homeassistant/docker-compose.yml \u0026amp;\u0026amp; cat \u0026gt; /mnt/mydisk/home/homeassistant/docker-compose.yml \u0026lt;\u0026lt;\u0026#39;EOF\u0026#39; services: homeassistant: container_name: homeassistant image: ghcr.io/home-assistant/home-assistant:stable restart: unless-stopped volumes: - ./config:/config - ./localtime:/etc/localtime:ro - ./dbus:/run/dbus:ro environment: - TZ=Asia/Shanghai ## 定义时区 privileged: true network_mode: host EOF cd /mnt/mydisk/home/homeassistant \u0026amp;\u0026amp; docker-compose up -d 2 、拉取并运行 1 cd /mnt/mydisk/home/homeassistant \u0026amp;\u0026amp; docker-compose up -d 3 、停‮并止‬删除 1 cd /mnt/mydisk/home/homeassistant \u0026amp;\u0026amp; docker-compose down 4 、拉取镜像 1 docker pull ghcr.io/home-assistant/home-assistant:stable 5 、容器升级 1 cd /mnt/mydisk/home/homeassistant \u0026amp;\u0026amp; docker-compose down \u0026amp;\u0026amp; docker-compose pull \u0026amp;\u0026amp; docker-compose up -d \u0026amp;\u0026amp; docker image prune -f 二 、容器维护命令 1 、查‮所看‬有运行‮器容‬的名称 1 docker ps -a --format \u0026#34;{{.Names}}\u0026#34; 2 、停止 homeassistant 容器 1 docker stop homeassistant 3 、启动 homeassistant 容器 1 docker start homeassistant 4 、重启 homeassistant 容器 1 docker restart homeassistant 5 、进入 homeassistant 容器 1 2 3 ## Ctrl+D 退出容器 ## docker exec -it homeassistant sh docker exec -it homeassistant bash 6 、查看 homeassistant 配置文件 1 cat /mnt/mydisk/home/homeassistant/docker-compose.yml 三 、安装 HACS 进入容器 1 docker exec -it homeassistant bash 安装 HACS 1 wget -O - https://hacs.vip/get | bash - 重启 homeassistant 容器 1 reboot 主界面\u0026ndash;\u0026gt;设置\u0026ndash;\u0026gt;设备与服务\u0026ndash;\u0026gt;添加集成\u0026ndash;\u0026gt;搜索 hacs\u0026ndash;\u0026gt;绑定Github 在hacs中搜索 Xiaomi Miot Auto 并安装 主界面\u0026ndash;\u0026gt;设置\u0026ndash;\u0026gt;设备与服务\u0026ndash;\u0026gt;添加集成\u0026ndash;\u0026gt;搜索 apple\u0026ndash;\u0026gt;安装 HomeKit Bridge 四 、反向代理 编辑/mnt/mydisk/home/homeassistant/config/configuration.yaml文件\n在文件后面添加以下内容：\n1 2 3 4 5 http: use_x_forwarded_for: true trusted_proxies: - 10.10.10.0/24 - 127.0.0.1 ","date":"2025-01-22T08:48:39+08:00","image":"https://file.meimolihan.eu.org/img/homeassistant-03.jpg","permalink":"https://meimolihan.eu.org/p/docker-%E9%83%A8%E7%BD%B2-homeassistant/","title":"Docker 部署 homeassistant"},{"content":"一 、docker 部署 aipan 网盘搜索 爱盼网盘搜索_Docker Hub地址： https://hub.docker.com/r/fooololo/aipan-netdisk-search/tags 爱盼网盘搜索_后台地址： http://localhost:5055 1 、Debian 终端命令创建docker-compose.yml文件 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 mkdir -p /mnt/mydisk/home/aipan \u0026amp;\u0026amp; touch /mnt/mydisk/home/aipan/docker-compose.yml \u0026amp;\u0026amp; cat \u0026gt; /mnt/mydisk/home/aipan/docker-compose.yml \u0026lt;\u0026lt;\u0026#39;EOF\u0026#39; services: aipan: image: fooololo/aipan-netdisk-search:latest container_name: aipan network_mode: bridge restart: unless-stopped ports: - 5055:3000 logging: options: max-size: 5m max-file: \u0026#34;5\u0026#34; EOF cd /mnt/mydisk/home/aipan \u0026amp;\u0026amp; docker-compose up -d 2 、拉取并运行 1 cd /mnt/mydisk/home/aipan \u0026amp;\u0026amp; docker-compose up -d 3 、停止并删除 1 cd /mnt/mydisk/home/aipan \u0026amp;\u0026amp; docker-compose down 4 、拉取镜像 1 docker pull fooololo/aipan-netdisk-search:latest 5 、容器升级 1 cd /mnt/mydisk/home/aipan \u0026amp;\u0026amp; docker-compose down \u0026amp;\u0026amp; docker-compose pull \u0026amp;\u0026amp; docker-compose up -d \u0026amp;\u0026amp; docker image prune -f 二 、容器维护命令 1 、查看所有运行容器的名称 1 docker ps -a --format \u0026#34;{{.Names}}\u0026#34; 2 、停止 aipan 容器 1 docker stop aipan 3 、启动 aipan 容器 1 docker start aipan 4 、重启 aipan 容器 1 docker restart aipan 5 、进入 aipan 容器 1 2 3 ## Ctrl+D 退出容器 ## docker exec -it aipan sh docker exec -it aipan bash 6 、查看 aipan 配置文件 1 cat /mnt/mydisk/home/aipan/docker-compose.yml ","date":"2025-01-22T08:41:51+08:00","image":"https://file.meimolihan.eu.org/img/aipan-02.jpg","permalink":"https://meimolihan.eu.org/p/docker-%E9%83%A8%E7%BD%B2-aipan-%E7%BD%91%E7%9B%98%E6%90%9C%E7%B4%A2/","title":"Docker 部署 aipan 网盘搜索"},{"content":"一 、docker 部署 mtab 书签 mtab 书签官网： https://www.mtab.cc/ github 地址： https://github.com/tsxcw/mtab dockerhub 地址： https://hub.docker.com/r/itushan/mtab mtab书签 后台地址： http://localhost:9200 1 、终端命令创建docker-compose.yml文件 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 mkdir -p /mnt/mydisk/home/mtab \u0026amp;\u0026amp; touch /mnt/mydisk/home/mtab/docker-compose.yml \u0026amp;\u0026amp; cat \u0026gt; /mnt/mydisk/home/mtab/docker-compose.yml \u0026lt;\u0026lt;\u0026#39;EOF\u0026#39; services: mysql8: image: mysql:8.0 ## 镜像版本 container_name: mtab_sql ## 请不要修改(下面有联动) restart: always ## 重启策略 ports: - \u0026#34;9201:3306\u0026#34; volumes: - ./mysql:/var/lib/mysql environment: MYSQL_ROOT_PASSWORD: mtab ## mysql的root密码 MYSQL_DATABASE: mtab ## 数据库名 MYSQL_USER: mtab ## 数据库用户名 MYSQL_PASSWORD: mtab ## 数据库密码 TZ: Asia/Shanghai CHARACTER_SET_SERVER: utf8mb4 COLLATION_SERVER: utf8mb4_general_ci networks: - my-network mTab: ## 服务名称(可自定义) container_name: mtab ## 容器名称(可自定义) image: itushan/mtab ## 镜像版本 restart: always ## 重启策略 ports: - \u0026#34;9200:80\u0026#34; volumes: - ./app:/app environment: MYSQL_HOST: mtab_sql ## mysql的容器名请不要修改 MYSQL_USER: mtab ## 数据库用户名 MYSQL_PORT: 3306 ## 数据库端口 MYSQL_PASSWORD: mtab ## 数据库密码 MYSQL_DATABASE: mtab ## 数据库名 ADMIN_USER: admin ## 安装后默认管理员账号 可以安装后修改 ADMIN_PASSWORD: 12345678 ## 安装后默认管理员密码 可以安装后修改 depends_on: - mysql8 entrypoint: [ \u0026#34;sh\u0026#34;, \u0026#34;-c\u0026#34;, \u0026#34;sleep 30 \u0026amp;\u0026amp; ./start.sh\u0026#34; ] ## 延迟启动，等待mysql启动 networks: - my-network networks: my-network: driver: bridge EOF cd /mnt/mydisk/home/mtab \u0026amp;\u0026amp; docker-compose up -d 2 、拉取并运行 1 cd /mnt/mydisk/home/mtab \u0026amp;\u0026amp; docker-compose up -d 3 、停止并删除 1 cd /mnt/mydisk/home/mtab \u0026amp;\u0026amp; docker-compose down 4 、拉取镜像 1 docker pull itushan/mtab 5 、容器升级 1 cd /mnt/mydisk/home/mtab \u0026amp;\u0026amp; docker-compose down \u0026amp;\u0026amp; docker-compose pull \u0026amp;\u0026amp; docker-compose up -d \u0026amp;\u0026amp; docker image prune -f 二 、容器维护命令 1 、查看所有运行容器的名称 1 docker ps -a --format \u0026#34;{{.Names}}\u0026#34; 2 、停止 mtab 容器 1 docker stop mtab 3 、启动 mtab 容器 1 docker start mtab 4 、重启 mtab 容器 1 docker restart mtab 5 、进入 mtab 容器 1 2 3 ## Ctrl+D 退出容器 ## docker exec -it mtab sh docker exec -it mtab bash 6 、查看 mtab 配置文件 1 cat /mnt/mydisk/home/mtab/docker-compose.yml ","date":"2025-01-22T08:36:24+08:00","image":"https://file.meimolihan.eu.org/img/mtab.jpg","permalink":"https://meimolihan.eu.org/p/docker%E9%83%A8%E7%BD%B2mtab%E4%B9%A6%E7%AD%BE/","title":"Docker部署mtab书签"},{"content":"一 、docker 部署 etvhelper 悟空盒子助手 悟空大佬_github地址： https://github.com/wukongdaily/tvhelper-docker 盒子助手_后台地址：无后台，sh连接，用户名和密码分别是：root和password\n1 、Debian终端命令创建docker-compose.yml文件 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 mkdir -p /mnt/mydisk/home/tvhelper \u0026amp;\u0026amp; touch /mnt/mydisk/home/tvhelper/docker-compose.yml \u0026amp;\u0026amp; cat \u0026gt; /mnt/mydisk/home/tvhelper/docker-compose.yml \u0026lt;\u0026lt;\u0026#39;EOF\u0026#39; services: box: ## 服务名称（可自定义） container_name: tvhelper ## 容器名称（可自定义） image: wukongdaily/box:latest ## 镜像版本 restart: unless-stopped ## 重启策略 network_mode: bridge ## 桥接网络 ports: - 2288:80 - 2299:22 environment: - PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/lib/android-sdk/platform-tools volumes: - ./data:/tvhelper/shells/data ## 容器内运行的就是alpine linux系统。 ## ssh端口：2299 ## ssh用户名和密码是：root/password ## shell终端执行命令：./tv.sh ## apk放在/mnt/mydisk/home/tvhelper/data目录 EOF cd /mnt/mydisk/home/tvhelper \u0026amp;\u0026amp; docker-compose up -d 2 、拉取并运行 1 cd /mnt/mydisk/home/tvhelper \u0026amp;\u0026amp; docker-compose up -d 3 、停止并删除 1 cd /mnt/mydisk/home/tvhelper \u0026amp;\u0026amp; docker-compose down 4 、进入 tvhelper 容器 1 2 3 ## Ctrl+D 退出容器 ## docker exec -it tvhelper sh docker exec -it tvhelper bash 5 、打开 tvhelper 1 ./tv.sh 6 、容器升级 1 cd /mnt/mydisk/home/tvhelper \u0026amp;\u0026amp; docker-compose down \u0026amp;\u0026amp; docker-compose pull \u0026amp;\u0026amp; docker-compose up -d \u0026amp;\u0026amp; docker image prune -f 二 、容器维护命令 1 、查看所有运行容器的名称 1 docker ps -a --format \u0026#34;{{.Names}}\u0026#34; 2 、停止 tvhelper 容器 1 docker stop tvhelper 3 、启动 tvhelper 容器 1 docker start tvhelper 4 、重启 tvhelper 容器 1 docker restart tvhelper 5 、进入 tvhelper 容器 1 2 3 ## Ctrl+D 退出容器 ## docker exec -it tvhelper sh docker exec -it tvhelper bash 6 、查看 tvhelper 配置文件 1 cat /mnt/mydisk/home/tvhelper/docker-compose.yml ","date":"2025-01-22T08:28:07+08:00","image":"https://file.meimolihan.eu.org/img/etvhelper.jpg","permalink":"https://meimolihan.eu.org/p/docker-%E9%83%A8%E7%BD%B2-etvhelper-%E6%82%9F%E7%A9%BA%E7%9B%92%E5%AD%90%E5%8A%A9%E6%89%8B/","title":"Docker 部署 etvhelper 悟空盒子助手"},{"content":"一 、docker 部署 Jellyfin Jellyfin_Docker Hub地址： https://hub.docker.com/r/jellyfin/jellyfin Jellyfin_GitHub地址： https://github.com/jellyfin/jellyfin Jellyfin_后台地址： http://localhost:8096 1 、Debian终端命令创建docker-compose.yml文件 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 mkdir -p /mnt/mydisk/home/jellyfin \u0026amp;\u0026amp; touch /mnt/mydisk/home/jellyfin/docker-compose.yml /mnt/mydisk/home/jellyfin/config/hosts \u0026amp;\u0026amp; cat \u0026gt; /mnt/mydisk/home/jellyfin/docker-compose.yml \u0026lt;\u0026lt;\u0026#39;EOF\u0026#39; version: \u0026#34;3.9\u0026#34; services: jellyfin: ## 服务名称（可自定义） container_name: jellyfin ## 容器名称（可自定义） image: nyanmisaka/jellyfin:latest ## 镜像版本 restart: unless-stopped ## 重启策略 network_mode: bridge ## 桥接网络 ports: - 8096:8096 volumes: - ./config:/config - ./cache:/cache - ./config/hosts:/etc/hosts - /mnt/ARS2-NFS/nas/link:/media ## 媒体文件夹 - /mnt:/mnt:rslave privileged: true environment: - TZ=Asia/Shanghai - PUID=0 - PGID=0 devices: - /dev/dri:/dev/dri ## 这是Debian终端命令创建docker-compose.yml文件 ## nyanmisaka镜像linux镜像：nyanmisaka/jellyfin:latest ## nyanmisaka镜像ARS2镜像: nyanmisaka/jellyfin:latest-rockchip ## 官方镜像：jellyfin/jellyfin:latest（中文乱码） EOF cd /mnt/mydisk/home/jellyfin \u0026amp;\u0026amp; docker-compose up -d 2 、ARS2终端命令创建docker-compose.yml文件 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 mkdir -p /mnt/mydisk/home/jellyfin \u0026amp;\u0026amp; touch /mnt/mydisk/home/jellyfin/docker-compose.yml \u0026amp;\u0026amp; cat \u0026gt; /mnt/mydisk/home/jellyfin/docker-compose.yml \u0026lt;\u0026lt;EOF version: \u0026#34;3\u0026#34; services: jellyfin: container_name: jellyfin ## 容器名称（可自定义） image: nyanmisaka/jellyfin:latest-rockchip ## 镜像名称 restart: unless-stopped ## 重启策略 network_mode: bridge ## 桥接网络 ports: - 8096:8096 volumes: - ./config:/config - ./cache:/cache - /mnt/mydisk/nas/link:/media ## 媒体文件夹 - /mnt:/mnt:rslave privileged: true environment: - TZ=Asia/Shanghai - PUID=0 - PGID=0 devices: - /dev/dri:/dev/dri ## 这是ARS2终端命令创建docker-compose.yml文件 ## nyanmisaka镜像linux镜像：nyanmisaka/jellyfin:latest ## nyanmisaka镜像ARS2镜像: nyanmisaka/jellyfin:latest-rockchip ## 官方镜像：jellyfin/jellyfin:latest（中文乱码） EOF cd /mnt/mydisk/home/jellyfin \u0026amp;\u0026amp; docker-compose up -d 3 、拉取并运行 1 cd /mnt/mydisk/home/jellyfin \u0026amp;\u0026amp; docker-compose up -d 4 、停止并删除 1 cd /mnt/mydisk/home/jellyfin \u0026amp;\u0026amp; docker-compose down 5 、拉取镜像 1 docker pull nyanmisaka/jellyfin:latest 6 、容器升级 1 cd /mnt/mydisk/home/jellyfin \u0026amp;\u0026amp; docker-compose down \u0026amp;\u0026amp; docker-compose pull \u0026amp;\u0026amp; docker-compose up -d \u0026amp;\u0026amp; docker image prune -f 二 、容器维护命令 1 、查看所有运行容器的名称 1 docker ps -a --format \u0026#34;{{.Names}}\u0026#34; 2 、停止 jellyfin 容器 1 docker stop jellyfin 3 、启动 jellyfin 容器 1 docker start jellyfin 4 、重启 jellyfin 容器 1 docker restart jellyfin 5 、进入 jellyfin 容器 1 2 3 ## Ctrl+D 退出容器 ## docker exec -it jellyfin sh docker exec -it jellyfin bash 6 、查看 jellyfin 配置文件 1 cat /mnt/mydisk/home/jellyfin/docker-compose.yml 三 、jellyfin后台配置 1 、进入到jellyfin后台设置核显转码 左上角三条杠\u0026ndash;\u0026gt;控制台\u0026ndash;\u0026gt;播放\u0026ndash;\u0026gt;硬件加速\u0026ndash;\u0026gt;Intel QuickSync(Qsv)\u0026ndash;\u0026gt;启动硬件解码：所有格式全部勾上\u0026ndash;\u0026gt;保存 2 、字幕插件:OpenSubtitles 字幕官网：https://github.com/91270/MeiamSubtitles 通过 控制台 -\u0026gt; 插件 -\u0026gt; 存储库 添加存储库 URL , 即可通过插件目录查看并安装插件\n2.1 、添加 OpenSubtitles 插件存储库：https://github.com/91270/MeiamSubtitles.Release/raw/main/Plugin/manifest-stable.json 控制台 ——\u0026gt; 插件 ——\u0026gt; 目录 ——\u0026gt; 点元数据下面的OpenSubtitles ——\u0026gt; 点Install安装 ——\u0026gt; 安装完成之后重启 ——\u0026gt; 控制台 ——\u0026gt; 插件 ——\u0026gt; 点安装好的OpenSubtitles\n2.2 、OpenSubtitles 账户注册 账号密码自行注册： https://www.opensubtitles.com 注册完成后登陆进入： https://www.opensubtitles.com/en/consumers 点 NEW CONSUMER\nname 填 jellyfin\n点SAVE\n这个时候出来的就是API KEY 了\n全部完成之后\n重启docker容器 ——\u0026gt; 随便点开一个影片 ——\u0026gt; 右上角三个点 ——\u0026gt; 修改字幕 ——\u0026gt; 点放大镜就可以搜索到字幕了\n3 、安装 MetaShark 刮削器插件 豆瓣刮削metashark官网： https://github.com/cxfksword/jellyfin-plugin-metashark 3.1 、添加 MetaShark 插件存储库： 【 国内加速 】\n1 https://gitee.com/cwhzy/jellyfin-plugin-metashark/releases/download/manifest/manifest_cn.json 【 国外访问 】\n1 https://github.com/cxfksword/jellyfin-plugin-metashark/releases/download/manifest/manifest.json 【 备用仓库 】\n1 https://ghproxy.com/https://github.com/cxfksword/jellyfin-plugin-metashark/releases/download/manifest/manifest_cn.json 3.2 、如何使用 安装后，先进入控制台 -\u0026gt; 插件，查看下MetaShark插件是否是Active状态\n进入控制台 -\u0026gt; 媒体库，点击任一媒体库进入配置页，在元数据下载器选项中勾选MetaShark，并把MetaShark移动到第一位\n4 、跳片头intro-skipper官网 跳片头intro-skipper官网： https://github.com/ConfusedPolarBear/intro-skipper 4.1 、 添加 intro-skipper 插件存储库 1 https://raw.githubusercontent.com/ConfusedPolarBear/intro-skipper/master/manifest.json 四 、jellyfin定时任务自动同步下载的hosts文件到nastool映射的hosts文件（20240916测试成功） 1 、定时任务 1 2 ## 每天凌晨1点20分，使用curl命令从Gitee的链接下载最新的hosts文件，并将其保存到本地/tmp/hosts文件中。 20 1 * * * curl -o /tmp/hosts https://ghp.ci/https://raw.githubusercontent.com/775852123/tmdb-hosts/main/hosts \u0026amp;\u0026amp; sleep 5 \u0026amp;\u0026amp; rsync -avhzp --progress --delete /tmp/hosts /mnt/mydisk/home/jellyfin/config/hosts 2 、查看下载是否成功 1 cat /tmp/hosts 3 、查看修改是否成功 1 cat /mnt/mydisk/home/jellyfin/config/hosts 每天凌晨1点15分，使用curl命令从Gitee的链接下载最新的hosts文件，并将其保存到本地/tmp/hosts文件中。\n等待5秒钟，确保文件下载完成。\n使用rsync命令将下载的hosts文件同步到/mnt/mydisk/home/emby-amilys/config/hosts目录中。rsync是一个用于同步文件和目录的强大工具，常用于备份和镜像。\n","date":"2025-01-21T21:16:08+08:00","image":"https://file.meimolihan.eu.org/img/jellyfin-01.jpg","permalink":"https://meimolihan.eu.org/p/docker-%E9%83%A8%E7%BD%B2-jellyfin/","title":"Docker 部署 Jellyfin"},{"content":"一 、docker 部署 plex 影音服务器 plex_GitHub地址： https://github.com/plexinc/pms-docker 获取PLEX_CLAIM地址： https://www.plex.tv/claim plex_后台地址： http://localhost:32400/ 1 、Debian终端命令创建docker-compose.yml文件 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 mkdir -p /mnt/mydisk/home/plex/config \u0026amp;\u0026amp; touch /mnt/mydisk/home/plex/docker-compose.yml \u0026amp;\u0026amp; cat \u0026gt; /mnt/mydisk/home/plex/docker-compose.yml \u0026lt;\u0026lt;\u0026#39;EOF\u0026#39; version: \u0026#34;3\u0026#34; services: pms-docker: ## 服务名称（可自定义） container_name: plex ## 容器名称（可自定义） image: plexinc/pms-docker ## 镜像版本 restart: unless-stopped ## 重启策略 network_mode: bridge ## 桥接网络 ports: - 32400:32400/tcp - 8324:8324/tcp - 32469:32469/tcp - 1900:1900/udp - 32410:32410/udp - 32412:32412/udp - 32413:32413/udp - 32414:32414/udp volumes: - /mnt/mydisk/home/plex/config:/config ## 配置文件目录 - /mnt/mydisk/home/plex/transcode:/transcode ## 缓存目录 - /mnt/ARS2-NFS/nas/link:/data ## 媒体目录 - /mnt:/mnt:rslave ## 媒体高级目录 environment: - TZ=Asia/Shanghai ## 获取PLEX_CLAIM地址：https://www.plex.tv/claim - PLEX_CLAIM=claim-L4apnTB__5UU9Xa1wvUB ## 内网地址 - ADVERTISE_IP=http://10.10.10.245:32400/ ## 定义服务器名称-随意 hostname: \u0026lt;plex\u0026gt; EOF cd /mnt/mydisk/home/plex \u0026amp;\u0026amp; docker-compose up -d 2 、拉取并运行 1 cd /mnt/mydisk/home/plex \u0026amp;\u0026amp; docker-compose up -d 3 、停止并删除 1 cd /mnt/mydisk/home/plex \u0026amp;\u0026amp; docker-compose down 4 、拉取镜像 1 docker pull plexinc/pms-docker:latest 5 、容器升级 1 cd /mnt/mydisk/home/plex \u0026amp;\u0026amp; docker-compose down \u0026amp;\u0026amp; docker-compose pull \u0026amp;\u0026amp; docker-compose up -d \u0026amp;\u0026amp; docker image prune -f 二 、容器维护命令 1 、查看所有运行容器的名称 1 docker ps -a --format \u0026#34;{{.Names}}\u0026#34; 2 、停止 plex 容器 1 docker stop plex 3 、启动 plex 容器 1 docker start plex 4 、重启 plex 容器 1 docker restart plex 5 、进入 plex 容器 1 2 3 ## Ctrl+D 退出容器 ## docker exec -it plex bash docker exec -it plex sh 6 、查看 plex 配置文件 1 cat /mnt/mydisk/home/plex/docker-compose.yml ","date":"2025-01-21T09:53:19+08:00","image":"https://file.meimolihan.eu.org/img/plex-01.jpg","permalink":"https://meimolihan.eu.org/p/docker-%E9%83%A8%E7%BD%B2-plex-%E5%BD%B1%E9%9F%B3%E6%9C%8D%E5%8A%A1%E5%99%A8/","title":"Docker 部署 plex 影音服务器"},{"content":" docker 部署 emby 开心版（amilys大佬版） emby开心版本amilys大佬_Docker Hub地址： https://hub.docker.com/r/amilys/embyserver emby_开心版本amilys大佬_稳定版后台地址： http://localhost:8896/ emby_开心版本amilys大佬_beta版后台地址： http://localhost:8396/ 镜像架构兼容：linux/amd64（x86-64 ）\n一 、部署emby开心版（开心版本amilys大佬） 1 、Debian终端命令创建docker-compose.yml文件 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 mkdir -p /mnt/mydisk/home/emby-amilys/config \u0026amp;\u0026amp; touch /mnt/mydisk/home/emby-amilys/config/hosts \u0026amp;\u0026amp; touch /mnt/mydisk/home/emby-amilys/docker-compose.yml \u0026amp;\u0026amp; cat \u0026gt; /mnt/mydisk/home/emby-amilys/docker-compose.yml \u0026lt;\u0026lt;\u0026#39;EOF\u0026#39; services: emby: container_name: emby-amilys ## 容器名称（可自定义） image: amilys/embyserver:latest ## 镜像名称 restart: always ## 重启策略 network_mode: bridge ## 桥接网络 ports: - 8896:8096/TCP volumes: - ./config:/config:/volume1/docker/emby/config ## 配置文件目录 - ./metadata:/volume1/docker/emby/metadata - ./config/hosts:/etc/hosts ## hosts文件 - /mnt/ARS2-NFS/nas/link:/volume2/video ## 媒体目录 deploy: resources: limits: memory: 8G environment: UID: 0 GID: 0 GIDLIST: 100,101 devices: - /dev/dri:/dev/dri EOF cd /mnt/mydisk/home/emby-amilys \u0026amp;\u0026amp; docker-compose up -d 2 、拉取并运行 1 cd /mnt/mydisk/home/emby-amilys \u0026amp;\u0026amp; docker-compose up -d 3 、停止并删除 1 cd /mnt/mydisk/home/emby-amilys \u0026amp;\u0026amp; docker-compose down 4 、拉取镜像 1 docker pull amilys/embyserver:latest 5 、容器升级 1 cd /mnt/mydisk/home/emby-amilys \u0026amp;\u0026amp; docker-compose down \u0026amp;\u0026amp; docker-compose pull \u0026amp;\u0026amp; docker-compose up -d \u0026amp;\u0026amp; docker image prune -f 6 、emby开心版美化 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 cat \u0026gt; /mnt/mydisk/home/emby-amilys/config/config/ext.sh \u0026lt;\u0026lt;\u0026#39;EOF\u0026#39; #!/bin/sh ######## 说明 2023-07-30 ######## #一个sh脚本，容器每次启动时运行 #方便自定义添加功能 ################################# echo \u0026#34;Emby扩展启动脚本\u0026#34; #去掉下行注释可以关闭次脚本 #exit 0 ########下面可以自行添加功能######## ## 修改容器hosts cat \u0026gt; /etc/hosts \u0026lt;\u0026lt;EOOF 104.16.61.155 image EOOF ## Emby-crx 美化 媒体库ID为空时不启用 ## 媒体库id，用逗号分隔。进入媒体库后url里的parentId ## MediaId=\u0026#34;21466,21463\u0026#34; ## 电影=3 ## 电视剧=845 ## 合集=2486 MediaId=\u0026#34;3,845,2486\u0026#34; sed -i \u0026#39;/this.parentId/s/\u0026#34;\u0026#34;\\|\u0026#34;[0-9]\\+\u0026#34;\\|\u0026#34;\\([0-9]\\+,\\)\\+[0-9]\\+\u0026#34;/\u0026#34;\u0026#39;$MediaId\u0026#39;\u0026#34;/g\u0026#39; /system/dashboard-ui/emby-crx/config.js ## 扩展插件: # embyLaunchPotplayer 外部播放 # ede.user 弹幕 # actorPlus 未知演员隐藏 extmod=\u0026#39;[\u0026#34;embyLaunchPotplayer\u0026#34;,\u0026#34;ede.user\u0026#34;,\u0026#34;actorPlus\u0026#34;]\u0026#39; extmod=\u0026#39;[]\u0026#39; sed -i \u0026#39;/\\ extmod/s/\\[.*\\]/\u0026#39;$extmod\u0026#39;/g\u0026#39; /system/dashboard-ui/ext.js exit 0 EOF ## 重启emby-amilys容器 docker restart emby-amilys 二 、容器维护命令 1 、查看所有运行容器的名称 1 docker ps -a --format \u0026#34;{{.Names}}\u0026#34; 2 、停止 emby-amilys 容器 1 docker stop emby-amilys 3 、启动 emby-amilys 容器 1 docker start emby-amilys 4 、重启 emby-amilys 容器 1 docker restart emby-amilys 5 、进入 emby-amilys 容器 1 2 3 ## Ctrl+D 退出容器 ## docker exec -it emby-amilys bash docker exec -it emby-amilys sh 6 、查看 emby-amilys 配置文件 1 cat /mnt/mydisk/home/emby-amilys/docker-compose.yml ","date":"2025-01-20T04:04:32+08:00","image":"https://file.meimolihan.eu.org/img/emby-02.jpg","permalink":"https://meimolihan.eu.org/p/docker-%E9%83%A8%E7%BD%B2-emby-%E5%BC%80%E5%BF%83%E7%89%88amilys%E5%A4%A7%E4%BD%AC%E7%89%88/","title":"Docker 部署 emby 开心版（amilys大佬版）"},{"content":"一 、docker 部署 nastools 容器合集 Jackett_Docker Hub地址： https://hub.docker.com/r/linuxserver/jackett TMDB官网地址： https://www.themoviedb.org bt-tracker地址： https://github.com/ngosang/trackerslist nastools好用斋哔哩哔哩： https://www.bilibili.com/video/BV1XJ4m1e7XU/ Aria2好用斋哔哩哔哩： https://www.bilibili.com/video/BV1fS421A7kC ChineseSubFinder字幕好用斋哔哩哔哩： https://www.bilibili.com/video/BV1pe411U7x7 Aria2 pro地址： http://localhost:6880/ Jackett地址： http://localhost:9117/ ChineseSubFinder地址： http://localhost:19035/ nastools地址： http://localhost:3000/ jellyfin地址： http://localhost:8098/ 1 、新建所需文件夹 1 mkdir -p /mnt/mydisk/home/nastools /mnt/mydisk/home/nastools/Jackett /mnt/mydisk/home/nastools/chinesesubfinder /mnt/ARS2-NFS/nas/downloads /mnt/ARS2-NFS/nas/link /mnt/ARS2-NFS/nas/link/movie /mnt/ARS2-NFS/nas/link/tv /mnt/ARS2-NFS/nas/movie /mnt/ARS2-NFS/nas/tv 2 、终端命令创建docker-compose.yml文件 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 mkdir -p /mnt/mydisk/home/nastools /mnt/mydisk/home/nastools/Jackett /mnt/mydisk/home/nastools/chinesesubfinder /mnt/ARS2-NFS/nas/downloads /mnt/ARS2-NFS/nas/link /mnt/ARS2-NFS/nas/link/movie /mnt/ARS2-NFS/nas/link/tv /mnt/ARS2-NFS/nas/movie /mnt/ARS2-NFS/nas/tv \u0026amp;\u0026amp; touch /mnt/mydisk/home/nastools/config/hosts /mnt/mydisk/home/nastools/docker-compose.yml \u0026amp;\u0026amp; tee /mnt/mydisk/home/nastools/docker-compose.yml \u0026lt;\u0026lt;\u0026#39;EOF\u0026#39; services: ## chinesesubfinder字幕 chinesesubfinder: ## 服务名称（可自定义） container_name: chinesesubfinder ## 容器名称（可自定义） image: allanpk716/chinesesubfinder:latest-lite ## 镜像版本 restart: always ## 重启策略 network_mode: bridge ## 桥接网络 ports: - 19035:19035 - 19037:19037 volumes: - ./chinesesubfinder:/config - /mnt/ARS2-NFS/nas:/media environment: - PUID=0 - PGID=0 - PERMS=true - TZ=Asia/Shanghai - UMASK=022 hostname: chinesesubfinder logging: driver: json-file options: max-size: 100m ## 电影的目录：/media/link/movie ## 电视剧的目录：/media/link/tv ## chinesesubfinder获取密钥：https://secure.assrt.net/usercp.php ## jackett索引器 jackett: ## 服务名称（可自定义） container_name: jackett ## 容器名称（可自定义） image: linuxserver/jackett ## 镜像版本 restart: unless-stopped ## 重启策略 network_mode: bridge ## 桥接网络 ports: - 9117:9117 volumes: - ./Jackett:/config/Jackett ## 配置文件 - /mnt/ARS2-NFS/nas/downloads:/downloads environment: - PUID=0 - PGID=0 - TZ=Asia/Shanghai - AUTO_UPDATE=true ## nastools视频刮削器 nastools: container_name: nastools ## 容器名称（可自定义） image: diluka/nas-tools:2.9.1 ## 镜像名称 restart: unless-stopped ## 重启策略 network_mode: bridge ## 桥接网络 ports: - 3000:3000 volumes: - ./config:/config - ./config/hosts:/etc/hosts - /mnt/ARS2-NFS/nas:/media - /mnt:/mnt:rslave environment: - PUID=0 - PGID=0 - TZ=Asia/Shanghai - NASTOOL_AUTO_UPDATE=false ## TMDB密钥：973861c2fb241080063515bfe682a709 ## nastools初始用户名：admin 初始密码：password EOF cd /mnt/mydisk/home/nastools \u0026amp;\u0026amp; docker-compose up -d 移出nastools全家桶的项目 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 version: \u0026#34;3\u0026#34; services: aria2-pro: ## 服务名称（可自定义） container_name: aria2-pro ## 定义容器名称 image: p3terx/aria2-pro ## 镜像名称 restart: unless-stopped ## 重启策略 network_mode: bridge ## 桥接网络 ports: - 6800:6800 - 6888:6888 - 6888:6888/udp volumes: - /mnt/mydisk/home/aria2-pro/config:/config - /mnt/ARS2-NFS/downloads/aria2-pro:/downloads environment: - PUID=0 - PGID=0 - RPC_SECRET=haoyong ## aria2连接密钥：haoyong - RPC_PORT=6800 - LISTEN_PORT=6888 - IPV6_MODE=true logging: options: max-size: 1m ariang: ## 服务名称（可自定义） container_name: ariang ## 定义容器名称 image: p3terx/ariang ## 镜像名称 restart: unless-stopped ## 重启策略 network_mode: bridge ## 桥接网络 ports: - 6880:6880 command: --port 6880 --ipv6 logging: options: max-size: 1m 3 、拉取并运行 1 cd /mnt/mydisk/home/nastools \u0026amp;\u0026amp; docker-compose up -d 4 、停止并删除 1 cd /mnt/mydisk/home/nastools \u0026amp;\u0026amp; docker-compose down 5 、容器升级 1 cd /mnt/mydisk/home/nastools \u0026amp;\u0026amp; docker-compose down \u0026amp;\u0026amp; docker-compose pull \u0026amp;\u0026amp; docker-compose up -d \u0026amp;\u0026amp; docker image prune -f 6 、停止和启动aria2-pro容器 1 docker stop aria2-pro ## 停止aria2-pro容器 1 docker start aria2-pro ## 启动aria2-pro容器 7 、相关教程 设置Aria2 pro地址： http://localhost:6880/ 想要更详细的，参考： https://www.bilibili.com/video/BV1fS421A7kC 设置Jackett地址： http://localhost:9117/ 添加index 设置ChineseSubFinder地址： http://localhost:19035/ /media/link/movie\n/media/link/tv\n配置tmdb和字幕源设置\n公用：JOHELaeOJGPBfHSrwHkc4v54wu7XHKu7 （建议自己注册一个，非常简单且不用邮箱确认）\n想要更详细的，参考： https://www.bilibili.com/video/BV1pe411U7x7 配置nastools地址： http://localhost:3000/ 用户名 admin 密码 password\n修改密码同时设置tmdb api\n进行各种对接设置 设置jellyfin地址： http://localhost:8098/ 路径选择：/mnt/mydisk/nas/link/movie\n想要更详细的，windows版参考 https://www.bilibili.com/video/BV11H4y127Rn istoreos版参考 https://www.bilibili.com/video/BV1yi4y1h7i5 qbittorrent配置 transmission配置 二 、容器维护命令 1 、查看所有运行容器的名称 1 docker ps -a --format \u0026#34;{{.Names}}\u0026#34; 2 、停止 nastools 容器 1 docker stop nastools 3 、启动 nastools 容器 1 docker start nastools 4 、重启 nastools 容器 1 docker restart nastools 5 、进入 nastools 容器 1 2 3 ## Ctrl+D 退出容器 ## docker exec -it nastools sh docker exec -it nastools bash 6 、查看 nastools 配置文件 1 cat /mnt/mydisk/home/nastools/docker-compose.yml 三 、nastool定时hosts任务自动同步下载的hosts文件到nastool映射的hosts文件（20240916测试成功） 1 、定时任务 1 2 ## 每天凌晨1点20分，使用curl命令从Gitee的链接下载最新的hosts文件，并将其保存到本地/tmp/hosts文件中。 20 1 * * * curl -o /tmp/hosts https://ghp.ci/https://raw.githubusercontent.com/775852123/tmdb-hosts/main/hosts \u0026amp;\u0026amp; sleep 5 \u0026amp;\u0026amp; rsync -avhzp --progress --delete /tmp/hosts /mnt/mydisk/home/nastools/config/hosts 2 、查看下载是否成功 1 cat /tmp/hosts 3 、查看修改是否成功 1 cat /mnt/mydisk/home/nastools/config/hosts 每天凌晨1点15分，使用curl命令从Gitee的链接下载最新的hosts文件，并将其保存到本地/tmp/hosts文件中。 等待5秒钟，确保文件下载完成。 使用rsync命令将下载的hosts文件同步到/mnt/mydisk/home/emby-amilys/config/hosts目录中。rsync是一个用于同步文件和目录的强大工具，常用于备份和镜像。\n","date":"2025-01-20T03:16:07+08:00","image":"https://file.meimolihan.eu.org/img/nastools.jpg","permalink":"https://meimolihan.eu.org/p/docker-%E9%83%A8%E7%BD%B2-nastools-%E5%AE%B9%E5%99%A8%E5%90%88%E9%9B%86/","title":"Docker 部署 nastools 容器合集"},{"content":"一 、docker 部署 dpanel 容器管理 dpanel_github地址： https://github.com/donknap/dpanel dpanel_后台地址： http://10.10.10.245:8807 1 、终端命令创建docker-compose.yml文件 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 mkdir -p /mnt/mydisk/home/dpanel/config \u0026amp;\u0026amp; touch /mnt/mydisk/home/dpanel/docker-compose.yml \u0026amp;\u0026amp; cat \u0026gt; /mnt/mydisk/home/dpanel/docker-compose.yml \u0026lt;\u0026lt;\u0026#39;EOF\u0026#39; services: dpanel: container_name: dpanel ## 定义容器名称 image: registry.cn-hangzhou.aliyuncs.com/dpanel/dpanel:latest ## 镜像名称 restart: unless-stopped ## 重启策略 network_mode: bridge ## 桥接网络 ports: - 8807:8080 environment: - INSTALL_PASSWORD=admin - INSTALL_USERNAME=admin - APP_NAME=dpanel volumes: - ./config:/dpanel - /var/run/docker.sock:/var/run/docker.sock tty: true stdin_open: true ## 默认账户密码：admin/admin EOF cd /mnt/mydisk/home/dpanel \u0026amp;\u0026amp; docker-compose up -d 2 、拉取并运行 1 cd /mnt/mydisk/home/dpanel \u0026amp;\u0026amp; docker-compose up -d 3 、停止并删除 1 cd /mnt/mydisk/home/dpanel \u0026amp;\u0026amp; docker-compose down 4 、拉取镜像 1 docker pull registry.cn-hangzhou.aliyuncs.com/dpanel/dpanel:latest 5 、容器升级 1 cd /mnt/mydisk/home/dpanel \u0026amp;\u0026amp; docker-compose down \u0026amp;\u0026amp; docker-compose pull \u0026amp;\u0026amp; docker-compose up -d \u0026amp;\u0026amp; docker image prune -f 二 、容器维护命令 1 、查看所有运行容器的名称 1 docker ps -a --format \u0026#34;{{.Names}}\u0026#34; 2 、停止 dpanel 容器 1 docker stop dpanel 3 、启动 dpanel 容器 1 docker start dpanel 4 、重启 dpanel 容器 1 docker restart dpanel 5 、进入 dpanel 容器 1 2 3 ## Ctrl+D 退出容器 ## docker exec -it dpanel sh docker exec -it dpanel bash 6 、查看 dpanel 配置文件 1 cat /mnt/mydisk/home/dpanel/docker-compose.yml ","date":"2025-01-20T02:55:17+08:00","image":"https://file.meimolihan.eu.org/img/dpanel.jpg","permalink":"https://meimolihan.eu.org/p/docker-%E9%83%A8%E7%BD%B2-dpanel-%E5%AE%B9%E5%99%A8%E7%AE%A1%E7%90%86/","title":"Docker 部署 dpanel 容器管理"},{"content":"一 、docker 部署 Cloudreve 个人网盘 Cloudreve_官网： https://cloudreve.org Cloudreve_后台地址： http://localhost:5212 1 、终端命令创建docker-compose.yml文件 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 mkdir -p /mnt/mydisk/home/cloud/cloudreve/uploads /mnt/mydisk/home/cloud/cloudreve/avatar /mnt/mydisk/home/cloud/file \u0026amp;\u0026amp; touch /mnt/mydisk/home/cloud/cloudreve/conf.ini \u0026amp;\u0026amp; touch /mnt/mydisk/home/cloud/cloudreve/cloudreve.db \u0026amp;\u0026amp; mkdir -p /mnt/mydisk/home/cloud/aria2/config \u0026amp;\u0026amp; mkdir -p /mnt/mydisk/home/cloud/data/aria2 \u0026amp;\u0026amp; chmod -R 777 /mnt/mydisk/home/cloud/data/aria2 \u0026amp;\u0026amp; touch /mnt/mydisk/home/cloud/docker-compose.yml \u0026amp;\u0026amp; cat \u0026gt; /mnt/mydisk/home/cloud/docker-compose.yml \u0026lt;\u0026lt;\u0026#39;EOF\u0026#39; services: cloudreve: container_name: cloudreve ## 定义容器名称 image: cloudreve/cloudreve:latest ## 镜像名称 restart: unless-stopped ## 重启策略 network_mode: bridge ## 桥接网络 ports: - 5212:5212 volumes: - /mnt:/data - ./file:/cloudreve/uploads ## 上传文件目录 - ./cloudreve/conf.ini:/cloudreve/conf.ini - ./cloudreve/cloudreve.db:/cloudreve/cloudreve.db - ./cloudreve/avatar:/cloudreve/avatar depends_on: - aria2 aria2: container_name: aria2 ## 定义容器名称 image: p3terx/aria2-pro ## 镜像名称 restart: unless-stopped ## 重启策略 volumes: - ./aria2/config:/config - /mnt:/data environment: - RPC_SECRET= KEJILION - RPC_PORT=6800 volumes: temp_data: driver: local driver_opts: type: none device: $PWD/data o: bind EOF cd /mnt/mydisk/home/cloud \u0026amp;\u0026amp; docker-compose up -d 2 、拉取并运行 1 cd /mnt/mydisk/home/cloud \u0026amp;\u0026amp; docker-compose up -d 3 、停止并删除 1 cd /mnt/mydisk/home/cloud \u0026amp;\u0026amp; docker-compose down 4 、拉取镜像 1 docker pull p3terx/aria2-pro:latest 5 、容器升级 1 cd /mnt/mydisk/home/cloud \u0026amp;\u0026amp; docker-compose down \u0026amp;\u0026amp; docker-compose pull \u0026amp;\u0026amp; docker-compose up -d \u0026amp;\u0026amp; docker image prune -f 二 、容器维护命令 1 、查看所有运行容器的名称 1 docker ps -a --format \u0026#34;{{.Names}}\u0026#34; 2 、停止 cloudreve 容器 1 docker stop cloudreve 3 、启动 cloudreve 容器 1 docker start cloudreve 4 、重启 cloudreve 容器 1 docker restart cloudreve 5 、进入 cloudreve 容器 1 2 3 ## Ctrl+D 退出容器 ## docker exec -it cloudreve sh docker exec -it cloudreve bash 6 、查看 cloudreve 配置文件 1 cat /mnt/mydisk/home/cloud/docker-compose.yml ","date":"2025-01-20T02:49:09+08:00","image":"https://file.meimolihan.eu.org/img/cloudreve.jpg","permalink":"https://meimolihan.eu.org/p/docker-%E9%83%A8%E7%BD%B2-cloudreve-%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%9B%98/","title":"Docker 部署 Cloudreve 个人网盘"},{"content":"一 、docker 部署 nascab 文件管理 Nascab_官网： https://www.nascab.cn Nascab_镜像： https://hub.docker.com/r/ypptec/nascab Nascab_安装说明： https://www.nascab.cn/docker.html Nascab_后台地址： http://localhost:5388 1 、终端命令创建docker-compose.yml文件 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 mkdir -p /mnt/mydisk/home/nascab \u0026amp;\u0026amp; touch /mnt/mydisk/home/nascab/docker-compose.yml \u0026amp;\u0026amp; cat \u0026gt; /mnt/mydisk/home/nascab/docker-compose.yml \u0026lt;\u0026lt;\u0026#39;EOF\u0026#39; services: nascab: ## 服务名称（可自定义） container_name: nascab ## 定义容器名称 image: ypptec/nascab:3.5.3-x64 ## 镜像版本 restart: always ## 重启策略 network_mode: bridge ## 桥接网络 ports: - 5388:80 - 5343:443 - 5390:90 - 5321:21 volumes: - ./config:/root/.local/share/nascab ## 映射nascab配置文件目录 - /mnt:/mnt EOF cd /mnt/mydisk/home/nascab \u0026amp;\u0026amp; docker-compose up -d 2 、拉取并运行 1 cd /mnt/mydisk/home/nascab \u0026amp;\u0026amp; docker-compose up -d 3 、停止并删除 1 cd /mnt/mydisk/home/nascab \u0026amp;\u0026amp; docker-compose down 4 、拉取镜像 1 docker pull ypptec/nascab:3.5.3-x64 5 、容器升级 1 cd /mnt/mydisk/home/nascab \u0026amp;\u0026amp; docker-compose down \u0026amp;\u0026amp; docker-compose pull \u0026amp;\u0026amp; docker-compose up -d \u0026amp;\u0026amp; docker image prune -f 二 、容器维护命令 1 、查看所有运行容器的名称 1 docker ps -a --format \u0026#34;{{.Names}}\u0026#34; 2 、停止 nascab 容器 1 docker stop nascab 3 、启动 nascab 容器 1 docker start nascab 4 、重启 nascab 容器 1 docker restart nascab 5 、进入 nascab 容器 1 2 3 ## Ctrl+D 退出容器 ## docker exec -it nascab sh docker exec -it nascab bash 6 、查看 nascab 配置文件 1 cat /mnt/mydisk/home/nascab/docker-compose.yml ","date":"2025-01-19T15:46:46+08:00","image":"https://file.meimolihan.eu.org/img/nascab-01.jpg","permalink":"https://meimolihan.eu.org/p/docker-%E9%83%A8%E7%BD%B2-nascab-%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/","title":"Docker 部署 nascab 文件管理"},{"content":"一 、部署 kodbox 文件管理 kodbox_官网地址： https://bbs.kodcloud.com/d/758-shi-yong-docker-composekuai-su-bu-shu-kodbox kodbox_后台地址： http://localhost:5366 1 、终端命令创建docker-compose.yml文件 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 mkdir -p /mnt/mydisk/home/kodbox/config \u0026amp;\u0026amp; touch /mnt/mydisk/home/kodbox/docker-compose.yml \u0026amp;\u0026amp; cat \u0026gt; /mnt/mydisk/home/kodbox/docker-compose.yml \u0026lt;\u0026lt;\u0026#39;EOF\u0026#39; services: kodbox: ## 服务名称（可自定义） container_name: kodbox ## 定义容器名称 image: kodcloud/kodbox ## 镜像名称 restart: always ## 重启策略 network_mode: bridge ## 桥接网络 ports: - 5366:80 volumes: - ./config:/var/www/html ## 映射kodbox配置文件目录 - /mnt:/data environment: - TZ=Asia/Shanghai EOF cd /mnt/mydisk/home/kodbox \u0026amp;\u0026amp; docker-compose up -d 2 、拉取并运行 1 cd /mnt/mydisk/home/kodbox \u0026amp;\u0026amp; docker-compose up -d 3 、停止并删除 1 cd /mnt/mydisk/home/kodbox \u0026amp;\u0026amp; docker-compose down 4 、拉取镜像 1 docker pull kodcloud/kodbox 5 、容器升级 1 cd /mnt/mydisk/home/kodbox \u0026amp;\u0026amp; docker-compose down \u0026amp;\u0026amp; docker-compose pull \u0026amp;\u0026amp; docker-compose up -d \u0026amp;\u0026amp; docker image prune -f 二 、容器维护命令 1 、查看所有运行容器的名称 1 docker ps -a --format \u0026#34;{{.Names}}\u0026#34; 2 、停止 kodbox 容器 1 docker stop kodbox 3 、启动 kodbox 容器 1 docker start kodbox 4 、重启 kodbox 容器 1 docker restart kodbox 5 、进入 kodbox 容器 1 2 3 ## Ctrl+D 退出容器 ## docker exec -it kodbox sh docker exec -it kodbox bash 6 、查看 kodbox 配置文件 1 cat /mnt/mydisk/home/kodbox/docker-compose.yml ","date":"2025-01-18T19:13:19+08:00","image":"https://file.meimolihan.eu.org/img/kodbox-01.jpg","permalink":"https://meimolihan.eu.org/p/docker-%E9%83%A8%E7%BD%B2-kodbox-%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/","title":"Docker 部署 kodbox 文件管理"},{"content":"一 、docker 部署 gopeed 下载器 gopeed_官网地址： https://www.gopeed.com/zh-CN gopeed_后台地址： http://localhost:6600 1 、终端命令创建docker-compose.yml文件 1 2 3 4 5 6 7 8 9 10 11 12 13 mkdir -p /mnt/mydisk/home/gopeed/config \u0026amp;\u0026amp; touch /mnt/mydisk/home/gopeed/docker-compose.yml \u0026amp;\u0026amp; cat \u0026gt; /mnt/mydisk/home/gopeed/docker-compose.yml \u0026lt;\u0026lt;\u0026#39;EOF\u0026#39; services: gopeed: ## 服务名称（可自定义） image: liwei2633/gopeed ## 镜像版本 container_name: gopeed ## 容器名称（可自定义） restart: always ## 重启策略 network_mode: bridge ## 桥接网络 ports: - 6600:9999 volumes: - /mnt/mydisk/home/gopeed/config:/app/storage ## 映射gopeed配置文件目录 - /mnt/ARS2-NFS/downloads/gopeed:/app/Downloads ## 映射下载目录 EOF 2 、拉取并运行 1 cd /mnt/mydisk/home/gopeed \u0026amp;\u0026amp; docker-compose up -d 3 、停止并删除 1 cd /mnt/mydisk/home/gopeed \u0026amp;\u0026amp; docker-compose down 4 、拉取镜像 1 docker pull liwei2633/gopeed 5 、容器升级 1 cd /mnt/mydisk/home/gopeed \u0026amp;\u0026amp; docker-compose down \u0026amp;\u0026amp; docker-compose pull \u0026amp;\u0026amp; docker-compose up -d \u0026amp;\u0026amp; docker image prune -f 二 、容器维护命令 1 、查看所有运行容器的名称 1 docker ps -a --format \u0026#34;{{.Names}}\u0026#34; 2 、停止 gopeed 容器 1 docker stop gopeed 3 、启动 gopeed 容器 1 docker start gopeed 4 、重启 gopeed 容器 1 docker restart gopeed 5 、进入 gopeed 容器 1 2 3 ## Ctrl+D 退出容器 ## docker exec -it gopeed sh docker exec -it gopeed bash 6 、查看 gopeed 配置文件 1 cat /mnt/mydisk/home/gopeed/docker-compose.yml ","date":"2025-01-18T19:03:08+08:00","image":"https://file.meimolihan.eu.org/img/gopeed-01.jpg","permalink":"https://meimolihan.eu.org/p/docker-%E9%83%A8%E7%BD%B2-gopeed-%E4%B8%8B%E8%BD%BD%E5%99%A8/","title":"Docker 部署 gopeed 下载器"},{"content":"一 、docker 部署 pi-hole 广告拦截器 pi-hole官网地址： https://docs.pi-hole.net/ pi-hole_Docker Hub地址： https://hub.docker.com/r/pihole/pihole pi-hole_GitHub地址： https://github.com/pi-hole/docker-pi-hole/ pi-hole后台地址： http://localhost:19000/admin/index.php 1 、终端命令创建docker-compose.yml文件 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 mkdir -p /mnt/mydisk/home/pihole/config \u0026amp;\u0026amp; touch /mnt/mydisk/home/pihole/docker-compose.yml \u0026amp;\u0026amp; cat \u0026gt; /mnt/mydisk/home/pihole/docker-compose.yml \u0026lt;\u0026lt;\u0026#39;EOF\u0026#39; services: pihole: ## 服务名称（可自定义） container_name: pihole ## 容器名称（可自定义） image: pihole/pihole:latest ## 镜像版本 restart: always ## 重启策略 network_mode: bridge ## 桥接网络 ports: - 53:53/tcp - 53:53/udp - 67:67/udp - 19000:80/tcp volumes: - ./config/etc-pihole:/etc/pihole - ./config/etc-dnsmasq.d:/etc/dnsmasq.d environment: - TZ=Asia/Shanghai - WEBPASSWORD=mobufan ## root账户密码 cap_add: - NET_ADMIN ## 添加新的广告列表 ## https://sysctl.org/cameleon/hosts ## https://anti-ad.net/domains.txt ## https://raw.githubusercontent.com/StevenBlack/hosts/master/hosts ## https://gitlab.com/quidsup/notrack-blocklists/raw/master/notrack-blocklist.txt ## 更多信息请访问 ## https://github.com/pi-hole/docker-pi-hole/ ## https://docs.pi-hole.net/ ## 后台安全入口地址 ## http://localhost:19000/admin/index.php ## 将客户机DNS修改为10.10.10.245即可 EOF cd /mnt/mydisk/home/pihole \u0026amp;\u0026amp; docker-compose up -d 2 、拉取并运行 1 cd /mnt/mydisk/home/pihole \u0026amp;\u0026amp; docker-compose up -d 3 、停止并删除 1 cd /mnt/mydisk/home/pihole \u0026amp;\u0026amp; docker-compose down 4 、拉取镜像 1 docker pull pihole/pihole:latest 5 、容器升级 1 cd /mnt/mydisk/home/pihole \u0026amp;\u0026amp; docker-compose down \u0026amp;\u0026amp; docker-compose pull \u0026amp;\u0026amp; docker-compose up -d \u0026amp;\u0026amp; docker image prune -f 二 、容器维护命令 1 、查看所有运行容器的名称 1 docker ps -a --format \u0026#34;{{.Names}}\u0026#34; 2 、停止 pihole 容器 1 docker stop pihole 3 、启动 pihole 容器 1 docker start pihole 4 、重启 pihole 容器 1 docker restart pihole 5 、进入 pihole 容器 1 2 3 ## Ctrl+D 退出容器 ## docker exec -it pihole sh docker exec -it pihole bash 6 、查看 pihole 配置文件 1 cat /mnt/mydisk/home/pihole/docker-compose.yml ","date":"2025-01-18T18:56:35+08:00","image":"https://file.meimolihan.eu.org/img/pi-hole.jpg","permalink":"https://meimolihan.eu.org/p/docker-%E9%83%A8%E7%BD%B2-pi-hole-%E5%B9%BF%E5%91%8A%E6%8B%A6%E6%88%AA%E5%99%A8/","title":"Docker 部署 pi Hole 广告拦截器"},{"content":"一 、docker 部署 dockge 容器编排 dockge_GitHub地址： https://github.com/louislam/dockge?tab=readme-ov-file dockge_后台地址： http://localhost:5001 1 、终端命令创建docker-compose.yml文件 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 mkdir -p /mnt/mydisk/home/dockge/config \u0026amp;\u0026amp; touch /mnt/mydisk/home/dockge/docker-compose.yml \u0026amp;\u0026amp; cat \u0026gt; /mnt/mydisk/home/dockge/docker-compose.yml \u0026lt;\u0026lt;\u0026#39;EOF\u0026#39; services: dockge: ## 服务名称（可自定义） container_name: dockge ## 容器名称（可自定义） image: louislam/dockge:1 ## 镜像版本 restart: always ## 重启策略 network_mode: bridge ## 桥接网络 ports: - 5001:5001 volumes: - /var/run/docker.sock:/var/run/docker.sock - ./config:/app/data - /mnt/mydisk/home:/opt/stacks ## 映射我的堆栈目录 environment: ## 告诉Dockge容器内部堆栈路径，上面映射到了/mnt/mydisk/home - DOCKGE_STACKS_DIR=/opt/stacks EOF cd /mnt/mydisk/home/dockge \u0026amp;\u0026amp; docker-compose up -d 2 、拉取并运行 1 cd /mnt/mydisk/home/dockge \u0026amp;\u0026amp; docker-compose up -d 3 、停止并删除 1 cd /mnt/mydisk/home/dockge \u0026amp;\u0026amp; docker-compose down 4 、拉取镜像 1 docker pull louislam/dockge:1 5 、容器升级 1 cd /mnt/mydisk/home/dockge \u0026amp;\u0026amp; docker-compose down \u0026amp;\u0026amp; docker-compose pull \u0026amp;\u0026amp; docker-compose up -d \u0026amp;\u0026amp; docker image prune -f 二 、容器维护命令 1 、查看所有运行容器的名称 1 docker ps -a --format \u0026#34;{{.Names}}\u0026#34; 2 、停止 dockge 容器 1 docker stop dockge 3 、启动 dockge 容器 1 docker start dockge 4 、重启 dockge 容器 1 docker restart dockge 5 、进入 dockge 容器 1 2 3 ## Ctrl+D 退出容器 ## docker exec -it dockge sh docker exec -it dockge bash 6 、查看 dockge 配置文件 1 cat /mnt/mydisk/home/dockge/docker-compose.yml ","date":"2025-01-18T18:34:35+08:00","image":"https://file.meimolihan.eu.org/img/dockge-01.jpg","permalink":"https://meimolihan.eu.org/p/docker-%E9%83%A8%E7%BD%B2-dockge-%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92/","title":"Docker 部署 dockge 容器编排"},{"content":"一 、docker 部署 FileBrowser 文件管理 FileBrowser_官网地址： https://filebrowser.org FileBrowser_Docker Hub地址： https://hub.docker.com/r/filebrowser FileBrowser_GitHub地址： https://github.com/filebrowser/filebrowser FileBrowser_后台地址： http://localhost:8880 FileBrowser_更新地址： https://hub.docker.com/r/filebrowser/filebrowser/tags 1 、终端命令创建docker-compose.yml文件 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 mkdir -p /mnt/mydisk/home/filebrowser/config \u0026amp;\u0026amp; touch /mnt/mydisk/home/filebrowser/config/filebrowser.db \u0026amp;\u0026amp; touch /mnt/mydisk/home/filebrowser/docker-compose.yml \u0026amp;\u0026amp; cat \u0026gt; /mnt/mydisk/home/filebrowser/docker-compose.yml \u0026lt;\u0026lt;\u0026#39;EOF\u0026#39; services: filebrowser: ## 服务名称（可自定义） container_name: filebrowser ## 容器名称（可自定义） image: filebrowser/filebrowser:s6 ## 镜像版本 restart: always ## 重启策略 network_mode: bridge ## 桥接网络 ports: - 8880:80 volumes: ## 映射宿主机的根目录到容器内的/srv，以便filebrowser浏览全盘文件 - /:/srv ## 将包含filebrowser数据库的文件从主机挂载到容器内，以保持数据持久化 - ./config/database/filebrowser.db:/database/filebrowser.db ## 挂载配置文件，使得自定义设置在容器重启后依然生效 - ./config/filebrowser.json:/.filebrowser.json - ./config:/config environment: - PUID=0 - PGID=0 # 默认用户/密码：admin/admin # 更新地址：https://hub.docker.com/r/filebrowser/filebrowser/tags EOF cd /mnt/mydisk/home/filebrowser \u0026amp;\u0026amp; docker-compose up -d 2 、拉取并运行 1 cd /mnt/mydisk/home/filebrowser \u0026amp;\u0026amp; docker-compose up -d 3 、停止并删除 1 cd /mnt/mydisk/home/filebrowser \u0026amp;\u0026amp; docker-compose down 4 、拉取镜像 1 docker pull filebrowser/filebrowser:s6 5 、容器升级 1 cd /mnt/mydisk/home/filebrowser \u0026amp;\u0026amp; docker-compose down \u0026amp;\u0026amp; docker-compose pull \u0026amp;\u0026amp; docker-compose up -d \u0026amp;\u0026amp; docker image prune -f 二 、容器维护命令 1 、查看所有运行容器的名称 1 docker ps -a --format \u0026#34;{{.Names}}\u0026#34; 2 、停止 filebrowser 容器 1 docker stop filebrowser 3 、启动 filebrowser 容器 1 docker start filebrowser 4 、重启 filebrowser 容器 1 docker restart filebrowser 5 、进入 filebrowser 容器 1 2 3 ## Ctrl+D 退出容器 ## docker exec -it filebrowser sh docker exec -it filebrowser bash 6 、查看 filebrowser 配置文件 1 cat /mnt/mydisk/home/filebrowser/docker-compose.yml ","date":"2025-01-18T17:06:41+08:00","image":"https://file.meimolihan.eu.org/img/filebrowser.jpg","permalink":"https://meimolihan.eu.org/p/docker-%E9%83%A8%E7%BD%B2-filebrowser-%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/","title":"Docker 部署 FileBrowser 文件管理"},{"content":"一 、docker 部署 zfile-v4 个人网盘 zfile个人网盘_GitHub地址： https://github.com/zfile-dev/zfile zfile个人网盘_后台地址： http://localhost:8000 1 、终端命令创建docker-compose.yml文件 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 mkdir -vp /mnt/mydisk/home/zfile-v4/config/db /mnt/mydisk/home/zfile-v4/config/logs /mnt/mydisk/home/zfile-v4/config/application.properties \u0026amp;\u0026amp; touch /mnt/mydisk/home/zfile-v4/docker-compose.yml \u0026amp;\u0026amp; cat \u0026gt; /mnt/mydisk/home/zfile-v4/docker-compose.yml \u0026lt;\u0026lt;\u0026#39;EOF\u0026#39; services: zfile: ## 服务名称（可自定义） container_name: zfile-v4 ## 容器名称（可自定义） image: zhaojun1998/zfile ## 镜像版本 restart: always ## 重启策略 network_mode: bridge ## 桥接网络 ports: - 8000:8080 volumes: - ./config/db:/root/.zfile-v4/db - ./config/logs:/root/.zfile-v4/logs - ./config/data:/root/.zfile-v4/data ## 本地分享目录映射 - ./config/application.properties:/root/application.properties - /mnt:/mnt ## 本地目录映射 EOF cd /mnt/mydisk/home/zfile-v4 \u0026amp;\u0026amp; docker-compose up -d 2 、拉取并运行 1 cd /mnt/mydisk/home/zfile-v4 \u0026amp;\u0026amp; docker-compose up -d 3 、停止并删除 1 cd /mnt/mydisk/home/zfile-v4 \u0026amp;\u0026amp; docker-compose down 4 、拉取镜像 1 docker pull zhaojun1998/zfile 5 、容器升级 1 cd /mnt/mydisk/home/zfile-v4 \u0026amp;\u0026amp; docker-compose down \u0026amp;\u0026amp; docker-compose pull \u0026amp;\u0026amp; docker-compose up -d \u0026amp;\u0026amp; docker image prune -f 二 、容器维护命令 1 、查看所有运行容器的名称 1 docker ps -a --format \u0026#34;{{.Names}}\u0026#34; 2 、停止 zfile-v4 容器 1 docker stop zfile 3 、启动 zfile-v4 容器 1 docker start zfile 4 、重启 zfile-v4 容器 1 docker restart zfile 5 、进入 zfile-v4 容器 1 2 3 ## Ctrl+D 退出容器 ## docker exec -it zfile sh docker exec -it zfile bash 6 、查看 zfile-v4 配置文件 1 cat /mnt/mydisk/home/zfile-v4/docker-compose.yml ","date":"2025-01-18T16:54:27+08:00","image":"https://file.meimolihan.eu.org/img/zfile-01.jpg","permalink":"https://meimolihan.eu.org/p/docker-%E9%83%A8%E7%BD%B2-zfile-v4-%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%9B%98/","title":"Docker 部署 zfile V4 个人网盘"},{"content":"一 、docker 部署 1panel 面板 1panel面板_Docker Hub地址： https://hub.docker.com/r/moelin/1panel 1panel面板_GitHub地址： https://github.com/okxlin/docker-1panel 1panel面板_后台地址： http://localhost:10086 1panel面板_后台安全入口地址： http://localhost:10086/entrance 1 、终端命令创建docker-compose.yml文件 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 mkdir -p /mnt/mydisk/home/1panel/config/volumes \u0026amp;\u0026amp; touch /mnt/mydisk/home/1panel/docker-compose.yml \u0026amp;\u0026amp; cat \u0026gt; /mnt/mydisk/home/1panel/docker-compose.yml \u0026lt;\u0026lt;\u0026#39;EOF\u0026#39; services: 1panel: ## 服务名称（可自定义） container_name: 1panel ## 容器名称（可自定义） image: moelin/1panel:latest ## 镜像版本 restart: always ## 重启策略 network_mode: bridge ## 桥接网络 ports: - 10086:10086 volumes: - /var/run/docker.sock:/var/run/docker.sock - ./config/volumes:/var/lib/docker/volumes - ./config:/opt - /mnt:/mnt environment: - TZ=Asia/Shanghai labels: createdBy: Apps ## 默认端口：100863 ## 默认账户：1panel ## 默认密码：1panel_password ## 默认入口：entrance ## http://localhost:10086/entrance ## 备份目录：/mnt/mydisk/home/1panel/config/1panel/backup/system_snapshot EOF cd /mnt/mydisk/home/1panel \u0026amp;\u0026amp; docker-compose up -d 2 、拉取并运行 1 cd /mnt/mydisk/home/1panel \u0026amp;\u0026amp; docker-compose up -d 3 、停止并删除 1 cd /mnt/mydisk/home/1panel \u0026amp;\u0026amp; docker-compose down 4 、拉取镜像 1 docker pull moelin/1panel:latest 5 、容器升级 1 cd /mnt/mydisk/home/1panel \u0026amp;\u0026amp; docker-compose down \u0026amp;\u0026amp; docker-compose pull \u0026amp;\u0026amp; docker-compose up -d \u0026amp;\u0026amp; docker image prune -f 6 、1panel备份目录 1 cd /mnt/mydisk/home/1panel/config/1panel/backup/system_snapshot \u0026amp;\u0026amp; ls 二 、容器维护命令 1 、查看所有运行容器的名称 1 docker ps -a --format \u0026#34;{{.Names}}\u0026#34; 2 、停止 1panel 容器 1 docker stop 1panel 3 、启动 1panel 容器 1 docker start 1panel 4 、重启 1panel 容器 1 docker restart 1panel 5 、进入 1panel 容器 1 2 3 ## Ctrl+D 退出容器 ## docker exec -it 1panel sh docker exec -it 1panel bash 6 、查看 1panel 配置文件 1 cat /mnt/mydisk/home/1panel/docker-compose.yml 7 、查看 1panel 入口信息 1 docker exec 1panel 1pctl user-info 8 、修改后台登陆密码 1 docker exec 1panel 1pctl update password ","date":"2025-01-18T16:46:49+08:00","image":"https://file.meimolihan.eu.org/img/1panel-04.jpg","permalink":"https://meimolihan.eu.org/p/docker-%E9%83%A8%E7%BD%B2-1panel-%E9%9D%A2%E6%9D%BF/","title":"Docker 部署 1panel 面板"},{"content":"一 、docker 部署 it-tools 工具箱 IT工具箱_Docker Hub地址： https://hub.docker.com/r/qingfeng2336/it-tools IT工具箱_GitHub地址： https://github.com/CorentinTh/it-tools IT工具箱_后台地址： http://localhost:8088 1 、终端命令创建docker-compose.yml文件 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 mkdir -p /mnt/mydisk/home/it-tools \u0026amp;\u0026amp; touch /mnt/mydisk/home/it-tools/docker-compose.yml \u0026amp;\u0026amp; cat \u0026gt; /mnt/mydisk/home/it-tools/docker-compose.yml \u0026lt;\u0026lt;\u0026#39;EOF\u0026#39; services: it-tools: ## 服务名称（可自定义） container_name: it-tools ## 容器名称（可自定义） image: qingfeng2336/it-tools:latest ## 镜像版本 restart: always ## 重启策略 network_mode: bridge ## 桥接网络 ports: - 8088:80 environment: - PUID=0 - PGID=0 - TZ=Asia/Shanghai EOF cd /mnt/mydisk/home/it-tools \u0026amp;\u0026amp; docker-compose up -d 2 、拉取并运行 1 cd /mnt/mydisk/home/it-tools \u0026amp;\u0026amp; docker-compose up -d 3 、停止并删除 1 cd /mnt/mydisk/home/it-tools \u0026amp;\u0026amp; docker-compose down 4 、拉取镜像 1 docker pull qingfeng2336/it-tools:latest 5 、容器升级 1 cd /mnt/mydisk/home/it-tools \u0026amp;\u0026amp; docker-compose down \u0026amp;\u0026amp; docker-compose pull \u0026amp;\u0026amp; docker-compose up -d \u0026amp;\u0026amp; docker image prune -f 二 、容器维护命令 1 、查看所有运行容器的名称 1 docker ps -a --format \u0026#34;{{.Names}}\u0026#34; 2 、停止 it-tools 容器 1 docker stop it-tools 3 、启动 it-tools 容器 1 docker start it-tools 4 、重启 it-tools 容器 1 docker restart it-tools 5 、进入 it-tools 容器 1 2 3 ## Ctrl+D 退出容器 ## docker exec -it it-tools sh docker exec -it it-tools bash 6 、查看 it-tools 配置文件 1 cat /mnt/mydisk/home/it-tools/docker-compose.yml ","date":"2025-01-18T16:29:07+08:00","image":"https://file.meimolihan.eu.org/img/toolbox.jpg","permalink":"https://meimolihan.eu.org/p/docker-%E9%83%A8%E7%BD%B2-it-tools-%E5%B7%A5%E5%85%B7%E7%AE%B1/","title":"Docker 部署 it Tools 工具箱"},{"content":"一 、docker 部署 transmission 下载器 Transmission_Docker Hub地址： https://hub.docker.com/r/linuxserver/transmission Transmission_GitHub地址： https://github.com/linuxserver/docker-transmission Transmission_后台地址： http://localhost:9091 1 、终端命令创建docker-compose.yml文件 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 mkdir -p /mnt/mydisk/home/transmission/web \u0026amp;\u0026amp; touch /mnt/mydisk/home/transmission/docker-compose.yml \u0026amp;\u0026amp; cat \u0026gt; /mnt/mydisk/home/transmission/docker-compose.yml \u0026lt;\u0026lt;\u0026#39;EOF\u0026#39; services: transmission: # Tm下载器 image: linuxserver/transmission:latest ## 镜像名称 container_name: transmission ## 容器名，可自定义 restart: unless-stopped ## 启动选项 environment: - PUID=1000 - PGID=1000 - TZ=Asia/Shanghai - TRANSMISSION_WEB_HOME=/transmission-web-control/web - USER=admin ## 网页登陆用户名 - PASS=yifan0719 ## 网页登陆密码 - WHITELIST= ## optional - PEERPORT= ## optional - HOST_WHITELIST= ## optional volumes: - ./config:/config ## 配置文件夹 - ./downloads :/downloads ## 下载文件夹 - ./folder:/watch ## 监视torrent文件的文件夹 - ./transmission-web-control:/transmission-web-control ## 网页UI文件夹 ports: - 9091:9091 ## 冒号左边的9091可以改成任意,冒号右边是本docker镜像里的端口 - 51413:51413 - 51413:51413/udp network_mode: bridge ## 使用桥接网络模式 EOF cd /mnt/mydisk/home/transmission \u0026amp;\u0026amp; docker-compose up -d 2 、安装web网页界面 2.1 、SSH_下载install-tr-control-cn.sh到/mnt/mydisk+安装install-tr-control-cn.sh 1 wget -O /mnt/mydisk/install-tr-control-cn.sh https://raw.githubusercontent.com/ronggang/transmission-web-control/master/release/install-tr-control-cn.sh \u0026amp;\u0026amp; chmod +x /mnt/mydisk/install-tr-control-cn.sh \u0026amp;\u0026amp; cd /mnt/mydisk \u0026amp;\u0026amp; bash install-tr-control-cn.sh 选择 6\n指定安装目录为：\n1 /mnt/mydisk/home/transmission 选择 1\n安装最新的发布版本\n2.2 、SSH_看一下有没有安装成功 1 cd /mnt/mydisk/home/transmission/web \u0026amp;\u0026amp; ls 返回数据_五个文件为安装正常 favicon.ico index.html index.mobile.html index.original.html tr-web-control\n3 、拉取并运行 1 cd /mnt/mydisk/home/transmission \u0026amp;\u0026amp; docker-compose up -d 4 、停止并删除 1 cd /mnt/mydisk/home/transmission \u0026amp;\u0026amp; docker-compose down 5 、拉取镜像 1 docker pull linuxserver/transmission:latest 6 、容器升级 1 cd /mnt/mydisk/home/transmission \u0026amp;\u0026amp; docker-compose down \u0026amp;\u0026amp; docker-compose pull \u0026amp;\u0026amp; docker-compose up -d \u0026amp;\u0026amp; docker image prune -f 二 、容器维护命令 1 、查看所有运行容器的名称 1 docker ps -a --format \u0026#34;{{.Names}}\u0026#34; 2 、停止 transmission 容器 1 docker stop transmission 3 、启动 transmission 容器 1 docker start transmission 4 、重启 transmission 容器 1 docker restart transmission 5 、进入 transmission 容器 1 2 3 ## Ctrl+D 退出容器 ## docker exec -it transmission sh docker exec -it transmission bash 6 、查看 transmission 配置文件 1 cat /mnt/mydisk/home/transmission/docker-compose.yml ","date":"2025-01-17T20:40:03+08:00","image":"https://file.meimolihan.eu.org/img/transmission-01.jpg","permalink":"https://meimolihan.eu.org/p/docker-%E9%83%A8%E7%BD%B2-transmission-%E4%B8%8B%E8%BD%BD%E5%99%A8/","title":"Docker 部署 transmission下载器"},{"content":"一 、docker 部署 qbittorrent 下载器 qBittorrent_Docker Hub地址： https://hub.docker.com/r/linuxserver/qbittorrent qBittorrent_GitHub地址： https://github.com/linuxserver/docker-qbittorrent qBittorrent_后台地址： http://localhost:8081 1 、终端命令创建docker-compose.yml文件 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 mkdir -p /mnt/mydisk/home/qbittorrent \u0026amp;\u0026amp; touch /mnt/mydisk/home/qbittorrent/docker-compose.yml \u0026amp;\u0026amp; cat \u0026gt; /mnt/mydisk/home/qbittorrent/docker-compose.yml \u0026lt;\u0026lt;\u0026#39;EOF\u0026#39; services: qbittorrent: ## 服务名称（可自定义） container_name: qbittorrent ## 容器名称（可自定义） image: lscr.io/linuxserver/qbittorrent:latest ## 镜像版本 restart: unless-stopped ## 重启策略 network_mode: bridge ## 桥接网络 ports: ## 要使用的映射下载端口与内部下载端口，可保持默认，安装完成后在管理页面仍然可以改成其他端口。 - 6881:6881 - 6881:6881/udp - 8081:8081 ## 此处WEB UI 目标端口与内部端口务必保证相同，见问题1 volumes: - ./config:/config ## 绝对路径请修改为自己的config文件夹 - /mnt/ARS2-NFS/downloads/qbittorrent:/downloads ## 绝对路径请修改为自己的downloads文件夹 environment: - PUID=1000 - PGID=1000 - TZ=Asia/Shanghai ## 上海时区 - UMASK_SET=022 - WEBUI_PORT=8081 ## 此处修改WEB 管理平台端口 - TORRENTING_PORT=6881 ## ssh查看随机密码：docker logs qbittorrent EOF cd /mnt/mydisk/home/qbittorrent \u0026amp;\u0026amp; docker-compose up -d 2 、拉取并运行 1 cd /mnt/mydisk/home/qbittorrent \u0026amp;\u0026amp; docker-compose up -d 3 、停止并删除 1 cd /mnt/mydisk/home/qbittorrent \u0026amp;\u0026amp; docker-compose down 4 、拉取镜像 1 docker pull lscr.io/linuxserver/qbittorrent:latest 5 、容器升级 1 cd /mnt/mydisk/home/qbittorrent \u0026amp;\u0026amp; docker-compose down \u0026amp;\u0026amp; docker-compose pull \u0026amp;\u0026amp; docker-compose up -d \u0026amp;\u0026amp; docker image prune -f 6 、ssh查看随机密码 1 docker logs qbittorrent 二 、容器维护命令 1 、查看所有运行容器的名称 1 docker ps -a --format \u0026#34;{{.Names}}\u0026#34; 2 、停止 qbittorrent 容器 1 docker stop qbittorrent 3 、启动 qbittorrent 容器 1 docker start qbittorrent 4 、重启 qbittorrent 容器 1 docker restart qbittorrent 5 、进入 qbittorrent 容器 1 2 3 ## Ctrl+D 退出容器 ## docker exec -it qbittorrent sh docker exec -it qbittorrent bash 6 、查看 qbittorrent 配置文件 1 cat /mnt/mydisk/home/qbittorrent/docker-compose.yml 7 、SSH查看随机密码 1 docker logs qbittorrent ","date":"2025-01-17T14:07:15+08:00","image":"https://file.meimolihan.eu.org/img/qbittorrent-01.jpg","permalink":"https://meimolihan.eu.org/p/docker-%E9%83%A8%E7%BD%B2-qbittorrent-%E4%B8%8B%E8%BD%BD%E5%99%A8/","title":"Docker 部署 qbittorrent 下载器"},{"content":"一 、docker 部署 xunlei 下载器 迅雷下载_GitHub地址： https://github.com/cnk3x/xunlei/tree/docker 迅雷下载_后台地址： http://localhost:2345 1 、Debian 终端命令创建docker-compose.yml文件 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 mkdir -p /mnt/mydisk/home/xunlei \u0026amp;\u0026amp; touch /mnt/mydisk/home/xunlei/docker-compose.yml \u0026amp;\u0026amp; cat \u0026gt; /mnt/mydisk/home/xunlei/docker-compose.yml \u0026lt;\u0026lt;\u0026#39;EOF\u0026#39; services: xunlei: ## 服务名称（可自定义） container_name: xunlei ## 容器名称（可自定义） image: cnk3x/xunlei:latest ## 镜像版本 restart: unless-stopped ## 重启策略 network_mode: bridge ## 桥接网络 ports: - 2345:2345 volumes: - ./config:/xunlei/data ## 配置文件夹 - /mnt/ARS2-NFS/downloads/xunlei:/xunlei/downloads ## 下载文件夹 privileged: true ## 当设置为true时，表示容器将拥有主机上的特权，即具有主机上的 root 权限。 hostname: mynas ## 设置容器的主机名为 \u0026#34;mynas\u0026#34; EOF cd /mnt/mydisk/home/xunlei \u0026amp;\u0026amp; docker-compose up -d 2 、ARS2 终端命令创建docker-compose.yml文件 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 mkdir -p /mnt/mydisk/home/xunlei \u0026amp;\u0026amp; touch /mnt/mydisk/home/xunlei/docker-compose.yml \u0026amp;\u0026amp; cat \u0026gt; /mnt/mydisk/home/xunlei/docker-compose.yml \u0026lt;\u0026lt;\u0026#39;EOF\u0026#39; services: xunlei: container_name: xunlei ## 容器名称（可自定义） image: cnk3x/xunlei ## 镜像版本 restart: unless-stopped ## 重启策略 network_mode: bridge ## 桥接网络 ports: - 2345:2345 volumes: - ./config:/xunlei/data ## 配置文件夹 - /mnt/mydisk/downloads/xunlei:/xunlei/downloads ## 下载文件夹 privileged: true ## 当设置为true时，表示容器将拥有主机上的特权，即具有主机上的 root 权限。 hostname: mynas ## 设置容器的主机名为 \u0026#34;mynas\u0026#34; EOF cd /mnt/mydisk/home/xunlei \u0026amp;\u0026amp; docker-compose up -d 3 、拉取并运行 1 cd /mnt/mydisk/home/xunlei \u0026amp;\u0026amp; docker-compose up -d 4 、停止并删除 1 cd /mnt/mydisk/home/xunlei \u0026amp;\u0026amp; docker-compose down 5 、拉取镜像 1 docker pull cnk3x/xunlei:latest 6 、容器升级 1 cd /mnt/mydisk/home/xunlei \u0026amp;\u0026amp; docker-compose down \u0026amp;\u0026amp; docker-compose pull \u0026amp;\u0026amp; docker-compose up -d \u0026amp;\u0026amp; docker image prune -f 二 、容器维护命令 1 、查看所有运行容器的名称 1 docker ps -a --format \u0026#34;{{.Names}}\u0026#34; 2 、停止 xunlei 容器 1 docker stop xunlei 3 、启动 xunlei 容器 1 docker start xunlei 4 、重启 xunlei 容器 1 docker restart xunlei 5 、进入 xunlei 容器 1 2 3 ## Ctrl+D 退出容器 ## docker exec -it xunlei sh docker exec -it xunlei bash 6 、查看 xunlei 配置文件 1 cat /mnt/mydisk/home/xunlei/docker-compose.yml ","date":"2025-01-17T13:25:16+08:00","image":"https://file.meimolihan.eu.org/img/xunlei-03.jpg","permalink":"https://meimolihan.eu.org/p/docker-%E9%83%A8%E7%BD%B2-xunlei-%E4%B8%8B%E8%BD%BD%E5%99%A8/","title":"Docker 部署 xunlei 下载器"},{"content":"一 、docker 部署 sun-panel 导航页 sun-panel导航页_Docker Hub地址： https://hub.docker.com/r/hslr/sun-panel sun-panel导航页_GitHub地址： https://github.com/hslr-s/sun-panel 插件集地址： https://github.com/hslr-s/sun-panel-js-plugins Sun-Panel： https://doc.sun-panel.top/zh_cn sun-panel导航页_哔哩哔哩： https://space.bilibili.com/27407696/channel/collectiondetail?sid=2023810 sun-panel导航页_后台地址： http://localhost:3002 1 、终端命令创建docker-compose.yml文件 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 mkdir -p /mnt/mydisk/home/sun-panel/config \u0026amp;\u0026amp; touch /mnt/mydisk/home/sun-panel/docker-compose.yml \u0026amp;\u0026amp; cat \u0026gt; /mnt/mydisk/home/sun-panel/docker-compose.yml \u0026lt;\u0026lt;\u0026#39;EOF\u0026#39; services: sun-panel: ## 服务名称（可自定义） container_name: sun-panel ## 容器名称（可自定义） image: hslr/sun-panel:beta ## 镜像版本 restart: always ## 重启策略 network_mode: bridge ## 桥接网络 ports: - 3002:3002 volumes: - ./config:/app/conf - /:/host - /var/run/docker.sock:/var/run/docker.sock # 导航页 sun-panel # 默认账户：admin@sun.cc # 默认密码：12345678 # docker版Sun-Panel重置第一个管理员的密码 # sh命令：docker exec -it sun-panel bash # sh命令：./sun-panel -password-reset # 更新地址：https://github.com/hslr-s/sun-panel/releases EOF cd /mnt/mydisk/home/sun-panel \u0026amp;\u0026amp; docker-compose up -d 2 、拉取并运行 1 cd /mnt/mydisk/home/sun-panel \u0026amp;\u0026amp; docker-compose up -d 3 、停止并删除 1 cd /mnt/mydisk/home/sun-panel \u0026amp;\u0026amp; docker-compose down 4 、拉取镜像 1 docker pull hslr/sun-panel:latest 5 、容器升级 1 cd /mnt/mydisk/home/sun-panel \u0026amp;\u0026amp; docker-compose down \u0026amp;\u0026amp; docker-compose pull \u0026amp;\u0026amp; docker-compose up -d \u0026amp;\u0026amp; docker image prune -f 二 、容器维护命令 1 、查看所有运行容器的名称 1 docker ps -a --format \u0026#34;{{.Names}}\u0026#34; 2 、停止 sun-panel 容器 1 docker stop sun-panel 3 、启动 sun-panel 容器 1 docker start sun-panel 4 、重启 sun-panel 容器 1 docker restart sun-panel 5 、进入 sun-panel 容器 1 2 3 ## Ctrl+D 退出容器 ## docker exec -it sun-panel sh docker exec -it sun-panel bash 6 、查看 sun-panel 配置文件 1 cat /mnt/mydisk/home/sun-panel/docker-compose.yml ","date":"2025-01-17T07:50:48+08:00","image":"https://file.meimolihan.eu.org/img/sun-panel.jpg","permalink":"https://meimolihan.eu.org/p/docker-%E9%83%A8%E7%BD%B2-sun-panel-%E5%AF%BC%E8%88%AA%E9%A1%B5/","title":"Docker 部署 sun Panel 导航页"},{"content":"一 、docker 部署 verysync 微力同步 微力同步_Docker Hub地址： https://hub.docker.com/r/jonnyan404/verysync 微力同步_官网地址： http://verysync.com 微力同步_后台地址： http://localhost:8886 1 、终端命令创建docker-compose.yml文件 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 mkdir -p /mnt/mydisk/home/verysync \u0026amp;\u0026amp; touch /mnt/mydisk/home/verysync/docker-compose.yml \u0026amp;\u0026amp; cat \u0026gt; /mnt/mydisk/home/verysync/docker-compose.yml \u0026lt;\u0026lt;\u0026#39;EOF\u0026#39; services: verysync: ## 服务名称（可自定义） container_name: verysync ## 容器名称（可自定义） image: jonnyan404/verysync ## 镜像版本 restart: always ## 重启策略 network_mode: bridge ## 桥接网络 ports: - 8886:8886 volumes: - ./config:/data # 卷挂载配置文件 - /mnt:/mnt environment: - PUID=$(id -u) - PGID=$(id -g) EOF cd /mnt/mydisk/home/verysync \u0026amp;\u0026amp; docker-compose up -d 2 、拉取并运行 1 cd /mnt/mydisk/home/verysync \u0026amp;\u0026amp; docker-compose up -d 3 、停止并删除 1 cd /mnt/mydisk/home/verysync \u0026amp;\u0026amp; docker-compose down 4 、拉取镜像 1 docker pull jonnyan404/verysync 5 、容器升级 1 cd /mnt/mydisk/home/verysync \u0026amp;\u0026amp; docker-compose down \u0026amp;\u0026amp; docker-compose pull \u0026amp;\u0026amp; docker-compose up -d \u0026amp;\u0026amp; docker image prune -f 二 、容器维护命令 1 、查看所有运行容器的名称 1 docker ps -a --format \u0026#34;{{.Names}}\u0026#34; 2 、停止 verysync 容器 1 docker stop verysync 3 、启动 verysync 容器 1 docker start verysync 4 、重启 verysync 容器 1 docker restart verysync 5 、进入 verysync 容器 1 2 3 ## Ctrl+D 退出容器 ## docker exec -it verysync sh docker exec -it verysync bash 6 、查看 verysync 配置文件 1 cat /mnt/mydisk/home/verysync/docker-compose.yml ","date":"2025-01-15T21:52:54+08:00","image":"https://file.meimolihan.eu.org/img/verysync-01.jpg","permalink":"https://meimolihan.eu.org/p/docker-%E9%83%A8%E7%BD%B2-verysync-%E5%BE%AE%E5%8A%9B%E5%90%8C%E6%AD%A5/","title":"Docker 部署 verysync 微力同步"},{"content":" docker 部署 typecho 博客 教程文档： https://blog.laoda.de/archives/docker-compose-install-typecho typecho 博客_后台地址： http://localhost:8223 一 、创建必要的文件 1 、创建 mysql.env 1 2 3 4 5 6 mkdir -p /mnt/mydisk/home/typecho \u0026amp;\u0026amp; touch /mnt/mydisk/home/typecho/mysql.env \u0026amp;\u0026amp; cat \u0026gt; /mnt/mydisk/home/typecho/mysql.env \u0026lt;\u0026lt;\u0026#39;EOF\u0026#39; MYSQL_ROOT_PASSWORD=root_pass MYSQL_DATABASE=typecho MYSQL_USER=username MYSQL_PASSWORD=password EOF 2 、创建 php/Dockerfile 1 2 3 4 5 6 7 mkdir -p /mnt/mydisk/home/typecho/php \u0026amp;\u0026amp; touch /mnt/mydisk/home/typecho/php/Dockerfile \u0026amp;\u0026amp; cat \u0026gt; /mnt/mydisk/home/typecho/php/Dockerfile \u0026lt;\u0026lt;\u0026#39;EOF\u0026#39; FROM php:7.3.29-fpm RUN apt-get update \\ \u0026amp;\u0026amp; docker-php-ext-install pdo_mysql \\ \u0026amp;\u0026amp; echo \u0026#34;output_buffering = 4096\u0026#34; \u0026gt; /usr/local/etc/php/conf.d/php.ini \\ \u0026amp;\u0026amp; echo \u0026#34;date.timezone = PRC\u0026#34; \u0026gt;\u0026gt; /usr/local/etc/php/conf.d/php.ini EOF 3 、创建 nginx/default.conf 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 mkdir -p /mnt/mydisk/home/typecho/nginx \u0026amp;\u0026amp; touch /mnt/mydisk/home/typecho/nginx/default.conf \u0026amp;\u0026amp; cat \u0026gt; /mnt/mydisk/home/typecho/nginx/default.conf \u0026lt;\u0026lt;\u0026#39;EOF\u0026#39; server { listen 80 default_server; root /var/www/html; index index.php; access_log /var/log/nginx/typecho_access.log main; if (!-e $request_filename) { rewrite ^(.*)$ /index.php$1 last; } location / { index index.html index.htm index.php; if (!-e $request_filename) { rewrite . /index.php last; } } location ~ \\.php(.*)$ { fastcgi_pass php:9000; fastcgi_index index.php; fastcgi_param PATH_TRANSLATED $document_root$fastcgi_path_info; fastcgi_split_path_info ^((?U).+\\.php)(/?.+)$; fastcgi_param PATH_INFO $fastcgi_path_info; fastcgi_param SCRIPT_NAME $fastcgi_script_name; fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; include fastcgi_params; } } EOF 二 、下载typecho源码 需要科学网络，不然就非常慢。\n1 mkdir -p /mnt/mydisk/home/typecho/typecho \u0026amp;\u0026amp; cd /mnt/mydisk/home/typecho/typecho \u0026amp;\u0026amp; wget https://github.com/typecho/typecho/releases/download/v1.2.1/typecho.zip \u0026amp;\u0026amp; unzip typecho.zip uploads目录添加权限（附件目录）\n1 chmod -R 777 /mnt/mydisk/home/typecho/typecho/usr/uploads 三 、创建 docker-compose.yml 文件 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 mkdir -p /mnt/mydisk/home/typecho \u0026amp;\u0026amp; touch /mnt/mydisk/home/typecho/docker-compose.yml \u0026amp;\u0026amp; cat \u0026gt; /mnt/mydisk/home/typecho/docker-compose.yml \u0026lt;\u0026lt;\u0026#39;EOF\u0026#39; services: nginx: image: nginx ports: - \u0026#34;8223:80\u0026#34; # 左边可以改成任意没使用的端口 restart: always environment: - TZ=Asia/Shanghai volumes: - ./typecho:/var/www/html - ./nginx:/etc/nginx/conf.d - ./logs:/var/log/nginx depends_on: - php networks: - web php: build: php restart: always expose: - \u0026#34;9000\u0026#34; # 不暴露公网，故没有写9000:9000 volumes: - ./typecho:/var/www/html environment: - TZ=Asia/Shanghai depends_on: - mysql networks: - web mysql: image: mysql:5.7 restart: always environment: - TZ=Asia/Shanghai expose: - \u0026#34;3306\u0026#34; # 不暴露公网，故没有写3306:3306 volumes: - ./mysql/data:/var/lib/mysql - ./mysql/logs:/var/log/mysql - ./mysql/conf:/etc/mysql/conf.d env_file: - mysql.env networks: - web networks: web: EOF cd /mnt/mydisk/home/typecho \u0026amp;\u0026amp; docker-compose up -d 2 、拉取并运行 1 cd /mnt/mydisk/home/typecho \u0026amp;\u0026amp; docker-compose up -d 3 、停‮并止‬删除 1 cd /mnt/mydisk/home/typecho \u0026amp;\u0026amp; docker-compose down 4 、拉取镜像 1 docker pull nginx:latest 四 、容器维护命令 1 、查‮所看‬有运行‮器容‬的名称 1 docker ps -a --format \u0026#34;{{.Names}}\u0026#34; 2 、停止 typecho 容器 1 docker stop typecho 3 、启动 typecho 容器 1 docker start typecho 4 、重启 typecho 容器 1 docker restart typecho 5 、进入 typecho 容器 1 2 3 ## Ctrl+D 退出容器 ## docker exec -it typecho sh docker exec -it typecho bash 五 、创建 config.inc.php 文件 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 mkdir -p /mnt/mydisk/home/typecho/typecho \u0026amp;\u0026amp; touch /mnt/mydisk/home/typecho/typecho/config.inc.php \u0026amp;\u0026amp; cat \u0026gt; /mnt/mydisk/home/typecho/typecho/config.inc.php \u0026lt;\u0026lt;\u0026#39;EOF\u0026#39; \u0026lt;?php // 站点根路径 define(\u0026#39;__TYPECHO_ROOT_DIR__\u0026#39;, dirname(__FILE__)); // 插件目录（相对路径） define(\u0026#39;__TYPECHO_PLUGIN_DIR__\u0026#39;, \u0026#39;/usr/plugins\u0026#39;); // 主题目录（相对路径） define(\u0026#39;__TYPECHO_THEME_DIR__\u0026#39;, \u0026#39;/usr/themes\u0026#39;); // 管理目录（相对路径） define(\u0026#39;__TYPECHO_ADMIN_DIR__\u0026#39;, \u0026#39;/jkadmin/\u0026#39;); // 后台主题左上角头像地址 define(\u0026#39;__TYPECHO_GRAVATAR_PREFIX__\u0026#39;, \u0026#39;https://img1.baidu.com/it/u=184448109,1805815777\u0026amp;fm=253\u0026amp;fmt=auto?w=200\u0026amp;h=200\u0026#39;); // 注册自动加载 require_once __TYPECHO_ROOT_DIR__ . \u0026#39;/var/Typecho/Common.php\u0026#39;; // 初始化 \\Typecho\\Common::init(); // 配置数据库 $db = new \\Typecho\\Db(\u0026#39;Pdo_Mysql\u0026#39;, \u0026#39;typecho_\u0026#39;); $db-\u0026gt;addServer(array ( \u0026#39;host\u0026#39; =\u0026gt; \u0026#39;mysql\u0026#39;, \u0026#39;port\u0026#39; =\u0026gt; 3306, \u0026#39;user\u0026#39; =\u0026gt; \u0026#39;username\u0026#39;, \u0026#39;password\u0026#39; =\u0026gt; \u0026#39;password\u0026#39;, \u0026#39;charset\u0026#39; =\u0026gt; \u0026#39;utf8mb4\u0026#39;, \u0026#39;database\u0026#39; =\u0026gt; \u0026#39;typecho\u0026#39;, \u0026#39;engine\u0026#39; =\u0026gt; \u0026#39;InnoDB\u0026#39;, \u0026#39;sslCa\u0026#39; =\u0026gt; \u0026#39;\u0026#39;, \u0026#39;sslVerify\u0026#39; =\u0026gt; true, ), \\Typecho\\Db::READ | \\Typecho\\Db::WRITE); \\Typecho\\Db::set($db); EOF 六 、进入后台-配置数据库 后台地址：http://localhost:8223\n初始化配置 数据库适配器：Pdo驱动Mysql适配器 数据库前缀：typecho_ 数据库地址：mysql 数据库用户名：username 数据库密码：password 数据库名：typecho 七 、Typecho修改默认后台登陆地址路劲对后台登陆地址进行隐藏 在根目录下找到config.inc.php文件\n/* 后台路径(相对路径) / define('__TYPECHO_ADMIN_DIR__', '/admin/'); 把这个/admin/路径改成自己想要的路径就行了\n八 、地址重写功能 九 、Typecho 升级 php 版本 1、首先停‮并止‬删除容器 1 cd /mnt/mydisk/home/typecho \u0026amp;\u0026amp; docker-compose down 2、修改 php/Dockerfile 文件 将你的 PHP 配置从 7.3.29-fpm 升级到 7.4-fpm，你需要修改 Dockerfile，并将基础镜像替换为 php:7.4-fpm。 1 2 3 4 5 FROM php:7.3.29-fpm RUN apt-get update \\ \u0026amp;\u0026amp; docker-php-ext-install pdo_mysql \\ \u0026amp;\u0026amp; echo \u0026#34;output_buffering = 4096\u0026#34; \u0026gt; /usr/local/etc/php/conf.d/php.ini \\ \u0026amp;\u0026amp; echo \u0026#34;date.timezone = PRC\u0026#34; \u0026gt;\u0026gt; /usr/local/etc/php/conf.d/php.ini 修改为\n1 2 3 4 5 FROM php:7.4-fpm RUN apt-get update \\ \u0026amp;\u0026amp; docker-php-ext-install pdo_mysql \\ \u0026amp;\u0026amp; echo \u0026#34;output_buffering = 4096\u0026#34; \u0026gt; /usr/local/etc/php/conf.d/php.ini \\ \u0026amp;\u0026amp; echo \u0026#34;date.timezone = PRC\u0026#34; \u0026gt;\u0026gt; /usr/local/etc/php/conf.d/php.ini 3、拉取 php:7.4-fpm 镜像 1 docker pull php:7.4-fpm 4、拉取并运行 重新创建并启动容器，会自动重新构建 PHP 服务的镜像（构建时最好开代理-要不然巨慢） 1 cd /mnt/mydisk/home/typecho \u0026amp;\u0026amp; docker-compose up -d 5、手动重新构建 PHP 服务的镜像 在项目根目录下运行以下命令，重新构建 PHP 服务的镜像（构建时最好开代理-要不然巨慢） 1 docker-compose build php ","date":"2025-01-15T20:40:03+08:00","image":"https://file.meimolihan.eu.org/img/typecho-01.jpg","permalink":"https://meimolihan.eu.org/p/docker-%E9%83%A8%E7%BD%B2-typecho-%E5%8D%9A%E5%AE%A2/","title":"Docker 部署 typecho 博客"},{"content":" GitHub 部署 hugo 博客 hugo 项目地址： https://github.com/gohugoio/hugo hugo 主题： https://themes.gohugo.io/ hugo 本地地址： https://localhost:1313 我的 hugo GitHub地址： https://meimolihan.github.io/ 一 、windows 部署 hugo 1 、安装 hugo 首先安装 scoop 在以管理员身份运行的 PowerShell 中，运行以下命令来启用管理员安装： 1 2 3 $env:SCOOP_REPO = \u0026#39;https://github.com/ScoopInstaller/Scoop\u0026#39; irm get.scoop.sh -outfile \u0026#39;install.ps1\u0026#39; .\\install.ps1 -RunAsAdmin 查看 scoop 版本 1 scoop --version 再安装 hugo 1 scoop install hugo-extended 查看 hugo 版本 1 hugo version 2 、创建 myblog 站点 1 cd C:\\hugo 1 hugo new site myblog 3 、创建 文章 进入我的站点 1 cd C:\\hugo\\myblog 创建 index.md 文章 （名称随意） 1 hugo new post/第一篇文章/index.md 4 、修改文章属性 在C:\\hugo\\myblog\\content\\post目录找到新建的文章 修改文章，将草稿draft = true修改为draft = false发布\n5 、hugo 命令 生成静态文件 1 hugo -D 启动 hugo 1 cd C:\\hugo\\myblog \u0026amp;\u0026amp; hugo server 生成静态并启动 1 hugo server -D 浏览器地址： http://localhost:1313/ Ctrl+C停止服务 （hugo默认是没有主题的，需要进行主题配置） 二 、配置主题 （1）前往【 Hugo Themes 】，查找自己喜欢的主题，进行下载 （2）这边以【 Stack主题 】为例，将下载好的主题解压，放到/themes文件夹中 （3）将exampleSite样例数据中的 Content 和 hugo.yaml 复制到主文件夹中，并删掉hugo.toml和content/post/rich-content （4）修改 hugo.yaml 中的 theme，将他修改为跟主题文件夹同名theme='Stack' （5）再次启动hugo服务，查看主题，具体主题配置修改 hugo.yaml，这里不细说，感兴趣可自行查找相关文章 三 、部署在 GitHub 1 、GitHub 创建项目 Git下载 前往【 Git官网 】，下载安装程序 一直点下一步，默认安装即可 2、Github 部署 1. 常规部署 （1）前往【Github官网】，创建仓库 {github用户名}.github.io （2）前往Setting -\u0026gt; Pages -\u0026gt; Branch选择main分支，然后保存，会自动开启 https://{github用户名}.github.io 的地址，这地址也是以后访问博客的地址 （3）回到hugo文件中，执行命令hugo -D，会生成 public 静态资源文件夹 （4）在 public 执行以下命令上传到github仓库上，第一次上传可能需要输入账号密码 1 2 3 4 5 6 git init git add . git commit -m \u0026#34;first commit\u0026#34; git branch -M main git remote add origin {你的github仓库地址} git push -u origin main （5）上传成功后访问 https://{github用户名}.github.io，成功搭建属于自己的Hugo博客 2 、 Github Action自动部署 （1）Github创建一个新的仓库，用于存放Hugo的主文件\n（2）前往Setttings -\u0026gt; Developer Settings -\u0026gt; Personal access tokens，创建一个token(classic)\n（3）token选择永不过期，并勾选 repo 和 workflow 选项 （4）为保证安全，将生成的token，保存的仓库的变量中，前往Settings -\u0026gt; Secrets and variables -\u0026gt; Actions中设置 （5）在hugo主文件创建一个.github/workflows/xxxx.yaml文件，将以下内容复制进去，想具体了解更多，可查看【Github Action文档】 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 name: deploy # 代码提交到main分支时触发github action on: push: branches: - main jobs: deploy: runs-on: ubuntu-latest steps: - name: Checkout uses: actions/checkout@v4 with: fetch-depth: 0 - name: Setup Hugo uses: peaceiris/actions-hugo@v3 with: hugo-version: \u0026#34;latest\u0026#34; extended: true - name: Build Web run: hugo -D - name: Deploy Web uses: peaceiris/actions-gh-pages@v4 with: PERSONAL_TOKEN: ${{ secrets.你的token变量名 }} EXTERNAL_REPOSITORY: 你的github名/你的仓库名 PUBLISH_BRANCH: main PUBLISH_DIR: ./public commit_message: auto deploy （6）在hugo主文件创建.gitignore文件，来避免提交不必要的文件 1 2 3 4 5 6 7 ### 自动生成的文件 public resources .hugo_build.lock # hugo命令 hugo.exe （7）将hugo的主文件上传到仓库，上传成功后会触发Github Action，来自动部署你的静态页面 1 2 3 4 5 6 git init git add . git commit -m \u0026#34;first commit\u0026#34; git branch -M main git remote add origin {你的github仓库地址} git push -u origin main 3 、后期更新项目 1 2 3 git add . git commit -m \u0026#34;update\u0026#34; git push ","date":"2025-01-14T16:21:39+08:00","image":"https://file.meimolihan.eu.org/img/hugo-01.jpg","permalink":"https://meimolihan.eu.org/p/github-%E9%83%A8%E7%BD%B2-hugo-%E5%8D%9A%E5%AE%A2/","title":"GitHub 部署 hugo 博客"},{"content":"一 、docker 部署 wordpress 博客 wordpress前台地址： http://localhost:8686 wordpress后台地址： http://localhost:8686/wp-admin/ wordpress公网前台地址： https://wordpress.example.com:666 wordpress公网后台地址： https://wordpress.example.com:666/wp-admin/ 家宽 nginx 反向代理配置文件 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 mkdir -pm 755 /etc/nginx/conf.d \u0026amp;\u0026amp; touch /etc/nginx/conf.d/wordpress.conf \u0026amp;\u0026amp; cat \u0026lt;\u0026lt;\u0026#39;EOF\u0026#39; | sed \u0026#39;1!{/^[[:space:]]*#/d;/^[[:space:]]*$/d}\u0026#39; \u0026gt; /etc/nginx/conf.d/wordpress.conf ## nginx 反向代理 wordpress 博客 server { ## 监听666端口，并启用SSL listen 666 ssl; listen [::]:666 ssl; ## 替换为你的域名 server_name wordpress.example.com; ## 指定 SSL 证书文件和私钥文件的路径 ssl_certificate /etc/nginx/keyfile/cert.pem; ssl_certificate_key /etc/nginx/keyfile/key.pem; ## 设置支持的SSL协议版本 ssl_protocols TLSv1 TLSv1.1 TLSv1.2; # 启用服务器端加密套件优先 ssl_prefer_server_ciphers on; ## 设置加密套件，优先用高强度加密算法，并排除匿名加密套件和MD5散列算法 ssl_ciphers HIGH:!aNULL:!MD5; location / { ## 指定反向代理的服务地址 proxy_pass http://10.10.10.88:8686; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; proxy_set_header X-Real-IP $remote_addr; proxy_set_header Host $http_host; proxy_set_header Range $http_range; proxy_set_header If-Range $http_if_range; proxy_redirect off; ## 开启缓存 proxy_buffering on; ## 使用 HTTP/1.1 协议通信 proxy_http_version 1.1; } ## 错误处理 charset utf-8; error_page 404 500 502 503 504 /50x.html; location = /50x.html { root /var/www/html; } } EOF sudo systemctl restart nginx 创建 uploads.ini 文件（配置上传文件大小限制） 1 2 3 4 5 mkdir -p /mnt/mydisk/home/wordpress/html \u0026amp;\u0026amp; touch /mnt/mydisk/home/wordpress/html/uploads.ini \u0026amp;\u0026amp; cat \u0026gt; /mnt/mydisk/home/wordpress/html/uploads.ini \u0026lt;\u0026lt;\u0026#39;EOF\u0026#39; upload_max_filesize = 512M post_max_size = 512M memory_limit = 1024M EOF uploads.ini 文件,加权限 1 sudo chown -R 33:33 /mnt/mydisk/home/wordpress/html/uploads.ini 查看是否成功，wordpress-wordpress-1为wordpress容器id，具体可以用docker ps查看 1 docker exec wordpress-wordpress-1 php -i | grep upload 翻译过来就是\n最大的文件上传: 512M 最大的执行大小: 512M 内存限制: 1G\n1 、终端命令创建docker-compose.yml文件 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 mkdir -p /mnt/mydisk/home/wordpress \u0026amp;\u0026amp; touch /mnt/mydisk/home/wordpress/docker-compose.yml \u0026amp;\u0026amp; cat \u0026gt; /mnt/mydisk/home/wordpress/docker-compose.yml \u0026lt;\u0026lt;\u0026#39;EOF\u0026#39; services: db: image: mysql:5.7 volumes: - ./mysql:/var/lib/mysql restart: always environment: MYSQL_ROOT_PASSWORD: somewordpress MYSQL_DATABASE: wordpress MYSQL_USER: wordpress MYSQL_PASSWORD: wordpress wordpress: depends_on: - db image: wordpress:latest volumes: - ./html:/var/www/html - ./html/uploads.ini:/usr/local/etc/php/conf.d/uploads.ini ports: - \u0026#34;8686:80\u0026#34; - \u0026#34;6443:443\u0026#34; restart: always environment: WORDPRESS_DB_HOST: db WORDPRESS_DB_USER: wordpress WORDPRESS_DB_PASSWORD: wordpress WORDPRESS_DB_NAME: wordpress volumes: db_data: {} wordpress_data: {} EOF cd /mnt/mydisk/home/wordpress \u0026amp;\u0026amp; docker-compose up -d 2 、拉取并运行 1 cd /mnt/mydisk/home/wordpress \u0026amp;\u0026amp; docker-compose up -d 3 、停止并删除 1 cd /mnt/mydisk/home/wordpress \u0026amp;\u0026amp; docker-compose down 4 、拉取镜像 1 docker pull wordpress:latest 5 、容器升级 1 cd /mnt/mydisk/home/wordpress \u0026amp;\u0026amp; docker-compose down \u0026amp;\u0026amp; docker-compose pull \u0026amp;\u0026amp; docker-compose up -d \u0026amp;\u0026amp; docker image prune -f 6 、插件目录加权限 1 chmod -R 777 /mnt/mydisk/home/wordpress/html/wp-content 7 、上传主题，出现“您点击的链接已过期” 在.htaccess最后面加内容\n1 2 3 4 5 6 7 tee -a /mnt/mydisk/home/wordpress/html/.htaccess \u0026lt;\u0026lt;\u0026#39;EOF\u0026#39; php_value max_execution_time 300 php_value upload_max_filesize 256M php_value post_max_size 256M php_value memory_limit 128M php_value max_input_vars 5000 EOF 8 、查看端口占用 1 apt install lsof # 安装lsof 1 lsof -i:8080 # 查看8080端口是否被占用，如果被占用，重新自定义一个端口 9 、redis 设置 1 cd /mnt/mydisk/home/wordpress/html 编辑wp-config.php文件，找到DB_COLLATE 在define( 'DB_COLLATE', 'XXX...'); 后添加如下内容： 1 2 3 /** Redis Object Cache */ define(\u0026#39;WP_REDIS_HOST\u0026#39;, \u0026#39;wordpress-redis\u0026#39;); define(\u0026#39;WP_REDIS_DATABASE\u0026#39;, \u0026#39;0\u0026#39;); 重启docker之后，在后台安装Redis Object Cache插件,直接点击Enable Object Cache即可。 二 、容器维护命令 1 、查看所有运行容器的名称 1 docker ps -a --format \u0026#34;{{.Names}}\u0026#34; 2 、停止 wordpress 容器 1 docker stop wordpress 3 、启动 wordpress 容器 1 docker start wordpress 4 、重启 wordpress 容器 1 docker restart wordpress 5 、进入 wordpress 容器 1 2 3 ## Ctrl+D 退出容器 ## docker exec -it wordpress sh docker exec -it wordpress bash 6 、查看 wordpress 配置文件 1 cat /mnt/mydisk/home/wordpress/docker-compose.yml wordpress 安装主题 wordpress 后台上传主题，启用即可 argon主题下载： https://github.com/solstice23/argon-theme wordpress 安装插件 wordpress 后台上插件，启用即可 QPlayer2 音乐播放器： https://github.com/moeshin/QPlayer2-WordPress wordpress 地址（URL） ","date":"2025-01-13T21:52:54+08:00","image":"https://file.meimolihan.eu.org/img/wordpress-01.jpg","permalink":"https://meimolihan.eu.org/p/docker-%E9%83%A8%E7%BD%B2-wordpress-%E5%8D%9A%E5%AE%A2/","title":"Docker 部署 wordpress 博客"},{"content":"一 、halo 博客部署 Halo博客_Docker Hub地址： https://hub.docker.com/r/halohub/halo Halo博客_GitHub地址： https://github.com/halo-dev Halo博客_文档： https://docs.halo.run Halo博客_论坛： https://bbs.halo.run Halo博客_官网： https://www.halo.run Halo博客_后台地址： http://localhost:8090/console 1 、终端命令创建docker-compose.yml文件 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 mkdir -p /mnt/mydisk/home/halo/config \u0026amp;\u0026amp; touch /mnt/mydisk/home/halo/docker-compose.yml \u0026amp;\u0026amp; cat \u0026gt; /mnt/mydisk/home/halo/docker-compose.yml \u0026lt;\u0026lt;\u0026#39;EOF\u0026#39; services: halo: ## 服务名称（可自定义） container_name: halo ## 容器名称（可自定义） image: halohub/halo:2.20.12 ## 镜像版本 restart: always ## 重启策略 depends_on: halodb: condition: service_healthy # 依赖于 halodb 服务，等待其健康状态 networks: halo_network: # 使用自定义网络 halo_network volumes: - ./config/halo2:/root/.halo2 # 映射配置文件到容器内 ports: - 8090:8090 # 映射容器端口到主机端口 healthcheck: test: - CMD - curl - -f - http://localhost:8090/actuator/health/readiness # 使用 curl 进行健康检查 interval: 30s # 每隔30秒进行一次健康检查 timeout: 5s # 检查超时时间为5秒 retries: 5 # 失败后最多尝试5次 start_period: 30s # 启动后等待30秒再进行第一次检查 command: - --spring.r2dbc.url=r2dbc:pool:mysql://halodb:3306/halo - --spring.r2dbc.username=root # MySQL 的密码，请保证与下方 MYSQL_ROOT_PASSWORD 的变量值一致。 - --spring.r2dbc.password=o#DwN\u0026amp;JSa56 - --spring.sql.init.platform=mysql # 外部访问地址，请根据实际需要修改 - --halo.external-url=https://www.mobufan.xyz:4443 halodb: # 个人博客数据库 container_name: halodb ## 容器名称（可自定义） image: mysql:8.3.0 ## 镜像版本 restart: always ## 重启策略 networks: halo_network: ## 使用自定义网络 halo_network command: - --default-authentication-plugin=caching_sha2_password - --character-set-server=utf8mb4 - --collation-server=utf8mb4_general_ci - --explicit_defaults_for_timestamp=true volumes: - ./config/mysql:/var/lib/mysql ## 映射数据库路径到容器内 - ./config/mysqlBackup:/data/mysqlBackup ## 映射备份文件保存路径到容器内 ports: - 3306:3306 healthcheck: test: - CMD - mysqladmin - ping - -h - 127.0.0.1 - --silent interval: 3s ## 每隔3秒进行一次健康检查 retries: 5 ## 失败后最多尝试5次 start_period: 30s ## 启动后等待30秒再进行第一次检查 environment: # 请修改此密码，并对应修改上方 Halo 服务的 SPRING_R2DBC_PASSWORD 变量值 - MYSQL_ROOT_PASSWORD=o#DwN\u0026amp;JSa56 - MYSQL_DATABASE=halo networks: halo_network: ## 自定义网络 halo_network # Halo博客_后台地址：http://localhost:8090/console EOF cd /mnt/mydisk/home/halo \u0026amp;\u0026amp; docker-compose up -d 2 、拉取并运行 1 cd /mnt/mydisk/home/halo \u0026amp;\u0026amp; docker-compose up -d 3 、停止并删除 1 cd /mnt/mydisk/home/halo \u0026amp;\u0026amp; docker-compose down 4 、拉取镜像 1 docker pull halohub/halo:2.20.12 5 、容器升级 1 cd /mnt/mydisk/home/halo \u0026amp;\u0026amp; docker-compose down \u0026amp;\u0026amp; docker-compose pull \u0026amp;\u0026amp; docker-compose up -d \u0026amp;\u0026amp; docker image prune -f 二 、容器维护命令 1 、查看所有运行容器的名称 1 docker ps -a --format \u0026#34;{{.Names}}\u0026#34; 2 、停止 halo和halodb 容器 1 docker stop halo halodb 3 、启动 halo和halodb 容器 1 docker start halo halodb 4 、重启 halo和halodb 容器 1 docker restart halo halodb 5 、进入 halo 容器 1 2 3 ## Ctrl+D 退出容器 ## docker exec -it halo sh docker exec -it halo bash 6 、查看 halo 配置文件 1 cat /mnt/mydisk/home/halo/docker-compose.yml ","date":"2025-01-06T08:48:39+08:00","image":"https://file.meimolihan.eu.org/img/halo-02.jpg","permalink":"https://meimolihan.eu.org/p/docker-%E9%83%A8%E7%BD%B2-halo-%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2/","title":"Docker 部署 halo 博客部署"}]